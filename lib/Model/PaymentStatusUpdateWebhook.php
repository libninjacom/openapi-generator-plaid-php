<?php
/**
 * PaymentStatusUpdateWebhook
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.64.13
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * PaymentStatusUpdateWebhook Class Doc Comment
 *
 * @category Class
 * @description Fired when the status of a payment has changed.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class PaymentStatusUpdateWebhook implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PaymentStatusUpdateWebhook';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'webhook_type' => 'string',
        'webhook_code' => 'string',
        'payment_id' => 'string',
        'new_payment_status' => '\OpenAPI\Client\Model\PaymentInitiationPaymentStatus',
        'old_payment_status' => '\OpenAPI\Client\Model\PaymentInitiationPaymentStatus',
        'original_reference' => 'string',
        'adjusted_reference' => 'string',
        'original_start_date' => '\DateTime',
        'adjusted_start_date' => '\DateTime',
        'timestamp' => '\DateTime',
        'error' => '\OpenAPI\Client\Model\PlaidError'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'webhook_type' => null,
        'webhook_code' => null,
        'payment_id' => null,
        'new_payment_status' => null,
        'old_payment_status' => null,
        'original_reference' => null,
        'adjusted_reference' => null,
        'original_start_date' => 'date',
        'adjusted_start_date' => 'date',
        'timestamp' => 'date-time',
        'error' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'webhook_type' => 'webhook_type',
        'webhook_code' => 'webhook_code',
        'payment_id' => 'payment_id',
        'new_payment_status' => 'new_payment_status',
        'old_payment_status' => 'old_payment_status',
        'original_reference' => 'original_reference',
        'adjusted_reference' => 'adjusted_reference',
        'original_start_date' => 'original_start_date',
        'adjusted_start_date' => 'adjusted_start_date',
        'timestamp' => 'timestamp',
        'error' => 'error'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'webhook_type' => 'setWebhookType',
        'webhook_code' => 'setWebhookCode',
        'payment_id' => 'setPaymentId',
        'new_payment_status' => 'setNewPaymentStatus',
        'old_payment_status' => 'setOldPaymentStatus',
        'original_reference' => 'setOriginalReference',
        'adjusted_reference' => 'setAdjustedReference',
        'original_start_date' => 'setOriginalStartDate',
        'adjusted_start_date' => 'setAdjustedStartDate',
        'timestamp' => 'setTimestamp',
        'error' => 'setError'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'webhook_type' => 'getWebhookType',
        'webhook_code' => 'getWebhookCode',
        'payment_id' => 'getPaymentId',
        'new_payment_status' => 'getNewPaymentStatus',
        'old_payment_status' => 'getOldPaymentStatus',
        'original_reference' => 'getOriginalReference',
        'adjusted_reference' => 'getAdjustedReference',
        'original_start_date' => 'getOriginalStartDate',
        'adjusted_start_date' => 'getAdjustedStartDate',
        'timestamp' => 'getTimestamp',
        'error' => 'getError'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['webhook_type'] = $data['webhook_type'] ?? null;
        $this->container['webhook_code'] = $data['webhook_code'] ?? null;
        $this->container['payment_id'] = $data['payment_id'] ?? null;
        $this->container['new_payment_status'] = $data['new_payment_status'] ?? null;
        $this->container['old_payment_status'] = $data['old_payment_status'] ?? null;
        $this->container['original_reference'] = $data['original_reference'] ?? null;
        $this->container['adjusted_reference'] = $data['adjusted_reference'] ?? null;
        $this->container['original_start_date'] = $data['original_start_date'] ?? null;
        $this->container['adjusted_start_date'] = $data['adjusted_start_date'] ?? null;
        $this->container['timestamp'] = $data['timestamp'] ?? null;
        $this->container['error'] = $data['error'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['webhook_type'] === null) {
            $invalidProperties[] = "'webhook_type' can't be null";
        }
        if ($this->container['webhook_code'] === null) {
            $invalidProperties[] = "'webhook_code' can't be null";
        }
        if ($this->container['payment_id'] === null) {
            $invalidProperties[] = "'payment_id' can't be null";
        }
        if ($this->container['new_payment_status'] === null) {
            $invalidProperties[] = "'new_payment_status' can't be null";
        }
        if ($this->container['old_payment_status'] === null) {
            $invalidProperties[] = "'old_payment_status' can't be null";
        }
        if ($this->container['original_reference'] === null) {
            $invalidProperties[] = "'original_reference' can't be null";
        }
        if ($this->container['original_start_date'] === null) {
            $invalidProperties[] = "'original_start_date' can't be null";
        }
        if ($this->container['adjusted_start_date'] === null) {
            $invalidProperties[] = "'adjusted_start_date' can't be null";
        }
        if ($this->container['timestamp'] === null) {
            $invalidProperties[] = "'timestamp' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets webhook_type
     *
     * @return string
     */
    public function getWebhookType()
    {
        return $this->container['webhook_type'];
    }

    /**
     * Sets webhook_type
     *
     * @param string $webhook_type `PAYMENT_INITIATION`
     *
     * @return self
     */
    public function setWebhookType($webhook_type)
    {
        $this->container['webhook_type'] = $webhook_type;

        return $this;
    }

    /**
     * Gets webhook_code
     *
     * @return string
     */
    public function getWebhookCode()
    {
        return $this->container['webhook_code'];
    }

    /**
     * Sets webhook_code
     *
     * @param string $webhook_code `PAYMENT_STATUS_UPDATE`
     *
     * @return self
     */
    public function setWebhookCode($webhook_code)
    {
        $this->container['webhook_code'] = $webhook_code;

        return $this;
    }

    /**
     * Gets payment_id
     *
     * @return string
     */
    public function getPaymentId()
    {
        return $this->container['payment_id'];
    }

    /**
     * Sets payment_id
     *
     * @param string $payment_id The `payment_id` for the payment being updated
     *
     * @return self
     */
    public function setPaymentId($payment_id)
    {
        $this->container['payment_id'] = $payment_id;

        return $this;
    }

    /**
     * Gets new_payment_status
     *
     * @return \OpenAPI\Client\Model\PaymentInitiationPaymentStatus
     */
    public function getNewPaymentStatus()
    {
        return $this->container['new_payment_status'];
    }

    /**
     * Sets new_payment_status
     *
     * @param \OpenAPI\Client\Model\PaymentInitiationPaymentStatus $new_payment_status new_payment_status
     *
     * @return self
     */
    public function setNewPaymentStatus($new_payment_status)
    {
        $this->container['new_payment_status'] = $new_payment_status;

        return $this;
    }

    /**
     * Gets old_payment_status
     *
     * @return \OpenAPI\Client\Model\PaymentInitiationPaymentStatus
     */
    public function getOldPaymentStatus()
    {
        return $this->container['old_payment_status'];
    }

    /**
     * Sets old_payment_status
     *
     * @param \OpenAPI\Client\Model\PaymentInitiationPaymentStatus $old_payment_status old_payment_status
     *
     * @return self
     */
    public function setOldPaymentStatus($old_payment_status)
    {
        $this->container['old_payment_status'] = $old_payment_status;

        return $this;
    }

    /**
     * Gets original_reference
     *
     * @return string
     */
    public function getOriginalReference()
    {
        return $this->container['original_reference'];
    }

    /**
     * Sets original_reference
     *
     * @param string $original_reference The original value of the reference when creating the payment.
     *
     * @return self
     */
    public function setOriginalReference($original_reference)
    {
        $this->container['original_reference'] = $original_reference;

        return $this;
    }

    /**
     * Gets adjusted_reference
     *
     * @return string|null
     */
    public function getAdjustedReference()
    {
        return $this->container['adjusted_reference'];
    }

    /**
     * Sets adjusted_reference
     *
     * @param string|null $adjusted_reference The value of the reference sent to the bank after adjustment to pass bank validation rules.
     *
     * @return self
     */
    public function setAdjustedReference($adjusted_reference)
    {
        $this->container['adjusted_reference'] = $adjusted_reference;

        return $this;
    }

    /**
     * Gets original_start_date
     *
     * @return \DateTime
     */
    public function getOriginalStartDate()
    {
        return $this->container['original_start_date'];
    }

    /**
     * Sets original_start_date
     *
     * @param \DateTime $original_start_date The original value of the `start_date` provided during the creation of a standing order. If the payment is not a standing order, this field will be `null`.
     *
     * @return self
     */
    public function setOriginalStartDate($original_start_date)
    {
        $this->container['original_start_date'] = $original_start_date;

        return $this;
    }

    /**
     * Gets adjusted_start_date
     *
     * @return \DateTime
     */
    public function getAdjustedStartDate()
    {
        return $this->container['adjusted_start_date'];
    }

    /**
     * Sets adjusted_start_date
     *
     * @param \DateTime $adjusted_start_date The start date sent to the bank after adjusting for holidays or weekends.  Will be provided in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD). If the start date did not require adjustment, or if the payment is not a standing order, this field will be `null`.
     *
     * @return self
     */
    public function setAdjustedStartDate($adjusted_start_date)
    {
        $this->container['adjusted_start_date'] = $adjusted_start_date;

        return $this;
    }

    /**
     * Gets timestamp
     *
     * @return \DateTime
     */
    public function getTimestamp()
    {
        return $this->container['timestamp'];
    }

    /**
     * Sets timestamp
     *
     * @param \DateTime $timestamp The timestamp of the update, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format, e.g. `\"2017-09-14T14:42:19.350Z\"`
     *
     * @return self
     */
    public function setTimestamp($timestamp)
    {
        $this->container['timestamp'] = $timestamp;

        return $this;
    }

    /**
     * Gets error
     *
     * @return \OpenAPI\Client\Model\PlaidError|null
     */
    public function getError()
    {
        return $this->container['error'];
    }

    /**
     * Sets error
     *
     * @param \OpenAPI\Client\Model\PlaidError|null $error error
     *
     * @return self
     */
    public function setError($error)
    {
        $this->container['error'] = $error;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


