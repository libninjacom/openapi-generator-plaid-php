<?php
/**
 * TransactionAllOf
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.64.13
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * TransactionAllOf Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class TransactionAllOf implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Transaction_allOf';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'payment_channel' => 'string',
        'authorized_date' => '\DateTime',
        'authorized_datetime' => '\DateTime',
        'datetime' => '\DateTime',
        'transaction_code' => '\OpenAPI\Client\Model\TransactionCode',
        'personal_finance_category' => 'PersonalFinanceCategory'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'payment_channel' => null,
        'authorized_date' => 'date',
        'authorized_datetime' => 'date-time',
        'datetime' => 'date-time',
        'transaction_code' => null,
        'personal_finance_category' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'payment_channel' => 'payment_channel',
        'authorized_date' => 'authorized_date',
        'authorized_datetime' => 'authorized_datetime',
        'datetime' => 'datetime',
        'transaction_code' => 'transaction_code',
        'personal_finance_category' => 'personal_finance_category'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'payment_channel' => 'setPaymentChannel',
        'authorized_date' => 'setAuthorizedDate',
        'authorized_datetime' => 'setAuthorizedDatetime',
        'datetime' => 'setDatetime',
        'transaction_code' => 'setTransactionCode',
        'personal_finance_category' => 'setPersonalFinanceCategory'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'payment_channel' => 'getPaymentChannel',
        'authorized_date' => 'getAuthorizedDate',
        'authorized_datetime' => 'getAuthorizedDatetime',
        'datetime' => 'getDatetime',
        'transaction_code' => 'getTransactionCode',
        'personal_finance_category' => 'getPersonalFinanceCategory'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const PAYMENT_CHANNEL_ONLINE = 'online';
    public const PAYMENT_CHANNEL_IN_STORE = 'in store';
    public const PAYMENT_CHANNEL_OTHER = 'other';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPaymentChannelAllowableValues()
    {
        return [
            self::PAYMENT_CHANNEL_ONLINE,
            self::PAYMENT_CHANNEL_IN_STORE,
            self::PAYMENT_CHANNEL_OTHER,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['payment_channel'] = $data['payment_channel'] ?? null;
        $this->container['authorized_date'] = $data['authorized_date'] ?? null;
        $this->container['authorized_datetime'] = $data['authorized_datetime'] ?? null;
        $this->container['datetime'] = $data['datetime'] ?? null;
        $this->container['transaction_code'] = $data['transaction_code'] ?? null;
        $this->container['personal_finance_category'] = $data['personal_finance_category'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['payment_channel'] === null) {
            $invalidProperties[] = "'payment_channel' can't be null";
        }
        $allowedValues = $this->getPaymentChannelAllowableValues();
        if (!is_null($this->container['payment_channel']) && !in_array($this->container['payment_channel'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'payment_channel', must be one of '%s'",
                $this->container['payment_channel'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['authorized_date'] === null) {
            $invalidProperties[] = "'authorized_date' can't be null";
        }
        if ($this->container['authorized_datetime'] === null) {
            $invalidProperties[] = "'authorized_datetime' can't be null";
        }
        if ($this->container['datetime'] === null) {
            $invalidProperties[] = "'datetime' can't be null";
        }
        if ($this->container['transaction_code'] === null) {
            $invalidProperties[] = "'transaction_code' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets payment_channel
     *
     * @return string
     */
    public function getPaymentChannel()
    {
        return $this->container['payment_channel'];
    }

    /**
     * Sets payment_channel
     *
     * @param string $payment_channel The channel used to make a payment. `online:` transactions that took place online.  `in store:` transactions that were made at a physical location.  `other:` transactions that relate to banks, e.g. fees or deposits.  This field replaces the `transaction_type` field.
     *
     * @return self
     */
    public function setPaymentChannel($payment_channel)
    {
        $allowedValues = $this->getPaymentChannelAllowableValues();
        if (!in_array($payment_channel, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'payment_channel', must be one of '%s'",
                    $payment_channel,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['payment_channel'] = $payment_channel;

        return $this;
    }

    /**
     * Gets authorized_date
     *
     * @return \DateTime
     */
    public function getAuthorizedDate()
    {
        return $this->container['authorized_date'];
    }

    /**
     * Sets authorized_date
     *
     * @param \DateTime $authorized_date The date that the transaction was authorized. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format ( `YYYY-MM-DD` ). The `authorized_date` field uses machine learning to determine a transaction date for transactions where the `date_transacted` is not available. If the `date_transacted` field is present and not `null`, the `authorized_date` field will have the same value as the `date_transacted` field.
     *
     * @return self
     */
    public function setAuthorizedDate($authorized_date)
    {
        $this->container['authorized_date'] = $authorized_date;

        return $this;
    }

    /**
     * Gets authorized_datetime
     *
     * @return \DateTime
     */
    public function getAuthorizedDatetime()
    {
        return $this->container['authorized_datetime'];
    }

    /**
     * Sets authorized_datetime
     *
     * @param \DateTime $authorized_datetime Date and time when a transaction was authorized in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format ( `YYYY-MM-DDTHH:mm:ssZ` ).  This field is returned for select financial institutions and comes as provided by the institution. It may contain default time values (such as 00:00:00).
     *
     * @return self
     */
    public function setAuthorizedDatetime($authorized_datetime)
    {
        $this->container['authorized_datetime'] = $authorized_datetime;

        return $this;
    }

    /**
     * Gets datetime
     *
     * @return \DateTime
     */
    public function getDatetime()
    {
        return $this->container['datetime'];
    }

    /**
     * Sets datetime
     *
     * @param \DateTime $datetime Date and time when a transaction was posted in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format ( `YYYY-MM-DDTHH:mm:ssZ` ).  This field is returned for select financial institutions and comes as provided by the institution. It may contain default time values (such as 00:00:00).
     *
     * @return self
     */
    public function setDatetime($datetime)
    {
        $this->container['datetime'] = $datetime;

        return $this;
    }

    /**
     * Gets transaction_code
     *
     * @return \OpenAPI\Client\Model\TransactionCode
     */
    public function getTransactionCode()
    {
        return $this->container['transaction_code'];
    }

    /**
     * Sets transaction_code
     *
     * @param \OpenAPI\Client\Model\TransactionCode $transaction_code transaction_code
     *
     * @return self
     */
    public function setTransactionCode($transaction_code)
    {
        $this->container['transaction_code'] = $transaction_code;

        return $this;
    }

    /**
     * Gets personal_finance_category
     *
     * @return PersonalFinanceCategory|null
     */
    public function getPersonalFinanceCategory()
    {
        return $this->container['personal_finance_category'];
    }

    /**
     * Sets personal_finance_category
     *
     * @param PersonalFinanceCategory|null $personal_finance_category personal_finance_category
     *
     * @return self
     */
    public function setPersonalFinanceCategory($personal_finance_category)
    {
        $this->container['personal_finance_category'] = $personal_finance_category;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


