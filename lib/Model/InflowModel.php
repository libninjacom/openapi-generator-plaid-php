<?php
/**
 * InflowModel
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.64.13
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * InflowModel Class Doc Comment
 *
 * @category Class
 * @description The &#x60;inflow_model&#x60; allows you to foo a test account that receives regular income or make regular payments on a loan. Any transactions generated by the &#x60;inflow_model&#x60; will appear in addition to randomly generated test data or transactions specified by &#x60;override_accounts&#x60;.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class InflowModel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'InflowModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'type' => 'string',
        'income_amount' => 'float',
        'payment_day_of_month' => 'float',
        'transaction_name' => 'string',
        'statement_day_of_month' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'type' => null,
        'income_amount' => null,
        'payment_day_of_month' => null,
        'transaction_name' => null,
        'statement_day_of_month' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'type' => 'type',
        'income_amount' => 'income_amount',
        'payment_day_of_month' => 'payment_day_of_month',
        'transaction_name' => 'transaction_name',
        'statement_day_of_month' => 'statement_day_of_month'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'type' => 'setType',
        'income_amount' => 'setIncomeAmount',
        'payment_day_of_month' => 'setPaymentDayOfMonth',
        'transaction_name' => 'setTransactionName',
        'statement_day_of_month' => 'setStatementDayOfMonth'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'type' => 'getType',
        'income_amount' => 'getIncomeAmount',
        'payment_day_of_month' => 'getPaymentDayOfMonth',
        'transaction_name' => 'getTransactionName',
        'statement_day_of_month' => 'getStatementDayOfMonth'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['type'] = $data['type'] ?? null;
        $this->container['income_amount'] = $data['income_amount'] ?? null;
        $this->container['payment_day_of_month'] = $data['payment_day_of_month'] ?? null;
        $this->container['transaction_name'] = $data['transaction_name'] ?? null;
        $this->container['statement_day_of_month'] = $data['statement_day_of_month'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        if ($this->container['income_amount'] === null) {
            $invalidProperties[] = "'income_amount' can't be null";
        }
        if ($this->container['payment_day_of_month'] === null) {
            $invalidProperties[] = "'payment_day_of_month' can't be null";
        }
        if ($this->container['transaction_name'] === null) {
            $invalidProperties[] = "'transaction_name' can't be null";
        }
        if ($this->container['statement_day_of_month'] === null) {
            $invalidProperties[] = "'statement_day_of_month' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type Inflow foo. One of the following:  `none`: No income  `monthly-income`: Income occurs once per month `monthly-balance-payment`: Pays off the balance on a liability account at the given statement day of month.  `monthly-interest-only-payment`: Makes an interest-only payment on a liability account at the given statement day of month.   Note that account types supported by Liabilities will accrue interest in the Sandbox. The types impacted are account type `credit` with subtype `credit` or `paypal`, and account type `loan` with subtype `student` or `mortgage`.
     *
     * @return self
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets income_amount
     *
     * @return float
     */
    public function getIncomeAmount()
    {
        return $this->container['income_amount'];
    }

    /**
     * Sets income_amount
     *
     * @param float $income_amount Amount of income per month. This value is required if `type` is `monthly-income`.
     *
     * @return self
     */
    public function setIncomeAmount($income_amount)
    {
        $this->container['income_amount'] = $income_amount;

        return $this;
    }

    /**
     * Gets payment_day_of_month
     *
     * @return float
     */
    public function getPaymentDayOfMonth()
    {
        return $this->container['payment_day_of_month'];
    }

    /**
     * Sets payment_day_of_month
     *
     * @param float $payment_day_of_month Number between 1 and 28, or `last` meaning the last day of the month. The day of the month on which the income transaction will appear. The name of the income transaction. This field is required if `type` is `monthly-income`, `monthly-balance-payment` or `monthly-interest-only-payment`.
     *
     * @return self
     */
    public function setPaymentDayOfMonth($payment_day_of_month)
    {
        $this->container['payment_day_of_month'] = $payment_day_of_month;

        return $this;
    }

    /**
     * Gets transaction_name
     *
     * @return string
     */
    public function getTransactionName()
    {
        return $this->container['transaction_name'];
    }

    /**
     * Sets transaction_name
     *
     * @param string $transaction_name The name of the income transaction. This field is required if `type` is `monthly-income`, `monthly-balance-payment` or `monthly-interest-only-payment`.
     *
     * @return self
     */
    public function setTransactionName($transaction_name)
    {
        $this->container['transaction_name'] = $transaction_name;

        return $this;
    }

    /**
     * Gets statement_day_of_month
     *
     * @return string
     */
    public function getStatementDayOfMonth()
    {
        return $this->container['statement_day_of_month'];
    }

    /**
     * Sets statement_day_of_month
     *
     * @param string $statement_day_of_month Number between 1 and 28, or `last` meaning the last day of the month. The day of the month on which the balance is calculated for the next payment. The name of the income transaction. This field is required if `type` is `monthly-balance-payment` or `monthly-interest-only-payment`.
     *
     * @return self
     */
    public function setStatementDayOfMonth($statement_day_of_month)
    {
        $this->container['statement_day_of_month'] = $statement_day_of_month;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


