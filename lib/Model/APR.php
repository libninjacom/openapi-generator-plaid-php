<?php
/**
 * APR
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.64.13
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * APR Class Doc Comment
 *
 * @category Class
 * @description Information about the APR on the account.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class APR implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'APR';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'apr_percentage' => 'float',
        'apr_type' => 'string',
        'balance_subject_to_apr' => 'float',
        'interest_charge_amount' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'apr_percentage' => null,
        'apr_type' => null,
        'balance_subject_to_apr' => null,
        'interest_charge_amount' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'apr_percentage' => 'apr_percentage',
        'apr_type' => 'apr_type',
        'balance_subject_to_apr' => 'balance_subject_to_apr',
        'interest_charge_amount' => 'interest_charge_amount'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'apr_percentage' => 'setAprPercentage',
        'apr_type' => 'setAprType',
        'balance_subject_to_apr' => 'setBalanceSubjectToApr',
        'interest_charge_amount' => 'setInterestChargeAmount'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'apr_percentage' => 'getAprPercentage',
        'apr_type' => 'getAprType',
        'balance_subject_to_apr' => 'getBalanceSubjectToApr',
        'interest_charge_amount' => 'getInterestChargeAmount'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const APR_TYPE_BALANCE_TRANSFER_APR = 'balance_transfer_apr';
    public const APR_TYPE_CASH_APR = 'cash_apr';
    public const APR_TYPE_PURCHASE_APR = 'purchase_apr';
    public const APR_TYPE_SPECIAL = 'special';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAprTypeAllowableValues()
    {
        return [
            self::APR_TYPE_BALANCE_TRANSFER_APR,
            self::APR_TYPE_CASH_APR,
            self::APR_TYPE_PURCHASE_APR,
            self::APR_TYPE_SPECIAL,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['apr_percentage'] = $data['apr_percentage'] ?? null;
        $this->container['apr_type'] = $data['apr_type'] ?? null;
        $this->container['balance_subject_to_apr'] = $data['balance_subject_to_apr'] ?? null;
        $this->container['interest_charge_amount'] = $data['interest_charge_amount'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['apr_percentage'] === null) {
            $invalidProperties[] = "'apr_percentage' can't be null";
        }
        if ($this->container['apr_type'] === null) {
            $invalidProperties[] = "'apr_type' can't be null";
        }
        $allowedValues = $this->getAprTypeAllowableValues();
        if (!is_null($this->container['apr_type']) && !in_array($this->container['apr_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'apr_type', must be one of '%s'",
                $this->container['apr_type'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['balance_subject_to_apr'] === null) {
            $invalidProperties[] = "'balance_subject_to_apr' can't be null";
        }
        if ($this->container['interest_charge_amount'] === null) {
            $invalidProperties[] = "'interest_charge_amount' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets apr_percentage
     *
     * @return float
     */
    public function getAprPercentage()
    {
        return $this->container['apr_percentage'];
    }

    /**
     * Sets apr_percentage
     *
     * @param float $apr_percentage Annual Percentage Rate applied.
     *
     * @return self
     */
    public function setAprPercentage($apr_percentage)
    {
        $this->container['apr_percentage'] = $apr_percentage;

        return $this;
    }

    /**
     * Gets apr_type
     *
     * @return string
     */
    public function getAprType()
    {
        return $this->container['apr_type'];
    }

    /**
     * Sets apr_type
     *
     * @param string $apr_type The type of balance to which the APR applies.
     *
     * @return self
     */
    public function setAprType($apr_type)
    {
        $allowedValues = $this->getAprTypeAllowableValues();
        if (!in_array($apr_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'apr_type', must be one of '%s'",
                    $apr_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['apr_type'] = $apr_type;

        return $this;
    }

    /**
     * Gets balance_subject_to_apr
     *
     * @return float
     */
    public function getBalanceSubjectToApr()
    {
        return $this->container['balance_subject_to_apr'];
    }

    /**
     * Sets balance_subject_to_apr
     *
     * @param float $balance_subject_to_apr Amount of money that is subjected to the APR if a balance was carried beyond payment due date. How it is calculated can vary by card issuer. It is often calculated as an average daily balance.
     *
     * @return self
     */
    public function setBalanceSubjectToApr($balance_subject_to_apr)
    {
        $this->container['balance_subject_to_apr'] = $balance_subject_to_apr;

        return $this;
    }

    /**
     * Gets interest_charge_amount
     *
     * @return float
     */
    public function getInterestChargeAmount()
    {
        return $this->container['interest_charge_amount'];
    }

    /**
     * Sets interest_charge_amount
     *
     * @param float $interest_charge_amount Amount of money charged due to interest from last statement.
     *
     * @return self
     */
    public function setInterestChargeAmount($interest_charge_amount)
    {
        $this->container['interest_charge_amount'] = $interest_charge_amount;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


