<?php
/**
 * AuthGetNumbers
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.64.13
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * AuthGetNumbers Class Doc Comment
 *
 * @category Class
 * @description An object containing identifying numbers used for making electronic transfers to and from the &#x60;accounts&#x60;. The identifying number type (ACH, EFT, IBAN, or BACS) used will depend on the country of the account. An account may have more than one number type. If a particular identifying number type is not used by any &#x60;accounts&#x60; for which data has been requested, the array for that type will be empty.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class AuthGetNumbers implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'AuthGetNumbers';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'ach' => '\OpenAPI\Client\Model\NumbersACH[]',
        'eft' => '\OpenAPI\Client\Model\NumbersEFT[]',
        'international' => '\OpenAPI\Client\Model\NumbersInternational[]',
        'bacs' => '\OpenAPI\Client\Model\NumbersBACS[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'ach' => null,
        'eft' => null,
        'international' => null,
        'bacs' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'ach' => 'ach',
        'eft' => 'eft',
        'international' => 'international',
        'bacs' => 'bacs'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'ach' => 'setAch',
        'eft' => 'setEft',
        'international' => 'setInternational',
        'bacs' => 'setBacs'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'ach' => 'getAch',
        'eft' => 'getEft',
        'international' => 'getInternational',
        'bacs' => 'getBacs'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['ach'] = $data['ach'] ?? null;
        $this->container['eft'] = $data['eft'] ?? null;
        $this->container['international'] = $data['international'] ?? null;
        $this->container['bacs'] = $data['bacs'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['ach'] === null) {
            $invalidProperties[] = "'ach' can't be null";
        }
        if ($this->container['eft'] === null) {
            $invalidProperties[] = "'eft' can't be null";
        }
        if ($this->container['international'] === null) {
            $invalidProperties[] = "'international' can't be null";
        }
        if ($this->container['bacs'] === null) {
            $invalidProperties[] = "'bacs' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets ach
     *
     * @return \OpenAPI\Client\Model\NumbersACH[]
     */
    public function getAch()
    {
        return $this->container['ach'];
    }

    /**
     * Sets ach
     *
     * @param \OpenAPI\Client\Model\NumbersACH[] $ach An array of ACH numbers identifying accounts.
     *
     * @return self
     */
    public function setAch($ach)
    {
        $this->container['ach'] = $ach;

        return $this;
    }

    /**
     * Gets eft
     *
     * @return \OpenAPI\Client\Model\NumbersEFT[]
     */
    public function getEft()
    {
        return $this->container['eft'];
    }

    /**
     * Sets eft
     *
     * @param \OpenAPI\Client\Model\NumbersEFT[] $eft An array of EFT numbers identifying accounts.
     *
     * @return self
     */
    public function setEft($eft)
    {
        $this->container['eft'] = $eft;

        return $this;
    }

    /**
     * Gets international
     *
     * @return \OpenAPI\Client\Model\NumbersInternational[]
     */
    public function getInternational()
    {
        return $this->container['international'];
    }

    /**
     * Sets international
     *
     * @param \OpenAPI\Client\Model\NumbersInternational[] $international An array of IBAN numbers identifying accounts.
     *
     * @return self
     */
    public function setInternational($international)
    {
        $this->container['international'] = $international;

        return $this;
    }

    /**
     * Gets bacs
     *
     * @return \OpenAPI\Client\Model\NumbersBACS[]
     */
    public function getBacs()
    {
        return $this->container['bacs'];
    }

    /**
     * Sets bacs
     *
     * @param \OpenAPI\Client\Model\NumbersBACS[] $bacs An array of BACS numbers identifying accounts.
     *
     * @return self
     */
    public function setBacs($bacs)
    {
        $this->container['bacs'] = $bacs;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


