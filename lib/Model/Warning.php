<?php
/**
 * Warning
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.64.13
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * Warning Class Doc Comment
 *
 * @category Class
 * @description It is possible for an Asset Report to be returned with missing account owner information. In such cases, the Asset Report will contain warning data in the response, indicating why obtaining the owner information failed.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class Warning implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Warning';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'warning_type' => 'string',
        'warning_code' => 'string',
        'cause' => '\OpenAPI\Client\Model\Cause'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'warning_type' => null,
        'warning_code' => null,
        'cause' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'warning_type' => 'warning_type',
        'warning_code' => 'warning_code',
        'cause' => 'cause'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'warning_type' => 'setWarningType',
        'warning_code' => 'setWarningCode',
        'cause' => 'setCause'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'warning_type' => 'getWarningType',
        'warning_code' => 'getWarningCode',
        'cause' => 'getCause'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const WARNING_CODE_OWNERS_UNAVAILABLE = 'OWNERS_UNAVAILABLE';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getWarningCodeAllowableValues()
    {
        return [
            self::WARNING_CODE_OWNERS_UNAVAILABLE,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['warning_type'] = $data['warning_type'] ?? null;
        $this->container['warning_code'] = $data['warning_code'] ?? null;
        $this->container['cause'] = $data['cause'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['warning_type'] === null) {
            $invalidProperties[] = "'warning_type' can't be null";
        }
        if ($this->container['warning_code'] === null) {
            $invalidProperties[] = "'warning_code' can't be null";
        }
        $allowedValues = $this->getWarningCodeAllowableValues();
        if (!is_null($this->container['warning_code']) && !in_array($this->container['warning_code'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'warning_code', must be one of '%s'",
                $this->container['warning_code'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['cause'] === null) {
            $invalidProperties[] = "'cause' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets warning_type
     *
     * @return string
     */
    public function getWarningType()
    {
        return $this->container['warning_type'];
    }

    /**
     * Sets warning_type
     *
     * @param string $warning_type The warning type, which will always be `ASSET_REPORT_WARNING`
     *
     * @return self
     */
    public function setWarningType($warning_type)
    {
        $this->container['warning_type'] = $warning_type;

        return $this;
    }

    /**
     * Gets warning_code
     *
     * @return string
     */
    public function getWarningCode()
    {
        return $this->container['warning_code'];
    }

    /**
     * Sets warning_code
     *
     * @param string $warning_code The warning code identifies a specific kind of warning. Currently, the only possible warning code is `OWNERS_UNAVAILABLE`, which indicates that account-owner information is not available.
     *
     * @return self
     */
    public function setWarningCode($warning_code)
    {
        $allowedValues = $this->getWarningCodeAllowableValues();
        if (!in_array($warning_code, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'warning_code', must be one of '%s'",
                    $warning_code,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['warning_code'] = $warning_code;

        return $this;
    }

    /**
     * Gets cause
     *
     * @return \OpenAPI\Client\Model\Cause
     */
    public function getCause()
    {
        return $this->container['cause'];
    }

    /**
     * Sets cause
     *
     * @param \OpenAPI\Client\Model\Cause $cause cause
     *
     * @return self
     */
    public function setCause($cause)
    {
        $this->container['cause'] = $cause;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


