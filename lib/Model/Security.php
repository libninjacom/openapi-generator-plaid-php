<?php
/**
 * Security
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.64.13
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * Security Class Doc Comment
 *
 * @category Class
 * @description Contains details about a security
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class Security implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Security';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'security_id' => 'string',
        'isin' => 'string',
        'cusip' => 'string',
        'sedol' => 'string',
        'institution_security_id' => 'string',
        'institution_id' => 'string',
        'proxy_security_id' => 'string',
        'name' => 'string',
        'ticker_symbol' => 'string',
        'is_cash_equivalent' => 'bool',
        'type' => 'string',
        'close_price' => 'float',
        'close_price_as_of' => '\DateTime',
        'iso_currency_code' => 'string',
        'unofficial_currency_code' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'security_id' => null,
        'isin' => null,
        'cusip' => null,
        'sedol' => null,
        'institution_security_id' => null,
        'institution_id' => null,
        'proxy_security_id' => null,
        'name' => null,
        'ticker_symbol' => null,
        'is_cash_equivalent' => null,
        'type' => null,
        'close_price' => null,
        'close_price_as_of' => 'date',
        'iso_currency_code' => null,
        'unofficial_currency_code' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'security_id' => 'security_id',
        'isin' => 'isin',
        'cusip' => 'cusip',
        'sedol' => 'sedol',
        'institution_security_id' => 'institution_security_id',
        'institution_id' => 'institution_id',
        'proxy_security_id' => 'proxy_security_id',
        'name' => 'name',
        'ticker_symbol' => 'ticker_symbol',
        'is_cash_equivalent' => 'is_cash_equivalent',
        'type' => 'type',
        'close_price' => 'close_price',
        'close_price_as_of' => 'close_price_as_of',
        'iso_currency_code' => 'iso_currency_code',
        'unofficial_currency_code' => 'unofficial_currency_code'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'security_id' => 'setSecurityId',
        'isin' => 'setIsin',
        'cusip' => 'setCusip',
        'sedol' => 'setSedol',
        'institution_security_id' => 'setInstitutionSecurityId',
        'institution_id' => 'setInstitutionId',
        'proxy_security_id' => 'setProxySecurityId',
        'name' => 'setName',
        'ticker_symbol' => 'setTickerSymbol',
        'is_cash_equivalent' => 'setIsCashEquivalent',
        'type' => 'setType',
        'close_price' => 'setClosePrice',
        'close_price_as_of' => 'setClosePriceAsOf',
        'iso_currency_code' => 'setIsoCurrencyCode',
        'unofficial_currency_code' => 'setUnofficialCurrencyCode'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'security_id' => 'getSecurityId',
        'isin' => 'getIsin',
        'cusip' => 'getCusip',
        'sedol' => 'getSedol',
        'institution_security_id' => 'getInstitutionSecurityId',
        'institution_id' => 'getInstitutionId',
        'proxy_security_id' => 'getProxySecurityId',
        'name' => 'getName',
        'ticker_symbol' => 'getTickerSymbol',
        'is_cash_equivalent' => 'getIsCashEquivalent',
        'type' => 'getType',
        'close_price' => 'getClosePrice',
        'close_price_as_of' => 'getClosePriceAsOf',
        'iso_currency_code' => 'getIsoCurrencyCode',
        'unofficial_currency_code' => 'getUnofficialCurrencyCode'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['security_id'] = $data['security_id'] ?? null;
        $this->container['isin'] = $data['isin'] ?? null;
        $this->container['cusip'] = $data['cusip'] ?? null;
        $this->container['sedol'] = $data['sedol'] ?? null;
        $this->container['institution_security_id'] = $data['institution_security_id'] ?? null;
        $this->container['institution_id'] = $data['institution_id'] ?? null;
        $this->container['proxy_security_id'] = $data['proxy_security_id'] ?? null;
        $this->container['name'] = $data['name'] ?? null;
        $this->container['ticker_symbol'] = $data['ticker_symbol'] ?? null;
        $this->container['is_cash_equivalent'] = $data['is_cash_equivalent'] ?? null;
        $this->container['type'] = $data['type'] ?? null;
        $this->container['close_price'] = $data['close_price'] ?? null;
        $this->container['close_price_as_of'] = $data['close_price_as_of'] ?? null;
        $this->container['iso_currency_code'] = $data['iso_currency_code'] ?? null;
        $this->container['unofficial_currency_code'] = $data['unofficial_currency_code'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['security_id'] === null) {
            $invalidProperties[] = "'security_id' can't be null";
        }
        if ($this->container['isin'] === null) {
            $invalidProperties[] = "'isin' can't be null";
        }
        if ($this->container['cusip'] === null) {
            $invalidProperties[] = "'cusip' can't be null";
        }
        if ($this->container['sedol'] === null) {
            $invalidProperties[] = "'sedol' can't be null";
        }
        if ($this->container['institution_security_id'] === null) {
            $invalidProperties[] = "'institution_security_id' can't be null";
        }
        if ($this->container['institution_id'] === null) {
            $invalidProperties[] = "'institution_id' can't be null";
        }
        if ($this->container['proxy_security_id'] === null) {
            $invalidProperties[] = "'proxy_security_id' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['ticker_symbol'] === null) {
            $invalidProperties[] = "'ticker_symbol' can't be null";
        }
        if ($this->container['is_cash_equivalent'] === null) {
            $invalidProperties[] = "'is_cash_equivalent' can't be null";
        }
        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        if ($this->container['close_price'] === null) {
            $invalidProperties[] = "'close_price' can't be null";
        }
        if ($this->container['close_price_as_of'] === null) {
            $invalidProperties[] = "'close_price_as_of' can't be null";
        }
        if ($this->container['iso_currency_code'] === null) {
            $invalidProperties[] = "'iso_currency_code' can't be null";
        }
        if ($this->container['unofficial_currency_code'] === null) {
            $invalidProperties[] = "'unofficial_currency_code' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets security_id
     *
     * @return string
     */
    public function getSecurityId()
    {
        return $this->container['security_id'];
    }

    /**
     * Sets security_id
     *
     * @param string $security_id A unique, Plaid-specific identifier for the security, used to associate securities with holdings. Like all Plaid identifiers, the `security_id` is case sensitive.
     *
     * @return self
     */
    public function setSecurityId($security_id)
    {
        $this->container['security_id'] = $security_id;

        return $this;
    }

    /**
     * Gets isin
     *
     * @return string
     */
    public function getIsin()
    {
        return $this->container['isin'];
    }

    /**
     * Sets isin
     *
     * @param string $isin 12-character ISIN, a globally unique securities identifier.
     *
     * @return self
     */
    public function setIsin($isin)
    {
        $this->container['isin'] = $isin;

        return $this;
    }

    /**
     * Gets cusip
     *
     * @return string
     */
    public function getCusip()
    {
        return $this->container['cusip'];
    }

    /**
     * Sets cusip
     *
     * @param string $cusip 9-character CUSIP, an identifier assigned to North American securities.
     *
     * @return self
     */
    public function setCusip($cusip)
    {
        $this->container['cusip'] = $cusip;

        return $this;
    }

    /**
     * Gets sedol
     *
     * @return string
     */
    public function getSedol()
    {
        return $this->container['sedol'];
    }

    /**
     * Sets sedol
     *
     * @param string $sedol 7-character SEDOL, an identifier assigned to securities in the UK.
     *
     * @return self
     */
    public function setSedol($sedol)
    {
        $this->container['sedol'] = $sedol;

        return $this;
    }

    /**
     * Gets institution_security_id
     *
     * @return string
     */
    public function getInstitutionSecurityId()
    {
        return $this->container['institution_security_id'];
    }

    /**
     * Sets institution_security_id
     *
     * @param string $institution_security_id An identifier given to the security by the institution
     *
     * @return self
     */
    public function setInstitutionSecurityId($institution_security_id)
    {
        $this->container['institution_security_id'] = $institution_security_id;

        return $this;
    }

    /**
     * Gets institution_id
     *
     * @return string
     */
    public function getInstitutionId()
    {
        return $this->container['institution_id'];
    }

    /**
     * Sets institution_id
     *
     * @param string $institution_id If `institution_security_id` is present, this field indicates the Plaid `institution_id` of the institution to whom the identifier belongs.
     *
     * @return self
     */
    public function setInstitutionId($institution_id)
    {
        $this->container['institution_id'] = $institution_id;

        return $this;
    }

    /**
     * Gets proxy_security_id
     *
     * @return string
     */
    public function getProxySecurityId()
    {
        return $this->container['proxy_security_id'];
    }

    /**
     * Sets proxy_security_id
     *
     * @param string $proxy_security_id In certain cases, Plaid will provide the ID of another security whose performance resembles this security, typically when the original security has low volume, or when a private security can be modeled with a publicly traded security.
     *
     * @return self
     */
    public function setProxySecurityId($proxy_security_id)
    {
        $this->container['proxy_security_id'] = $proxy_security_id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name A descriptive name for the security, suitable for display.
     *
     * @return self
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets ticker_symbol
     *
     * @return string
     */
    public function getTickerSymbol()
    {
        return $this->container['ticker_symbol'];
    }

    /**
     * Sets ticker_symbol
     *
     * @param string $ticker_symbol The security’s trading symbol for publicly traded securities, and otherwise a short identifier if available.
     *
     * @return self
     */
    public function setTickerSymbol($ticker_symbol)
    {
        $this->container['ticker_symbol'] = $ticker_symbol;

        return $this;
    }

    /**
     * Gets is_cash_equivalent
     *
     * @return bool
     */
    public function getIsCashEquivalent()
    {
        return $this->container['is_cash_equivalent'];
    }

    /**
     * Sets is_cash_equivalent
     *
     * @param bool $is_cash_equivalent Indicates that a security is a highly liquid asset and can be treated like cash.
     *
     * @return self
     */
    public function setIsCashEquivalent($is_cash_equivalent)
    {
        $this->container['is_cash_equivalent'] = $is_cash_equivalent;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type The security type of the holding. Valid security types are:  `cash`: Cash, currency, and money market funds  `derivative`: Options, warrants, and other derivative instruments  `equity`: Domestic and foreign equities  `etf`: Multi-asset exchange-traded investment funds  `fixed income`: Bonds and certificates of deposit (CDs)  `loan`: Loans and loan receivables.  `mutual fund`: Open- and closed-end vehicles pooling funds of multiple investors.  `other`: Unknown or other investment types
     *
     * @return self
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets close_price
     *
     * @return float
     */
    public function getClosePrice()
    {
        return $this->container['close_price'];
    }

    /**
     * Sets close_price
     *
     * @param float $close_price Price of the security at the close of the previous trading session. `null` for non-public securities. If the security is a foreign currency or a cryptocurrency this field will be updated daily and will be priced in USD.
     *
     * @return self
     */
    public function setClosePrice($close_price)
    {
        $this->container['close_price'] = $close_price;

        return $this;
    }

    /**
     * Gets close_price_as_of
     *
     * @return \DateTime
     */
    public function getClosePriceAsOf()
    {
        return $this->container['close_price_as_of'];
    }

    /**
     * Sets close_price_as_of
     *
     * @param \DateTime $close_price_as_of Date for which `close_price` is accurate. Always `null` if `close_price` is `null`.
     *
     * @return self
     */
    public function setClosePriceAsOf($close_price_as_of)
    {
        $this->container['close_price_as_of'] = $close_price_as_of;

        return $this;
    }

    /**
     * Gets iso_currency_code
     *
     * @return string
     */
    public function getIsoCurrencyCode()
    {
        return $this->container['iso_currency_code'];
    }

    /**
     * Sets iso_currency_code
     *
     * @param string $iso_currency_code The ISO-4217 currency code of the price given. Always `null` if `unofficial_currency_code` is non-`null`.
     *
     * @return self
     */
    public function setIsoCurrencyCode($iso_currency_code)
    {
        $this->container['iso_currency_code'] = $iso_currency_code;

        return $this;
    }

    /**
     * Gets unofficial_currency_code
     *
     * @return string
     */
    public function getUnofficialCurrencyCode()
    {
        return $this->container['unofficial_currency_code'];
    }

    /**
     * Sets unofficial_currency_code
     *
     * @param string $unofficial_currency_code The unofficial currency code associated with the security. Always `null` if `iso_currency_code` is non-`null`. Unofficial currency codes are used for currencies that do not have official ISO currency codes, such as cryptocurrencies and the currencies of certain countries.  See the [currency code schema](https://plaid.com/docs/api/accounts#currency-code-schema) for a full listing of supported `iso_currency_code`s.
     *
     * @return self
     */
    public function setUnofficialCurrencyCode($unofficial_currency_code)
    {
        $this->container['unofficial_currency_code'] = $unofficial_currency_code;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


