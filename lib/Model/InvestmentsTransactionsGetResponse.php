<?php
/**
 * InvestmentsTransactionsGetResponse
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.64.13
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * InvestmentsTransactionsGetResponse Class Doc Comment
 *
 * @category Class
 * @description InvestmentsTransactionsGetResponse defines the response schema for &#x60;/investments/transactions/get&#x60;
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class InvestmentsTransactionsGetResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'InvestmentsTransactionsGetResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'item' => '\OpenAPI\Client\Model\Item',
        'accounts' => '\OpenAPI\Client\Model\AccountBase[]',
        'securities' => '\OpenAPI\Client\Model\Security[]',
        'investment_transactions' => '\OpenAPI\Client\Model\InvestmentTransaction[]',
        'total_investment_transactions' => 'int',
        'request_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'item' => null,
        'accounts' => null,
        'securities' => null,
        'investment_transactions' => null,
        'total_investment_transactions' => null,
        'request_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'item' => 'item',
        'accounts' => 'accounts',
        'securities' => 'securities',
        'investment_transactions' => 'investment_transactions',
        'total_investment_transactions' => 'total_investment_transactions',
        'request_id' => 'request_id'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'item' => 'setItem',
        'accounts' => 'setAccounts',
        'securities' => 'setSecurities',
        'investment_transactions' => 'setInvestmentTransactions',
        'total_investment_transactions' => 'setTotalInvestmentTransactions',
        'request_id' => 'setRequestId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'item' => 'getItem',
        'accounts' => 'getAccounts',
        'securities' => 'getSecurities',
        'investment_transactions' => 'getInvestmentTransactions',
        'total_investment_transactions' => 'getTotalInvestmentTransactions',
        'request_id' => 'getRequestId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['item'] = $data['item'] ?? null;
        $this->container['accounts'] = $data['accounts'] ?? null;
        $this->container['securities'] = $data['securities'] ?? null;
        $this->container['investment_transactions'] = $data['investment_transactions'] ?? null;
        $this->container['total_investment_transactions'] = $data['total_investment_transactions'] ?? null;
        $this->container['request_id'] = $data['request_id'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['item'] === null) {
            $invalidProperties[] = "'item' can't be null";
        }
        if ($this->container['accounts'] === null) {
            $invalidProperties[] = "'accounts' can't be null";
        }
        if ($this->container['securities'] === null) {
            $invalidProperties[] = "'securities' can't be null";
        }
        if ($this->container['investment_transactions'] === null) {
            $invalidProperties[] = "'investment_transactions' can't be null";
        }
        if ($this->container['total_investment_transactions'] === null) {
            $invalidProperties[] = "'total_investment_transactions' can't be null";
        }
        if ($this->container['request_id'] === null) {
            $invalidProperties[] = "'request_id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets item
     *
     * @return \OpenAPI\Client\Model\Item
     */
    public function getItem()
    {
        return $this->container['item'];
    }

    /**
     * Sets item
     *
     * @param \OpenAPI\Client\Model\Item $item item
     *
     * @return self
     */
    public function setItem($item)
    {
        $this->container['item'] = $item;

        return $this;
    }

    /**
     * Gets accounts
     *
     * @return \OpenAPI\Client\Model\AccountBase[]
     */
    public function getAccounts()
    {
        return $this->container['accounts'];
    }

    /**
     * Sets accounts
     *
     * @param \OpenAPI\Client\Model\AccountBase[] $accounts The accounts for which transaction history is being fetched.
     *
     * @return self
     */
    public function setAccounts($accounts)
    {
        $this->container['accounts'] = $accounts;

        return $this;
    }

    /**
     * Gets securities
     *
     * @return \OpenAPI\Client\Model\Security[]
     */
    public function getSecurities()
    {
        return $this->container['securities'];
    }

    /**
     * Sets securities
     *
     * @param \OpenAPI\Client\Model\Security[] $securities All securities for which there is a corresponding transaction being fetched.
     *
     * @return self
     */
    public function setSecurities($securities)
    {
        $this->container['securities'] = $securities;

        return $this;
    }

    /**
     * Gets investment_transactions
     *
     * @return \OpenAPI\Client\Model\InvestmentTransaction[]
     */
    public function getInvestmentTransactions()
    {
        return $this->container['investment_transactions'];
    }

    /**
     * Sets investment_transactions
     *
     * @param \OpenAPI\Client\Model\InvestmentTransaction[] $investment_transactions The transactions being fetched
     *
     * @return self
     */
    public function setInvestmentTransactions($investment_transactions)
    {
        $this->container['investment_transactions'] = $investment_transactions;

        return $this;
    }

    /**
     * Gets total_investment_transactions
     *
     * @return int
     */
    public function getTotalInvestmentTransactions()
    {
        return $this->container['total_investment_transactions'];
    }

    /**
     * Sets total_investment_transactions
     *
     * @param int $total_investment_transactions The total number of transactions available within the date range specified. If `total_investment_transactions` is larger than the size of the `transactions` array, more transactions are available and can be fetched via manipulating the `offset` parameter.'
     *
     * @return self
     */
    public function setTotalInvestmentTransactions($total_investment_transactions)
    {
        $this->container['total_investment_transactions'] = $total_investment_transactions;

        return $this;
    }

    /**
     * Gets request_id
     *
     * @return string
     */
    public function getRequestId()
    {
        return $this->container['request_id'];
    }

    /**
     * Sets request_id
     *
     * @param string $request_id A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     *
     * @return self
     */
    public function setRequestId($request_id)
    {
        $this->container['request_id'] = $request_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


