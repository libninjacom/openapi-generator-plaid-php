<?php
/**
 * Transfer
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.64.13
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * Transfer Class Doc Comment
 *
 * @category Class
 * @description Represents a transfer within the Transfers API.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class Transfer implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Transfer';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'ach_class' => '\OpenAPI\Client\Model\ACHClass',
        'account_id' => 'string',
        'type' => '\OpenAPI\Client\Model\TransferType',
        'user' => '\OpenAPI\Client\Model\TransferUserInResponse',
        'amount' => 'string',
        'description' => 'string',
        'created' => '\DateTime',
        'status' => '\OpenAPI\Client\Model\TransferStatus',
        'sweep_status' => '\OpenAPI\Client\Model\TransferSweepStatus',
        'network' => '\OpenAPI\Client\Model\TransferNetwork',
        'cancellable' => 'bool',
        'failure_reason' => '\OpenAPI\Client\Model\TransferFailure',
        'metadata' => 'array<string,string>',
        'origination_account_id' => 'string',
        'guarantee_decision' => '\OpenAPI\Client\Model\TransferAuthorizationGuaranteeDecision',
        'guarantee_decision_rationale' => '\OpenAPI\Client\Model\TransferAuthorizationGuaranteeDecisionRationale',
        'iso_currency_code' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'ach_class' => null,
        'account_id' => null,
        'type' => null,
        'user' => null,
        'amount' => null,
        'description' => null,
        'created' => 'date-time',
        'status' => null,
        'sweep_status' => null,
        'network' => null,
        'cancellable' => null,
        'failure_reason' => null,
        'metadata' => null,
        'origination_account_id' => null,
        'guarantee_decision' => null,
        'guarantee_decision_rationale' => null,
        'iso_currency_code' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'ach_class' => 'ach_class',
        'account_id' => 'account_id',
        'type' => 'type',
        'user' => 'user',
        'amount' => 'amount',
        'description' => 'description',
        'created' => 'created',
        'status' => 'status',
        'sweep_status' => 'sweep_status',
        'network' => 'network',
        'cancellable' => 'cancellable',
        'failure_reason' => 'failure_reason',
        'metadata' => 'metadata',
        'origination_account_id' => 'origination_account_id',
        'guarantee_decision' => 'guarantee_decision',
        'guarantee_decision_rationale' => 'guarantee_decision_rationale',
        'iso_currency_code' => 'iso_currency_code'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'ach_class' => 'setAchClass',
        'account_id' => 'setAccountId',
        'type' => 'setType',
        'user' => 'setUser',
        'amount' => 'setAmount',
        'description' => 'setDescription',
        'created' => 'setCreated',
        'status' => 'setStatus',
        'sweep_status' => 'setSweepStatus',
        'network' => 'setNetwork',
        'cancellable' => 'setCancellable',
        'failure_reason' => 'setFailureReason',
        'metadata' => 'setMetadata',
        'origination_account_id' => 'setOriginationAccountId',
        'guarantee_decision' => 'setGuaranteeDecision',
        'guarantee_decision_rationale' => 'setGuaranteeDecisionRationale',
        'iso_currency_code' => 'setIsoCurrencyCode'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'ach_class' => 'getAchClass',
        'account_id' => 'getAccountId',
        'type' => 'getType',
        'user' => 'getUser',
        'amount' => 'getAmount',
        'description' => 'getDescription',
        'created' => 'getCreated',
        'status' => 'getStatus',
        'sweep_status' => 'getSweepStatus',
        'network' => 'getNetwork',
        'cancellable' => 'getCancellable',
        'failure_reason' => 'getFailureReason',
        'metadata' => 'getMetadata',
        'origination_account_id' => 'getOriginationAccountId',
        'guarantee_decision' => 'getGuaranteeDecision',
        'guarantee_decision_rationale' => 'getGuaranteeDecisionRationale',
        'iso_currency_code' => 'getIsoCurrencyCode'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['ach_class'] = $data['ach_class'] ?? null;
        $this->container['account_id'] = $data['account_id'] ?? null;
        $this->container['type'] = $data['type'] ?? null;
        $this->container['user'] = $data['user'] ?? null;
        $this->container['amount'] = $data['amount'] ?? null;
        $this->container['description'] = $data['description'] ?? null;
        $this->container['created'] = $data['created'] ?? null;
        $this->container['status'] = $data['status'] ?? null;
        $this->container['sweep_status'] = $data['sweep_status'] ?? null;
        $this->container['network'] = $data['network'] ?? null;
        $this->container['cancellable'] = $data['cancellable'] ?? null;
        $this->container['failure_reason'] = $data['failure_reason'] ?? null;
        $this->container['metadata'] = $data['metadata'] ?? null;
        $this->container['origination_account_id'] = $data['origination_account_id'] ?? null;
        $this->container['guarantee_decision'] = $data['guarantee_decision'] ?? null;
        $this->container['guarantee_decision_rationale'] = $data['guarantee_decision_rationale'] ?? null;
        $this->container['iso_currency_code'] = $data['iso_currency_code'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['ach_class'] === null) {
            $invalidProperties[] = "'ach_class' can't be null";
        }
        if ($this->container['account_id'] === null) {
            $invalidProperties[] = "'account_id' can't be null";
        }
        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        if ($this->container['user'] === null) {
            $invalidProperties[] = "'user' can't be null";
        }
        if ($this->container['amount'] === null) {
            $invalidProperties[] = "'amount' can't be null";
        }
        if ($this->container['description'] === null) {
            $invalidProperties[] = "'description' can't be null";
        }
        if ($this->container['created'] === null) {
            $invalidProperties[] = "'created' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        if ($this->container['network'] === null) {
            $invalidProperties[] = "'network' can't be null";
        }
        if ($this->container['cancellable'] === null) {
            $invalidProperties[] = "'cancellable' can't be null";
        }
        if ($this->container['failure_reason'] === null) {
            $invalidProperties[] = "'failure_reason' can't be null";
        }
        if ($this->container['metadata'] === null) {
            $invalidProperties[] = "'metadata' can't be null";
        }
        if ((count($this->container['metadata']) > 50)) {
            $invalidProperties[] = "invalid value for 'metadata', number of items must be less than or equal to 50.";
        }

        if ($this->container['origination_account_id'] === null) {
            $invalidProperties[] = "'origination_account_id' can't be null";
        }
        if ($this->container['guarantee_decision'] === null) {
            $invalidProperties[] = "'guarantee_decision' can't be null";
        }
        if ($this->container['guarantee_decision_rationale'] === null) {
            $invalidProperties[] = "'guarantee_decision_rationale' can't be null";
        }
        if ($this->container['iso_currency_code'] === null) {
            $invalidProperties[] = "'iso_currency_code' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id Plaid’s unique identifier for a transfer.
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets ach_class
     *
     * @return \OpenAPI\Client\Model\ACHClass
     */
    public function getAchClass()
    {
        return $this->container['ach_class'];
    }

    /**
     * Sets ach_class
     *
     * @param \OpenAPI\Client\Model\ACHClass $ach_class ach_class
     *
     * @return self
     */
    public function setAchClass($ach_class)
    {
        $this->container['ach_class'] = $ach_class;

        return $this;
    }

    /**
     * Gets account_id
     *
     * @return string
     */
    public function getAccountId()
    {
        return $this->container['account_id'];
    }

    /**
     * Sets account_id
     *
     * @param string $account_id The account ID that should be credited/debited for this transfer.
     *
     * @return self
     */
    public function setAccountId($account_id)
    {
        $this->container['account_id'] = $account_id;

        return $this;
    }

    /**
     * Gets type
     *
     * @return \OpenAPI\Client\Model\TransferType
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param \OpenAPI\Client\Model\TransferType $type type
     *
     * @return self
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets user
     *
     * @return \OpenAPI\Client\Model\TransferUserInResponse
     */
    public function getUser()
    {
        return $this->container['user'];
    }

    /**
     * Sets user
     *
     * @param \OpenAPI\Client\Model\TransferUserInResponse $user user
     *
     * @return self
     */
    public function setUser($user)
    {
        $this->container['user'] = $user;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return string
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param string $amount The amount of the transfer (decimal string with two digits of precision e.g. \"10.00\").
     *
     * @return self
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description The description of the transfer.
     *
     * @return self
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets created
     *
     * @return \DateTime
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     *
     * @param \DateTime $created The datetime when this transfer was created. This will be of the form `2006-01-02T15:04:05Z`
     *
     * @return self
     */
    public function setCreated($created)
    {
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \OpenAPI\Client\Model\TransferStatus
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \OpenAPI\Client\Model\TransferStatus $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets sweep_status
     *
     * @return \OpenAPI\Client\Model\TransferSweepStatus|null
     */
    public function getSweepStatus()
    {
        return $this->container['sweep_status'];
    }

    /**
     * Sets sweep_status
     *
     * @param \OpenAPI\Client\Model\TransferSweepStatus|null $sweep_status sweep_status
     *
     * @return self
     */
    public function setSweepStatus($sweep_status)
    {
        $this->container['sweep_status'] = $sweep_status;

        return $this;
    }

    /**
     * Gets network
     *
     * @return \OpenAPI\Client\Model\TransferNetwork
     */
    public function getNetwork()
    {
        return $this->container['network'];
    }

    /**
     * Sets network
     *
     * @param \OpenAPI\Client\Model\TransferNetwork $network network
     *
     * @return self
     */
    public function setNetwork($network)
    {
        $this->container['network'] = $network;

        return $this;
    }

    /**
     * Gets cancellable
     *
     * @return bool
     */
    public function getCancellable()
    {
        return $this->container['cancellable'];
    }

    /**
     * Sets cancellable
     *
     * @param bool $cancellable When `true`, you can still cancel this transfer.
     *
     * @return self
     */
    public function setCancellable($cancellable)
    {
        $this->container['cancellable'] = $cancellable;

        return $this;
    }

    /**
     * Gets failure_reason
     *
     * @return \OpenAPI\Client\Model\TransferFailure
     */
    public function getFailureReason()
    {
        return $this->container['failure_reason'];
    }

    /**
     * Sets failure_reason
     *
     * @param \OpenAPI\Client\Model\TransferFailure $failure_reason failure_reason
     *
     * @return self
     */
    public function setFailureReason($failure_reason)
    {
        $this->container['failure_reason'] = $failure_reason;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return array<string,string>
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param array<string,string> $metadata The Metadata object is a mapping of client-provided string fields to any string value. The following limitations apply: - The JSON values must be Strings (no nested JSON objects allowed) - Only ASCII characters may be used - Maximum of 50 key/value pairs - Maximum key length of 40 characters - Maximum value length of 500 characters
     *
     * @return self
     */
    public function setMetadata($metadata)
    {

        if ((count($metadata) > 50)) {
            throw new \InvalidArgumentException('invalid value for $metadata when calling Transfer., number of items must be less than or equal to 50.');
        }
        $this->container['metadata'] = $metadata;

        return $this;
    }

    /**
     * Gets origination_account_id
     *
     * @return string
     */
    public function getOriginationAccountId()
    {
        return $this->container['origination_account_id'];
    }

    /**
     * Sets origination_account_id
     *
     * @param string $origination_account_id Plaid’s unique identifier for the origination account that was used for this transfer.
     *
     * @return self
     */
    public function setOriginationAccountId($origination_account_id)
    {
        $this->container['origination_account_id'] = $origination_account_id;

        return $this;
    }

    /**
     * Gets guarantee_decision
     *
     * @return \OpenAPI\Client\Model\TransferAuthorizationGuaranteeDecision
     */
    public function getGuaranteeDecision()
    {
        return $this->container['guarantee_decision'];
    }

    /**
     * Sets guarantee_decision
     *
     * @param \OpenAPI\Client\Model\TransferAuthorizationGuaranteeDecision $guarantee_decision guarantee_decision
     *
     * @return self
     */
    public function setGuaranteeDecision($guarantee_decision)
    {
        $this->container['guarantee_decision'] = $guarantee_decision;

        return $this;
    }

    /**
     * Gets guarantee_decision_rationale
     *
     * @return \OpenAPI\Client\Model\TransferAuthorizationGuaranteeDecisionRationale
     */
    public function getGuaranteeDecisionRationale()
    {
        return $this->container['guarantee_decision_rationale'];
    }

    /**
     * Sets guarantee_decision_rationale
     *
     * @param \OpenAPI\Client\Model\TransferAuthorizationGuaranteeDecisionRationale $guarantee_decision_rationale guarantee_decision_rationale
     *
     * @return self
     */
    public function setGuaranteeDecisionRationale($guarantee_decision_rationale)
    {
        $this->container['guarantee_decision_rationale'] = $guarantee_decision_rationale;

        return $this;
    }

    /**
     * Gets iso_currency_code
     *
     * @return string
     */
    public function getIsoCurrencyCode()
    {
        return $this->container['iso_currency_code'];
    }

    /**
     * Sets iso_currency_code
     *
     * @param string $iso_currency_code The currency of the transfer amount, e.g. \"USD\"
     *
     * @return self
     */
    public function setIsoCurrencyCode($iso_currency_code)
    {
        $this->container['iso_currency_code'] = $iso_currency_code;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


