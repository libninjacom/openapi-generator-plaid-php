<?php
/**
 * W2StateAndLocalWages
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.64.13
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * W2StateAndLocalWages Class Doc Comment
 *
 * @category Class
 * @description W2 state and local wages
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class W2StateAndLocalWages implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'W2StateAndLocalWages';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'state' => 'string',
        'employer_state_id_number' => 'string',
        'state_wages_tips' => 'string',
        'state_income_tax' => 'string',
        'local_wages_tips' => 'string',
        'local_income_tax' => 'string',
        'locality_name' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'state' => null,
        'employer_state_id_number' => null,
        'state_wages_tips' => null,
        'state_income_tax' => null,
        'local_wages_tips' => null,
        'local_income_tax' => null,
        'locality_name' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'state' => 'state',
        'employer_state_id_number' => 'employer_state_id_number',
        'state_wages_tips' => 'state_wages_tips',
        'state_income_tax' => 'state_income_tax',
        'local_wages_tips' => 'local_wages_tips',
        'local_income_tax' => 'local_income_tax',
        'locality_name' => 'locality_name'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'state' => 'setState',
        'employer_state_id_number' => 'setEmployerStateIdNumber',
        'state_wages_tips' => 'setStateWagesTips',
        'state_income_tax' => 'setStateIncomeTax',
        'local_wages_tips' => 'setLocalWagesTips',
        'local_income_tax' => 'setLocalIncomeTax',
        'locality_name' => 'setLocalityName'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'state' => 'getState',
        'employer_state_id_number' => 'getEmployerStateIdNumber',
        'state_wages_tips' => 'getStateWagesTips',
        'state_income_tax' => 'getStateIncomeTax',
        'local_wages_tips' => 'getLocalWagesTips',
        'local_income_tax' => 'getLocalIncomeTax',
        'locality_name' => 'getLocalityName'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['state'] = $data['state'] ?? null;
        $this->container['employer_state_id_number'] = $data['employer_state_id_number'] ?? null;
        $this->container['state_wages_tips'] = $data['state_wages_tips'] ?? null;
        $this->container['state_income_tax'] = $data['state_income_tax'] ?? null;
        $this->container['local_wages_tips'] = $data['local_wages_tips'] ?? null;
        $this->container['local_income_tax'] = $data['local_income_tax'] ?? null;
        $this->container['locality_name'] = $data['locality_name'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets state
     *
     * @return string|null
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string|null $state State associated with the wage.
     *
     * @return self
     */
    public function setState($state)
    {
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets employer_state_id_number
     *
     * @return string|null
     */
    public function getEmployerStateIdNumber()
    {
        return $this->container['employer_state_id_number'];
    }

    /**
     * Sets employer_state_id_number
     *
     * @param string|null $employer_state_id_number State identification number of the employer.
     *
     * @return self
     */
    public function setEmployerStateIdNumber($employer_state_id_number)
    {
        $this->container['employer_state_id_number'] = $employer_state_id_number;

        return $this;
    }

    /**
     * Gets state_wages_tips
     *
     * @return string|null
     */
    public function getStateWagesTips()
    {
        return $this->container['state_wages_tips'];
    }

    /**
     * Sets state_wages_tips
     *
     * @param string|null $state_wages_tips Wages and tips from the specified state.
     *
     * @return self
     */
    public function setStateWagesTips($state_wages_tips)
    {
        $this->container['state_wages_tips'] = $state_wages_tips;

        return $this;
    }

    /**
     * Gets state_income_tax
     *
     * @return string|null
     */
    public function getStateIncomeTax()
    {
        return $this->container['state_income_tax'];
    }

    /**
     * Sets state_income_tax
     *
     * @param string|null $state_income_tax Income tax from the specified state.
     *
     * @return self
     */
    public function setStateIncomeTax($state_income_tax)
    {
        $this->container['state_income_tax'] = $state_income_tax;

        return $this;
    }

    /**
     * Gets local_wages_tips
     *
     * @return string|null
     */
    public function getLocalWagesTips()
    {
        return $this->container['local_wages_tips'];
    }

    /**
     * Sets local_wages_tips
     *
     * @param string|null $local_wages_tips Wages and tips from the locality.
     *
     * @return self
     */
    public function setLocalWagesTips($local_wages_tips)
    {
        $this->container['local_wages_tips'] = $local_wages_tips;

        return $this;
    }

    /**
     * Gets local_income_tax
     *
     * @return string|null
     */
    public function getLocalIncomeTax()
    {
        return $this->container['local_income_tax'];
    }

    /**
     * Sets local_income_tax
     *
     * @param string|null $local_income_tax Income tax from the locality.
     *
     * @return self
     */
    public function setLocalIncomeTax($local_income_tax)
    {
        $this->container['local_income_tax'] = $local_income_tax;

        return $this;
    }

    /**
     * Gets locality_name
     *
     * @return string|null
     */
    public function getLocalityName()
    {
        return $this->container['locality_name'];
    }

    /**
     * Sets locality_name
     *
     * @param string|null $locality_name Name of the locality.
     *
     * @return self
     */
    public function setLocalityName($locality_name)
    {
        $this->container['locality_name'] = $locality_name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


