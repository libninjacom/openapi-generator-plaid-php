<?php
/**
 * TransactionBase
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.64.13
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * TransactionBase Class Doc Comment
 *
 * @category Class
 * @description A representation of a transaction
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class TransactionBase implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'TransactionBase';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'transaction_type' => 'string',
        'pending_transaction_id' => 'string',
        'category_id' => 'string',
        'category' => 'string[]',
        'location' => '\OpenAPI\Client\Model\Location',
        'payment_meta' => '\OpenAPI\Client\Model\PaymentMeta',
        'account_owner' => 'string',
        'name' => 'string',
        'original_description' => 'string',
        'account_id' => 'string',
        'amount' => 'float',
        'iso_currency_code' => 'string',
        'unofficial_currency_code' => 'string',
        'date' => '\DateTime',
        'pending' => 'bool',
        'transaction_id' => 'string',
        'merchant_name' => 'string',
        'check_number' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'transaction_type' => null,
        'pending_transaction_id' => null,
        'category_id' => null,
        'category' => null,
        'location' => null,
        'payment_meta' => null,
        'account_owner' => null,
        'name' => null,
        'original_description' => null,
        'account_id' => null,
        'amount' => null,
        'iso_currency_code' => null,
        'unofficial_currency_code' => null,
        'date' => 'date',
        'pending' => null,
        'transaction_id' => null,
        'merchant_name' => null,
        'check_number' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'transaction_type' => 'transaction_type',
        'pending_transaction_id' => 'pending_transaction_id',
        'category_id' => 'category_id',
        'category' => 'category',
        'location' => 'location',
        'payment_meta' => 'payment_meta',
        'account_owner' => 'account_owner',
        'name' => 'name',
        'original_description' => 'original_description',
        'account_id' => 'account_id',
        'amount' => 'amount',
        'iso_currency_code' => 'iso_currency_code',
        'unofficial_currency_code' => 'unofficial_currency_code',
        'date' => 'date',
        'pending' => 'pending',
        'transaction_id' => 'transaction_id',
        'merchant_name' => 'merchant_name',
        'check_number' => 'check_number'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'transaction_type' => 'setTransactionType',
        'pending_transaction_id' => 'setPendingTransactionId',
        'category_id' => 'setCategoryId',
        'category' => 'setCategory',
        'location' => 'setLocation',
        'payment_meta' => 'setPaymentMeta',
        'account_owner' => 'setAccountOwner',
        'name' => 'setName',
        'original_description' => 'setOriginalDescription',
        'account_id' => 'setAccountId',
        'amount' => 'setAmount',
        'iso_currency_code' => 'setIsoCurrencyCode',
        'unofficial_currency_code' => 'setUnofficialCurrencyCode',
        'date' => 'setDate',
        'pending' => 'setPending',
        'transaction_id' => 'setTransactionId',
        'merchant_name' => 'setMerchantName',
        'check_number' => 'setCheckNumber'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'transaction_type' => 'getTransactionType',
        'pending_transaction_id' => 'getPendingTransactionId',
        'category_id' => 'getCategoryId',
        'category' => 'getCategory',
        'location' => 'getLocation',
        'payment_meta' => 'getPaymentMeta',
        'account_owner' => 'getAccountOwner',
        'name' => 'getName',
        'original_description' => 'getOriginalDescription',
        'account_id' => 'getAccountId',
        'amount' => 'getAmount',
        'iso_currency_code' => 'getIsoCurrencyCode',
        'unofficial_currency_code' => 'getUnofficialCurrencyCode',
        'date' => 'getDate',
        'pending' => 'getPending',
        'transaction_id' => 'getTransactionId',
        'merchant_name' => 'getMerchantName',
        'check_number' => 'getCheckNumber'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const TRANSACTION_TYPE_DIGITAL = 'digital';
    public const TRANSACTION_TYPE_PLACE = 'place';
    public const TRANSACTION_TYPE_SPECIAL = 'special';
    public const TRANSACTION_TYPE_UNRESOLVED = 'unresolved';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTransactionTypeAllowableValues()
    {
        return [
            self::TRANSACTION_TYPE_DIGITAL,
            self::TRANSACTION_TYPE_PLACE,
            self::TRANSACTION_TYPE_SPECIAL,
            self::TRANSACTION_TYPE_UNRESOLVED,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['transaction_type'] = $data['transaction_type'] ?? null;
        $this->container['pending_transaction_id'] = $data['pending_transaction_id'] ?? null;
        $this->container['category_id'] = $data['category_id'] ?? null;
        $this->container['category'] = $data['category'] ?? null;
        $this->container['location'] = $data['location'] ?? null;
        $this->container['payment_meta'] = $data['payment_meta'] ?? null;
        $this->container['account_owner'] = $data['account_owner'] ?? null;
        $this->container['name'] = $data['name'] ?? null;
        $this->container['original_description'] = $data['original_description'] ?? null;
        $this->container['account_id'] = $data['account_id'] ?? null;
        $this->container['amount'] = $data['amount'] ?? null;
        $this->container['iso_currency_code'] = $data['iso_currency_code'] ?? null;
        $this->container['unofficial_currency_code'] = $data['unofficial_currency_code'] ?? null;
        $this->container['date'] = $data['date'] ?? null;
        $this->container['pending'] = $data['pending'] ?? null;
        $this->container['transaction_id'] = $data['transaction_id'] ?? null;
        $this->container['merchant_name'] = $data['merchant_name'] ?? null;
        $this->container['check_number'] = $data['check_number'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getTransactionTypeAllowableValues();
        if (!is_null($this->container['transaction_type']) && !in_array($this->container['transaction_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'transaction_type', must be one of '%s'",
                $this->container['transaction_type'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['account_id'] === null) {
            $invalidProperties[] = "'account_id' can't be null";
        }
        if ($this->container['amount'] === null) {
            $invalidProperties[] = "'amount' can't be null";
        }
        if ($this->container['iso_currency_code'] === null) {
            $invalidProperties[] = "'iso_currency_code' can't be null";
        }
        if ($this->container['unofficial_currency_code'] === null) {
            $invalidProperties[] = "'unofficial_currency_code' can't be null";
        }
        if ($this->container['date'] === null) {
            $invalidProperties[] = "'date' can't be null";
        }
        if ($this->container['pending'] === null) {
            $invalidProperties[] = "'pending' can't be null";
        }
        if ($this->container['transaction_id'] === null) {
            $invalidProperties[] = "'transaction_id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets transaction_type
     *
     * @return string|null
     * @deprecated
     */
    public function getTransactionType()
    {
        return $this->container['transaction_type'];
    }

    /**
     * Sets transaction_type
     *
     * @param string|null $transaction_type Please use the `payment_channel` field, `transaction_type` will be deprecated in the future.  `digital:` transactions that took place online.  `place:` transactions that were made at a physical location.  `special:` transactions that relate to banks, e.g. fees or deposits.  `unresolved:` transactions that do not fit into the other three types.
     *
     * @return self
     * @deprecated
     */
    public function setTransactionType($transaction_type)
    {
        $allowedValues = $this->getTransactionTypeAllowableValues();
        if (!is_null($transaction_type) && !in_array($transaction_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'transaction_type', must be one of '%s'",
                    $transaction_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['transaction_type'] = $transaction_type;

        return $this;
    }

    /**
     * Gets pending_transaction_id
     *
     * @return string|null
     */
    public function getPendingTransactionId()
    {
        return $this->container['pending_transaction_id'];
    }

    /**
     * Sets pending_transaction_id
     *
     * @param string|null $pending_transaction_id The ID of a posted transaction's associated pending transaction, where applicable.
     *
     * @return self
     */
    public function setPendingTransactionId($pending_transaction_id)
    {
        $this->container['pending_transaction_id'] = $pending_transaction_id;

        return $this;
    }

    /**
     * Gets category_id
     *
     * @return string|null
     */
    public function getCategoryId()
    {
        return $this->container['category_id'];
    }

    /**
     * Sets category_id
     *
     * @param string|null $category_id The ID of the category to which this transaction belongs. For a full list of categories, see [`/categories/get`](https://plaid.com/docs/api/products/#categoriesget).  If the `transactions` object was returned by an Assets endpoint such as `/asset_report/get/` or `/asset_report/pdf/get`, this field will only appear in an Asset Report with Insights.
     *
     * @return self
     */
    public function setCategoryId($category_id)
    {
        $this->container['category_id'] = $category_id;

        return $this;
    }

    /**
     * Gets category
     *
     * @return string[]|null
     */
    public function getCategory()
    {
        return $this->container['category'];
    }

    /**
     * Sets category
     *
     * @param string[]|null $category A hierarchical array of the categories to which this transaction belongs. For a full list of categories, see [`/categories/get`](https://plaid.com/docs/api/products/#categoriesget).  If the `transactions` object was returned by an Assets endpoint such as `/asset_report/get/` or `/asset_report/pdf/get`, this field will only appear in an Asset Report with Insights.
     *
     * @return self
     */
    public function setCategory($category)
    {
        $this->container['category'] = $category;

        return $this;
    }

    /**
     * Gets location
     *
     * @return \OpenAPI\Client\Model\Location|null
     */
    public function getLocation()
    {
        return $this->container['location'];
    }

    /**
     * Sets location
     *
     * @param \OpenAPI\Client\Model\Location|null $location location
     *
     * @return self
     */
    public function setLocation($location)
    {
        $this->container['location'] = $location;

        return $this;
    }

    /**
     * Gets payment_meta
     *
     * @return \OpenAPI\Client\Model\PaymentMeta|null
     */
    public function getPaymentMeta()
    {
        return $this->container['payment_meta'];
    }

    /**
     * Sets payment_meta
     *
     * @param \OpenAPI\Client\Model\PaymentMeta|null $payment_meta payment_meta
     *
     * @return self
     */
    public function setPaymentMeta($payment_meta)
    {
        $this->container['payment_meta'] = $payment_meta;

        return $this;
    }

    /**
     * Gets account_owner
     *
     * @return string|null
     */
    public function getAccountOwner()
    {
        return $this->container['account_owner'];
    }

    /**
     * Sets account_owner
     *
     * @param string|null $account_owner The name of the account owner. This field is not typically populated and only relevant when dealing with sub-accounts.
     *
     * @return self
     */
    public function setAccountOwner($account_owner)
    {
        $this->container['account_owner'] = $account_owner;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name The merchant name or transaction description.  If the `transactions` object was returned by a Transactions endpoint such as `/transactions/get`, this field will always appear. If the `transactions` object was returned by an Assets endpoint such as `/asset_report/get/` or `/asset_report/pdf/get`, this field will only appear in an Asset Report with Insights.
     *
     * @return self
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets original_description
     *
     * @return string|null
     */
    public function getOriginalDescription()
    {
        return $this->container['original_description'];
    }

    /**
     * Sets original_description
     *
     * @param string|null $original_description The string returned by the financial institution to describe the transaction. For transactions returned by `/transactions/get`, this field is in beta and will be omitted unless the client is both enrolled in the closed beta program and has set `options.include_original_description` to `true`.
     *
     * @return self
     */
    public function setOriginalDescription($original_description)
    {
        $this->container['original_description'] = $original_description;

        return $this;
    }

    /**
     * Gets account_id
     *
     * @return string
     */
    public function getAccountId()
    {
        return $this->container['account_id'];
    }

    /**
     * Sets account_id
     *
     * @param string $account_id The ID of the account in which this transaction occurred.
     *
     * @return self
     */
    public function setAccountId($account_id)
    {
        $this->container['account_id'] = $account_id;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return float
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param float $amount The settled value of the transaction, denominated in the account's currency, as stated in `iso_currency_code` or `unofficial_currency_code`. Positive values when money moves out of the account; negative values when money moves in. For example, debit card purchases are positive; credit card payments, direct deposits, and refunds are negative.
     *
     * @return self
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets iso_currency_code
     *
     * @return string
     */
    public function getIsoCurrencyCode()
    {
        return $this->container['iso_currency_code'];
    }

    /**
     * Sets iso_currency_code
     *
     * @param string $iso_currency_code The ISO-4217 currency code of the transaction. Always `null` if `unofficial_currency_code` is non-null.
     *
     * @return self
     */
    public function setIsoCurrencyCode($iso_currency_code)
    {
        $this->container['iso_currency_code'] = $iso_currency_code;

        return $this;
    }

    /**
     * Gets unofficial_currency_code
     *
     * @return string
     */
    public function getUnofficialCurrencyCode()
    {
        return $this->container['unofficial_currency_code'];
    }

    /**
     * Sets unofficial_currency_code
     *
     * @param string $unofficial_currency_code The unofficial currency code associated with the transaction. Always `null` if `iso_currency_code` is non-`null`. Unofficial currency codes are used for currencies that do not have official ISO currency codes, such as cryptocurrencies and the currencies of certain countries.  See the [currency code schema](https://plaid.com/docs/api/accounts#currency-code-schema) for a full listing of supported `iso_currency_code`s.
     *
     * @return self
     */
    public function setUnofficialCurrencyCode($unofficial_currency_code)
    {
        $this->container['unofficial_currency_code'] = $unofficial_currency_code;

        return $this;
    }

    /**
     * Gets date
     *
     * @return \DateTime
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param \DateTime $date For pending transactions, the date that the transaction occurred; for posted transactions, the date that the transaction posted. Both dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format ( `YYYY-MM-DD` ).
     *
     * @return self
     */
    public function setDate($date)
    {
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets pending
     *
     * @return bool
     */
    public function getPending()
    {
        return $this->container['pending'];
    }

    /**
     * Sets pending
     *
     * @param bool $pending When `true`, identifies the transaction as pending or unsettled. Pending transaction details (name, type, amount, category ID) may change before they are settled.
     *
     * @return self
     */
    public function setPending($pending)
    {
        $this->container['pending'] = $pending;

        return $this;
    }

    /**
     * Gets transaction_id
     *
     * @return string
     */
    public function getTransactionId()
    {
        return $this->container['transaction_id'];
    }

    /**
     * Sets transaction_id
     *
     * @param string $transaction_id The unique ID of the transaction. Like all Plaid identifiers, the `transaction_id` is case sensitive.
     *
     * @return self
     */
    public function setTransactionId($transaction_id)
    {
        $this->container['transaction_id'] = $transaction_id;

        return $this;
    }

    /**
     * Gets merchant_name
     *
     * @return string|null
     */
    public function getMerchantName()
    {
        return $this->container['merchant_name'];
    }

    /**
     * Sets merchant_name
     *
     * @param string|null $merchant_name The merchant name, as extracted by Plaid from the `name` field.
     *
     * @return self
     */
    public function setMerchantName($merchant_name)
    {
        $this->container['merchant_name'] = $merchant_name;

        return $this;
    }

    /**
     * Gets check_number
     *
     * @return string|null
     */
    public function getCheckNumber()
    {
        return $this->container['check_number'];
    }

    /**
     * Sets check_number
     *
     * @param string|null $check_number The check number of the transaction. This field is only populated for check transactions.
     *
     * @return self
     */
    public function setCheckNumber($check_number)
    {
        $this->container['check_number'] = $check_number;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


