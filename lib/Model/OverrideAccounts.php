<?php
/**
 * OverrideAccounts
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.64.13
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * OverrideAccounts Class Doc Comment
 *
 * @category Class
 * @description Data to use to set values of test accounts. Some values cannot be specified in the schema and will instead will be calculated from other test data in order to achieve more consistent, realistic test data.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class OverrideAccounts implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'OverrideAccounts';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'type' => '\OpenAPI\Client\Model\OverrideAccountType',
        'subtype' => '\OpenAPI\Client\Model\AccountSubtype',
        'starting_balance' => 'float',
        'force_available_balance' => 'float',
        'currency' => 'string',
        'meta' => '\OpenAPI\Client\Model\Meta',
        'numbers' => '\OpenAPI\Client\Model\Numbers',
        'transactions' => '\OpenAPI\Client\Model\TransactionOverride[]',
        'holdings' => '\OpenAPI\Client\Model\HoldingsOverride',
        'investment_transactions' => '\OpenAPI\Client\Model\InvestmentsTransactionsOverride',
        'identity' => '\OpenAPI\Client\Model\OwnerOverride',
        'liability' => '\OpenAPI\Client\Model\LiabilityOverride',
        'inflow_model' => '\OpenAPI\Client\Model\InflowModel',
        'income' => '\OpenAPI\Client\Model\IncomeOverride'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'type' => null,
        'subtype' => null,
        'starting_balance' => null,
        'force_available_balance' => null,
        'currency' => null,
        'meta' => null,
        'numbers' => null,
        'transactions' => null,
        'holdings' => null,
        'investment_transactions' => null,
        'identity' => null,
        'liability' => null,
        'inflow_model' => null,
        'income' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'type' => 'type',
        'subtype' => 'subtype',
        'starting_balance' => 'starting_balance',
        'force_available_balance' => 'force_available_balance',
        'currency' => 'currency',
        'meta' => 'meta',
        'numbers' => 'numbers',
        'transactions' => 'transactions',
        'holdings' => 'holdings',
        'investment_transactions' => 'investment_transactions',
        'identity' => 'identity',
        'liability' => 'liability',
        'inflow_model' => 'inflow_model',
        'income' => 'income'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'type' => 'setType',
        'subtype' => 'setSubtype',
        'starting_balance' => 'setStartingBalance',
        'force_available_balance' => 'setForceAvailableBalance',
        'currency' => 'setCurrency',
        'meta' => 'setMeta',
        'numbers' => 'setNumbers',
        'transactions' => 'setTransactions',
        'holdings' => 'setHoldings',
        'investment_transactions' => 'setInvestmentTransactions',
        'identity' => 'setIdentity',
        'liability' => 'setLiability',
        'inflow_model' => 'setInflowModel',
        'income' => 'setIncome'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'type' => 'getType',
        'subtype' => 'getSubtype',
        'starting_balance' => 'getStartingBalance',
        'force_available_balance' => 'getForceAvailableBalance',
        'currency' => 'getCurrency',
        'meta' => 'getMeta',
        'numbers' => 'getNumbers',
        'transactions' => 'getTransactions',
        'holdings' => 'getHoldings',
        'investment_transactions' => 'getInvestmentTransactions',
        'identity' => 'getIdentity',
        'liability' => 'getLiability',
        'inflow_model' => 'getInflowModel',
        'income' => 'getIncome'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['type'] = $data['type'] ?? null;
        $this->container['subtype'] = $data['subtype'] ?? null;
        $this->container['starting_balance'] = $data['starting_balance'] ?? null;
        $this->container['force_available_balance'] = $data['force_available_balance'] ?? null;
        $this->container['currency'] = $data['currency'] ?? null;
        $this->container['meta'] = $data['meta'] ?? null;
        $this->container['numbers'] = $data['numbers'] ?? null;
        $this->container['transactions'] = $data['transactions'] ?? null;
        $this->container['holdings'] = $data['holdings'] ?? null;
        $this->container['investment_transactions'] = $data['investment_transactions'] ?? null;
        $this->container['identity'] = $data['identity'] ?? null;
        $this->container['liability'] = $data['liability'] ?? null;
        $this->container['inflow_model'] = $data['inflow_model'] ?? null;
        $this->container['income'] = $data['income'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        if ($this->container['subtype'] === null) {
            $invalidProperties[] = "'subtype' can't be null";
        }
        if ($this->container['starting_balance'] === null) {
            $invalidProperties[] = "'starting_balance' can't be null";
        }
        if ($this->container['force_available_balance'] === null) {
            $invalidProperties[] = "'force_available_balance' can't be null";
        }
        if ($this->container['currency'] === null) {
            $invalidProperties[] = "'currency' can't be null";
        }
        if ($this->container['meta'] === null) {
            $invalidProperties[] = "'meta' can't be null";
        }
        if ($this->container['numbers'] === null) {
            $invalidProperties[] = "'numbers' can't be null";
        }
        if ($this->container['transactions'] === null) {
            $invalidProperties[] = "'transactions' can't be null";
        }
        if ($this->container['identity'] === null) {
            $invalidProperties[] = "'identity' can't be null";
        }
        if ($this->container['liability'] === null) {
            $invalidProperties[] = "'liability' can't be null";
        }
        if ($this->container['inflow_model'] === null) {
            $invalidProperties[] = "'inflow_model' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets type
     *
     * @return \OpenAPI\Client\Model\OverrideAccountType
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param \OpenAPI\Client\Model\OverrideAccountType $type type
     *
     * @return self
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets subtype
     *
     * @return \OpenAPI\Client\Model\AccountSubtype
     */
    public function getSubtype()
    {
        return $this->container['subtype'];
    }

    /**
     * Sets subtype
     *
     * @param \OpenAPI\Client\Model\AccountSubtype $subtype subtype
     *
     * @return self
     */
    public function setSubtype($subtype)
    {
        $this->container['subtype'] = $subtype;

        return $this;
    }

    /**
     * Gets starting_balance
     *
     * @return float
     */
    public function getStartingBalance()
    {
        return $this->container['starting_balance'];
    }

    /**
     * Sets starting_balance
     *
     * @param float $starting_balance If provided, the account will start with this amount as the current balance.
     *
     * @return self
     */
    public function setStartingBalance($starting_balance)
    {
        $this->container['starting_balance'] = $starting_balance;

        return $this;
    }

    /**
     * Gets force_available_balance
     *
     * @return float
     */
    public function getForceAvailableBalance()
    {
        return $this->container['force_available_balance'];
    }

    /**
     * Sets force_available_balance
     *
     * @param float $force_available_balance If provided, the account will always have this amount as its  available balance, regardless of current balance or changes in transactions over time.
     *
     * @return self
     */
    public function setForceAvailableBalance($force_available_balance)
    {
        $this->container['force_available_balance'] = $force_available_balance;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string $currency ISO-4217 currency code. If provided, the account will be denominated in the given currency. Transactions will also be in this currency by default.
     *
     * @return self
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets meta
     *
     * @return \OpenAPI\Client\Model\Meta
     */
    public function getMeta()
    {
        return $this->container['meta'];
    }

    /**
     * Sets meta
     *
     * @param \OpenAPI\Client\Model\Meta $meta meta
     *
     * @return self
     */
    public function setMeta($meta)
    {
        $this->container['meta'] = $meta;

        return $this;
    }

    /**
     * Gets numbers
     *
     * @return \OpenAPI\Client\Model\Numbers
     */
    public function getNumbers()
    {
        return $this->container['numbers'];
    }

    /**
     * Sets numbers
     *
     * @param \OpenAPI\Client\Model\Numbers $numbers numbers
     *
     * @return self
     */
    public function setNumbers($numbers)
    {
        $this->container['numbers'] = $numbers;

        return $this;
    }

    /**
     * Gets transactions
     *
     * @return \OpenAPI\Client\Model\TransactionOverride[]
     */
    public function getTransactions()
    {
        return $this->container['transactions'];
    }

    /**
     * Sets transactions
     *
     * @param \OpenAPI\Client\Model\TransactionOverride[] $transactions Specify the list of transactions on the account.
     *
     * @return self
     */
    public function setTransactions($transactions)
    {
        $this->container['transactions'] = $transactions;

        return $this;
    }

    /**
     * Gets holdings
     *
     * @return \OpenAPI\Client\Model\HoldingsOverride|null
     */
    public function getHoldings()
    {
        return $this->container['holdings'];
    }

    /**
     * Sets holdings
     *
     * @param \OpenAPI\Client\Model\HoldingsOverride|null $holdings holdings
     *
     * @return self
     */
    public function setHoldings($holdings)
    {
        $this->container['holdings'] = $holdings;

        return $this;
    }

    /**
     * Gets investment_transactions
     *
     * @return \OpenAPI\Client\Model\InvestmentsTransactionsOverride|null
     */
    public function getInvestmentTransactions()
    {
        return $this->container['investment_transactions'];
    }

    /**
     * Sets investment_transactions
     *
     * @param \OpenAPI\Client\Model\InvestmentsTransactionsOverride|null $investment_transactions investment_transactions
     *
     * @return self
     */
    public function setInvestmentTransactions($investment_transactions)
    {
        $this->container['investment_transactions'] = $investment_transactions;

        return $this;
    }

    /**
     * Gets identity
     *
     * @return \OpenAPI\Client\Model\OwnerOverride
     */
    public function getIdentity()
    {
        return $this->container['identity'];
    }

    /**
     * Sets identity
     *
     * @param \OpenAPI\Client\Model\OwnerOverride $identity identity
     *
     * @return self
     */
    public function setIdentity($identity)
    {
        $this->container['identity'] = $identity;

        return $this;
    }

    /**
     * Gets liability
     *
     * @return \OpenAPI\Client\Model\LiabilityOverride
     */
    public function getLiability()
    {
        return $this->container['liability'];
    }

    /**
     * Sets liability
     *
     * @param \OpenAPI\Client\Model\LiabilityOverride $liability liability
     *
     * @return self
     */
    public function setLiability($liability)
    {
        $this->container['liability'] = $liability;

        return $this;
    }

    /**
     * Gets inflow_model
     *
     * @return \OpenAPI\Client\Model\InflowModel
     */
    public function getInflowModel()
    {
        return $this->container['inflow_model'];
    }

    /**
     * Sets inflow_model
     *
     * @param \OpenAPI\Client\Model\InflowModel $inflow_model inflow_model
     *
     * @return self
     */
    public function setInflowModel($inflow_model)
    {
        $this->container['inflow_model'] = $inflow_model;

        return $this;
    }

    /**
     * Gets income
     *
     * @return \OpenAPI\Client\Model\IncomeOverride|null
     */
    public function getIncome()
    {
        return $this->container['income'];
    }

    /**
     * Sets income
     *
     * @param \OpenAPI\Client\Model\IncomeOverride|null $income income
     *
     * @return self
     */
    public function setIncome($income)
    {
        $this->container['income'] = $income;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


