<?php
/**
 * InstitutionStatus
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.64.13
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * InstitutionStatus Class Doc Comment
 *
 * @category Class
 * @description The status of an institution is determined by the health of its Item logins, Transactions updates, Investments updates, Liabilities updates, Auth requests, Balance requests, Identity requests, Investments requests, and Liabilities requests. A login attempt is conducted during the initial Item add in Link. If there is not enough traffic to accurately calculate an institution&#39;s status, Plaid will return null rather than potentially inaccurate data.  Institution status is accessible in the Dashboard and via the API using the &#x60;/institutions/get_by_id&#x60; endpoint with the &#x60;include_status&#x60; option set to true. Note that institution status is not available in the Sandbox environment.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class InstitutionStatus implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'InstitutionStatus';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'item_logins' => '\OpenAPI\Client\Model\ProductStatus',
        'transactions_updates' => '\OpenAPI\Client\Model\ProductStatus',
        'auth' => '\OpenAPI\Client\Model\ProductStatus',
        'identity' => '\OpenAPI\Client\Model\ProductStatus',
        'investments_updates' => '\OpenAPI\Client\Model\ProductStatus',
        'liabilities_updates' => '\OpenAPI\Client\Model\ProductStatus',
        'liabilities' => '\OpenAPI\Client\Model\ProductStatus',
        'investments' => '\OpenAPI\Client\Model\ProductStatus',
        'health_incidents' => '\OpenAPI\Client\Model\HealthIncident[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'item_logins' => null,
        'transactions_updates' => null,
        'auth' => null,
        'identity' => null,
        'investments_updates' => null,
        'liabilities_updates' => null,
        'liabilities' => null,
        'investments' => null,
        'health_incidents' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'item_logins' => 'item_logins',
        'transactions_updates' => 'transactions_updates',
        'auth' => 'auth',
        'identity' => 'identity',
        'investments_updates' => 'investments_updates',
        'liabilities_updates' => 'liabilities_updates',
        'liabilities' => 'liabilities',
        'investments' => 'investments',
        'health_incidents' => 'health_incidents'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'item_logins' => 'setItemLogins',
        'transactions_updates' => 'setTransactionsUpdates',
        'auth' => 'setAuth',
        'identity' => 'setIdentity',
        'investments_updates' => 'setInvestmentsUpdates',
        'liabilities_updates' => 'setLiabilitiesUpdates',
        'liabilities' => 'setLiabilities',
        'investments' => 'setInvestments',
        'health_incidents' => 'setHealthIncidents'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'item_logins' => 'getItemLogins',
        'transactions_updates' => 'getTransactionsUpdates',
        'auth' => 'getAuth',
        'identity' => 'getIdentity',
        'investments_updates' => 'getInvestmentsUpdates',
        'liabilities_updates' => 'getLiabilitiesUpdates',
        'liabilities' => 'getLiabilities',
        'investments' => 'getInvestments',
        'health_incidents' => 'getHealthIncidents'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['item_logins'] = $data['item_logins'] ?? null;
        $this->container['transactions_updates'] = $data['transactions_updates'] ?? null;
        $this->container['auth'] = $data['auth'] ?? null;
        $this->container['identity'] = $data['identity'] ?? null;
        $this->container['investments_updates'] = $data['investments_updates'] ?? null;
        $this->container['liabilities_updates'] = $data['liabilities_updates'] ?? null;
        $this->container['liabilities'] = $data['liabilities'] ?? null;
        $this->container['investments'] = $data['investments'] ?? null;
        $this->container['health_incidents'] = $data['health_incidents'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['item_logins'] === null) {
            $invalidProperties[] = "'item_logins' can't be null";
        }
        if ($this->container['transactions_updates'] === null) {
            $invalidProperties[] = "'transactions_updates' can't be null";
        }
        if ($this->container['auth'] === null) {
            $invalidProperties[] = "'auth' can't be null";
        }
        if ($this->container['identity'] === null) {
            $invalidProperties[] = "'identity' can't be null";
        }
        if ($this->container['investments_updates'] === null) {
            $invalidProperties[] = "'investments_updates' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets item_logins
     *
     * @return \OpenAPI\Client\Model\ProductStatus
     */
    public function getItemLogins()
    {
        return $this->container['item_logins'];
    }

    /**
     * Sets item_logins
     *
     * @param \OpenAPI\Client\Model\ProductStatus $item_logins item_logins
     *
     * @return self
     */
    public function setItemLogins($item_logins)
    {
        $this->container['item_logins'] = $item_logins;

        return $this;
    }

    /**
     * Gets transactions_updates
     *
     * @return \OpenAPI\Client\Model\ProductStatus
     */
    public function getTransactionsUpdates()
    {
        return $this->container['transactions_updates'];
    }

    /**
     * Sets transactions_updates
     *
     * @param \OpenAPI\Client\Model\ProductStatus $transactions_updates transactions_updates
     *
     * @return self
     */
    public function setTransactionsUpdates($transactions_updates)
    {
        $this->container['transactions_updates'] = $transactions_updates;

        return $this;
    }

    /**
     * Gets auth
     *
     * @return \OpenAPI\Client\Model\ProductStatus
     */
    public function getAuth()
    {
        return $this->container['auth'];
    }

    /**
     * Sets auth
     *
     * @param \OpenAPI\Client\Model\ProductStatus $auth auth
     *
     * @return self
     */
    public function setAuth($auth)
    {
        $this->container['auth'] = $auth;

        return $this;
    }

    /**
     * Gets identity
     *
     * @return \OpenAPI\Client\Model\ProductStatus
     */
    public function getIdentity()
    {
        return $this->container['identity'];
    }

    /**
     * Sets identity
     *
     * @param \OpenAPI\Client\Model\ProductStatus $identity identity
     *
     * @return self
     */
    public function setIdentity($identity)
    {
        $this->container['identity'] = $identity;

        return $this;
    }

    /**
     * Gets investments_updates
     *
     * @return \OpenAPI\Client\Model\ProductStatus
     */
    public function getInvestmentsUpdates()
    {
        return $this->container['investments_updates'];
    }

    /**
     * Sets investments_updates
     *
     * @param \OpenAPI\Client\Model\ProductStatus $investments_updates investments_updates
     *
     * @return self
     */
    public function setInvestmentsUpdates($investments_updates)
    {
        $this->container['investments_updates'] = $investments_updates;

        return $this;
    }

    /**
     * Gets liabilities_updates
     *
     * @return \OpenAPI\Client\Model\ProductStatus|null
     */
    public function getLiabilitiesUpdates()
    {
        return $this->container['liabilities_updates'];
    }

    /**
     * Sets liabilities_updates
     *
     * @param \OpenAPI\Client\Model\ProductStatus|null $liabilities_updates liabilities_updates
     *
     * @return self
     */
    public function setLiabilitiesUpdates($liabilities_updates)
    {
        $this->container['liabilities_updates'] = $liabilities_updates;

        return $this;
    }

    /**
     * Gets liabilities
     *
     * @return \OpenAPI\Client\Model\ProductStatus|null
     */
    public function getLiabilities()
    {
        return $this->container['liabilities'];
    }

    /**
     * Sets liabilities
     *
     * @param \OpenAPI\Client\Model\ProductStatus|null $liabilities liabilities
     *
     * @return self
     */
    public function setLiabilities($liabilities)
    {
        $this->container['liabilities'] = $liabilities;

        return $this;
    }

    /**
     * Gets investments
     *
     * @return \OpenAPI\Client\Model\ProductStatus|null
     */
    public function getInvestments()
    {
        return $this->container['investments'];
    }

    /**
     * Sets investments
     *
     * @param \OpenAPI\Client\Model\ProductStatus|null $investments investments
     *
     * @return self
     */
    public function setInvestments($investments)
    {
        $this->container['investments'] = $investments;

        return $this;
    }

    /**
     * Gets health_incidents
     *
     * @return \OpenAPI\Client\Model\HealthIncident[]|null
     */
    public function getHealthIncidents()
    {
        return $this->container['health_incidents'];
    }

    /**
     * Sets health_incidents
     *
     * @param \OpenAPI\Client\Model\HealthIncident[]|null $health_incidents Details of recent health incidents associated with the institution.
     *
     * @return self
     */
    public function setHealthIncidents($health_incidents)
    {
        $this->container['health_incidents'] = $health_incidents;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


