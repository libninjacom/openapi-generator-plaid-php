<?php
/**
 * PaymentInitiationMetadata
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.64.13
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * PaymentInitiationMetadata Class Doc Comment
 *
 * @category Class
 * @description Metadata that captures what specific payment configurations an institution supports when making Payment Initiation requests.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class PaymentInitiationMetadata implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PaymentInitiationMetadata';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'supports_international_payments' => 'bool',
        'maximum_payment_amount' => 'array<string,string>',
        'supports_refund_details' => 'bool',
        'standing_order_metadata' => '\OpenAPI\Client\Model\PaymentInitiationStandingOrderMetadata'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'supports_international_payments' => null,
        'maximum_payment_amount' => null,
        'supports_refund_details' => null,
        'standing_order_metadata' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'supports_international_payments' => 'supports_international_payments',
        'maximum_payment_amount' => 'maximum_payment_amount',
        'supports_refund_details' => 'supports_refund_details',
        'standing_order_metadata' => 'standing_order_metadata'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'supports_international_payments' => 'setSupportsInternationalPayments',
        'maximum_payment_amount' => 'setMaximumPaymentAmount',
        'supports_refund_details' => 'setSupportsRefundDetails',
        'standing_order_metadata' => 'setStandingOrderMetadata'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'supports_international_payments' => 'getSupportsInternationalPayments',
        'maximum_payment_amount' => 'getMaximumPaymentAmount',
        'supports_refund_details' => 'getSupportsRefundDetails',
        'standing_order_metadata' => 'getStandingOrderMetadata'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['supports_international_payments'] = $data['supports_international_payments'] ?? null;
        $this->container['maximum_payment_amount'] = $data['maximum_payment_amount'] ?? null;
        $this->container['supports_refund_details'] = $data['supports_refund_details'] ?? null;
        $this->container['standing_order_metadata'] = $data['standing_order_metadata'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['supports_international_payments'] === null) {
            $invalidProperties[] = "'supports_international_payments' can't be null";
        }
        if ($this->container['maximum_payment_amount'] === null) {
            $invalidProperties[] = "'maximum_payment_amount' can't be null";
        }
        if ($this->container['supports_refund_details'] === null) {
            $invalidProperties[] = "'supports_refund_details' can't be null";
        }
        if ($this->container['standing_order_metadata'] === null) {
            $invalidProperties[] = "'standing_order_metadata' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets supports_international_payments
     *
     * @return bool
     */
    public function getSupportsInternationalPayments()
    {
        return $this->container['supports_international_payments'];
    }

    /**
     * Sets supports_international_payments
     *
     * @param bool $supports_international_payments Indicates whether the institution supports payments from a different country.
     *
     * @return self
     */
    public function setSupportsInternationalPayments($supports_international_payments)
    {
        $this->container['supports_international_payments'] = $supports_international_payments;

        return $this;
    }

    /**
     * Gets maximum_payment_amount
     *
     * @return array<string,string>
     */
    public function getMaximumPaymentAmount()
    {
        return $this->container['maximum_payment_amount'];
    }

    /**
     * Sets maximum_payment_amount
     *
     * @param array<string,string> $maximum_payment_amount A mapping of currency to maximum payment amount (denominated in the smallest unit of currency) supported by the institution.  Example: `{\"GBP\": \"10000\"}`
     *
     * @return self
     */
    public function setMaximumPaymentAmount($maximum_payment_amount)
    {
        $this->container['maximum_payment_amount'] = $maximum_payment_amount;

        return $this;
    }

    /**
     * Gets supports_refund_details
     *
     * @return bool
     */
    public function getSupportsRefundDetails()
    {
        return $this->container['supports_refund_details'];
    }

    /**
     * Sets supports_refund_details
     *
     * @param bool $supports_refund_details Indicates whether the institution supports returning refund details when initiating a payment.
     *
     * @return self
     */
    public function setSupportsRefundDetails($supports_refund_details)
    {
        $this->container['supports_refund_details'] = $supports_refund_details;

        return $this;
    }

    /**
     * Gets standing_order_metadata
     *
     * @return \OpenAPI\Client\Model\PaymentInitiationStandingOrderMetadata
     */
    public function getStandingOrderMetadata()
    {
        return $this->container['standing_order_metadata'];
    }

    /**
     * Sets standing_order_metadata
     *
     * @param \OpenAPI\Client\Model\PaymentInitiationStandingOrderMetadata $standing_order_metadata standing_order_metadata
     *
     * @return self
     */
    public function setStandingOrderMetadata($standing_order_metadata)
    {
        $this->container['standing_order_metadata'] = $standing_order_metadata;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


