<?php
/**
 * LinkTokenCreateRequest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.64.13
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * LinkTokenCreateRequest Class Doc Comment
 *
 * @category Class
 * @description LinkTokenCreateRequest defines the request schema for &#x60;/link/token/create&#x60;
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class LinkTokenCreateRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'LinkTokenCreateRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'client_id' => 'string',
        'secret' => 'string',
        'client_name' => 'string',
        'language' => 'string',
        'country_codes' => '\OpenAPI\Client\Model\CountryCode[]',
        'user' => '\OpenAPI\Client\Model\LinkTokenCreateRequestUser',
        'products' => '\OpenAPI\Client\Model\Products[]',
        'webhook' => 'string',
        'access_token' => 'string',
        'link_customization_name' => 'string',
        'redirect_uri' => 'string',
        'android_package_name' => 'string',
        'account_filters' => '\OpenAPI\Client\Model\LinkTokenAccountFilters',
        'eu_config' => '\OpenAPI\Client\Model\LinkTokenEUConfig',
        'institution_id' => 'string',
        'payment_initiation' => '\OpenAPI\Client\Model\LinkTokenCreateRequestPaymentInitiation',
        'deposit_switch' => '\OpenAPI\Client\Model\LinkTokenCreateRequestDepositSwitch',
        'income_verification' => '\OpenAPI\Client\Model\LinkTokenCreateRequestIncomeVerification',
        'auth' => '\OpenAPI\Client\Model\LinkTokenCreateRequestAuth',
        'transfer' => '\OpenAPI\Client\Model\LinkTokenCreateRequestTransfer',
        'update' => '\OpenAPI\Client\Model\LinkTokenCreateRequestUpdate'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'client_id' => null,
        'secret' => null,
        'client_name' => null,
        'language' => null,
        'country_codes' => null,
        'user' => null,
        'products' => null,
        'webhook' => null,
        'access_token' => null,
        'link_customization_name' => null,
        'redirect_uri' => null,
        'android_package_name' => null,
        'account_filters' => null,
        'eu_config' => null,
        'institution_id' => null,
        'payment_initiation' => null,
        'deposit_switch' => null,
        'income_verification' => null,
        'auth' => null,
        'transfer' => null,
        'update' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'client_id' => 'client_id',
        'secret' => 'secret',
        'client_name' => 'client_name',
        'language' => 'language',
        'country_codes' => 'country_codes',
        'user' => 'user',
        'products' => 'products',
        'webhook' => 'webhook',
        'access_token' => 'access_token',
        'link_customization_name' => 'link_customization_name',
        'redirect_uri' => 'redirect_uri',
        'android_package_name' => 'android_package_name',
        'account_filters' => 'account_filters',
        'eu_config' => 'eu_config',
        'institution_id' => 'institution_id',
        'payment_initiation' => 'payment_initiation',
        'deposit_switch' => 'deposit_switch',
        'income_verification' => 'income_verification',
        'auth' => 'auth',
        'transfer' => 'transfer',
        'update' => 'update'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'client_id' => 'setClientId',
        'secret' => 'setSecret',
        'client_name' => 'setClientName',
        'language' => 'setLanguage',
        'country_codes' => 'setCountryCodes',
        'user' => 'setUser',
        'products' => 'setProducts',
        'webhook' => 'setWebhook',
        'access_token' => 'setAccessToken',
        'link_customization_name' => 'setLinkCustomizationName',
        'redirect_uri' => 'setRedirectUri',
        'android_package_name' => 'setAndroidPackageName',
        'account_filters' => 'setAccountFilters',
        'eu_config' => 'setEuConfig',
        'institution_id' => 'setInstitutionId',
        'payment_initiation' => 'setPaymentInitiation',
        'deposit_switch' => 'setDepositSwitch',
        'income_verification' => 'setIncomeVerification',
        'auth' => 'setAuth',
        'transfer' => 'setTransfer',
        'update' => 'setUpdate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'client_id' => 'getClientId',
        'secret' => 'getSecret',
        'client_name' => 'getClientName',
        'language' => 'getLanguage',
        'country_codes' => 'getCountryCodes',
        'user' => 'getUser',
        'products' => 'getProducts',
        'webhook' => 'getWebhook',
        'access_token' => 'getAccessToken',
        'link_customization_name' => 'getLinkCustomizationName',
        'redirect_uri' => 'getRedirectUri',
        'android_package_name' => 'getAndroidPackageName',
        'account_filters' => 'getAccountFilters',
        'eu_config' => 'getEuConfig',
        'institution_id' => 'getInstitutionId',
        'payment_initiation' => 'getPaymentInitiation',
        'deposit_switch' => 'getDepositSwitch',
        'income_verification' => 'getIncomeVerification',
        'auth' => 'getAuth',
        'transfer' => 'getTransfer',
        'update' => 'getUpdate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['client_id'] = $data['client_id'] ?? null;
        $this->container['secret'] = $data['secret'] ?? null;
        $this->container['client_name'] = $data['client_name'] ?? null;
        $this->container['language'] = $data['language'] ?? null;
        $this->container['country_codes'] = $data['country_codes'] ?? null;
        $this->container['user'] = $data['user'] ?? null;
        $this->container['products'] = $data['products'] ?? null;
        $this->container['webhook'] = $data['webhook'] ?? null;
        $this->container['access_token'] = $data['access_token'] ?? null;
        $this->container['link_customization_name'] = $data['link_customization_name'] ?? null;
        $this->container['redirect_uri'] = $data['redirect_uri'] ?? null;
        $this->container['android_package_name'] = $data['android_package_name'] ?? null;
        $this->container['account_filters'] = $data['account_filters'] ?? null;
        $this->container['eu_config'] = $data['eu_config'] ?? null;
        $this->container['institution_id'] = $data['institution_id'] ?? null;
        $this->container['payment_initiation'] = $data['payment_initiation'] ?? null;
        $this->container['deposit_switch'] = $data['deposit_switch'] ?? null;
        $this->container['income_verification'] = $data['income_verification'] ?? null;
        $this->container['auth'] = $data['auth'] ?? null;
        $this->container['transfer'] = $data['transfer'] ?? null;
        $this->container['update'] = $data['update'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['client_name'] === null) {
            $invalidProperties[] = "'client_name' can't be null";
        }
        if ($this->container['language'] === null) {
            $invalidProperties[] = "'language' can't be null";
        }
        if ($this->container['country_codes'] === null) {
            $invalidProperties[] = "'country_codes' can't be null";
        }
        if ((count($this->container['country_codes']) < 1)) {
            $invalidProperties[] = "invalid value for 'country_codes', number of items must be greater than or equal to 1.";
        }

        if ($this->container['user'] === null) {
            $invalidProperties[] = "'user' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets client_id
     *
     * @return string|null
     */
    public function getClientId()
    {
        return $this->container['client_id'];
    }

    /**
     * Sets client_id
     *
     * @param string|null $client_id Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     *
     * @return self
     */
    public function setClientId($client_id)
    {
        $this->container['client_id'] = $client_id;

        return $this;
    }

    /**
     * Gets secret
     *
     * @return string|null
     */
    public function getSecret()
    {
        return $this->container['secret'];
    }

    /**
     * Sets secret
     *
     * @param string|null $secret Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     *
     * @return self
     */
    public function setSecret($secret)
    {
        $this->container['secret'] = $secret;

        return $this;
    }

    /**
     * Gets client_name
     *
     * @return string
     */
    public function getClientName()
    {
        return $this->container['client_name'];
    }

    /**
     * Sets client_name
     *
     * @param string $client_name The name of your application, as it should be displayed in Link. Maximum length of 30 characters. If a value longer than 30 characters is provided, Link will display \"This Application\" instead.
     *
     * @return self
     */
    public function setClientName($client_name)
    {
        $this->container['client_name'] = $client_name;

        return $this;
    }

    /**
     * Gets language
     *
     * @return string
     */
    public function getLanguage()
    {
        return $this->container['language'];
    }

    /**
     * Sets language
     *
     * @param string $language The language that Link should be displayed in.  Supported languages are: - English (`'en'`) - French (`'fr'`) - Spanish (`'es'`) - Dutch (`'nl'`) - German(`'de'`)  When using a Link customization, the language configured here must match the setting in the customization, or the customization will not be applied.
     *
     * @return self
     */
    public function setLanguage($language)
    {
        $this->container['language'] = $language;

        return $this;
    }

    /**
     * Gets country_codes
     *
     * @return \OpenAPI\Client\Model\CountryCode[]
     */
    public function getCountryCodes()
    {
        return $this->container['country_codes'];
    }

    /**
     * Sets country_codes
     *
     * @param \OpenAPI\Client\Model\CountryCode[] $country_codes Specify an array of Plaid-supported country codes using the ISO-3166-1 alpha-2 country code standard. Institutions from all listed countries will be shown.  Supported country codes are: `US`, `CA`, `DE`, `ES`, `FR`, `GB`, `IE`, `NL`. For a complete mapping of supported products by country, see https://plaid.com/global/.  If Link is launched with multiple country codes, only products that you are enabled for in all countries will be used by Link. Note that while all countries are enabled by default in Sandbox and Development, in Production only US and Canada are enabled by default. To gain access to European institutions in the Production environment, [file a product access Support ticket](https://dashboard.plaid.com/support/new/product-and-development/product-troubleshooting/request-product-access) via the Plaid dashboard. If you initialize with a European country code, your users will see the European consent panel during the Link flow.  If using a Link customization, make sure the country codes in the customization match those specified in `country_codes`. If both `country_codes` and a Link customization are used, the value in `country_codes` may override the value in the customization.  If using the Auth features Instant Match, Same-day Micro-deposits, or Automated Micro-deposits, `country_codes` must be set to `['US']`.
     *
     * @return self
     */
    public function setCountryCodes($country_codes)
    {


        if ((count($country_codes) < 1)) {
            throw new \InvalidArgumentException('invalid length for $country_codes when calling LinkTokenCreateRequest., number of items must be greater than or equal to 1.');
        }
        $this->container['country_codes'] = $country_codes;

        return $this;
    }

    /**
     * Gets user
     *
     * @return \OpenAPI\Client\Model\LinkTokenCreateRequestUser
     */
    public function getUser()
    {
        return $this->container['user'];
    }

    /**
     * Sets user
     *
     * @param \OpenAPI\Client\Model\LinkTokenCreateRequestUser $user user
     *
     * @return self
     */
    public function setUser($user)
    {
        $this->container['user'] = $user;

        return $this;
    }

    /**
     * Gets products
     *
     * @return \OpenAPI\Client\Model\Products[]|null
     */
    public function getProducts()
    {
        return $this->container['products'];
    }

    /**
     * Sets products
     *
     * @param \OpenAPI\Client\Model\Products[]|null $products List of Plaid product(s) you wish to use. If launching Link in update mode, should be omitted; required otherwise.  `balance` is *not* a valid value, the Balance product does not require explicit initialization and will automatically be initialized when any other product is initialized.  Only institutions that support *all* requested products will be shown in Link; to maximize the number of institutions listed, it is recommended to initialize Link with the minimal product set required for your use case. Additional products can be added after Link initialization by calling the relevant endpoints. For details and exceptions, see [Choosing when to initialize products](https://plaid.com/docs/link/best-practices/#choosing-when-to-initialize-products).  Note that, unless you have opted to disable Instant Match support, institutions that support Instant Match will also be shown in Link if `auth` is specified as a product, even though these institutions do not contain `auth` in their product array.  In Production, you will be billed for each product that you specify when initializing Link. Note that a product cannot be removed from an Item once the Item has been initialized with that product. To stop billing on an Item for subscription-based products, such as Liabilities, Investments, and Transactions, remove the Item via `/item/remove`.
     *
     * @return self
     */
    public function setProducts($products)
    {
        $this->container['products'] = $products;

        return $this;
    }

    /**
     * Gets webhook
     *
     * @return string|null
     */
    public function getWebhook()
    {
        return $this->container['webhook'];
    }

    /**
     * Sets webhook
     *
     * @param string|null $webhook The destination URL to which any webhooks should be sent.
     *
     * @return self
     */
    public function setWebhook($webhook)
    {
        $this->container['webhook'] = $webhook;

        return $this;
    }

    /**
     * Gets access_token
     *
     * @return string|null
     */
    public function getAccessToken()
    {
        return $this->container['access_token'];
    }

    /**
     * Sets access_token
     *
     * @param string|null $access_token The `access_token` associated with the Item to update, used when updating or modifying an existing `access_token`. Used when launching Link in update mode, when completing the Same-day (manual) Micro-deposit flow, or (optionally) when initializing Link as part of the Payment Initiation (UK and Europe) flow.
     *
     * @return self
     */
    public function setAccessToken($access_token)
    {
        $this->container['access_token'] = $access_token;

        return $this;
    }

    /**
     * Gets link_customization_name
     *
     * @return string|null
     */
    public function getLinkCustomizationName()
    {
        return $this->container['link_customization_name'];
    }

    /**
     * Sets link_customization_name
     *
     * @param string|null $link_customization_name The name of the Link customization from the Plaid Dashboard to be applied to Link. If not specified, the `default` customization will be used. When using a Link customization, the language in the customization must match the language selected via the `language` parameter, and the countries in the customization should match the country codes selected via `country_codes`.
     *
     * @return self
     */
    public function setLinkCustomizationName($link_customization_name)
    {
        $this->container['link_customization_name'] = $link_customization_name;

        return $this;
    }

    /**
     * Gets redirect_uri
     *
     * @return string|null
     */
    public function getRedirectUri()
    {
        return $this->container['redirect_uri'];
    }

    /**
     * Sets redirect_uri
     *
     * @param string|null $redirect_uri A URI indicating the destination where a user should be forwarded after completing the Link flow; used to support OAuth authentication flows when launching Link in the browser or via a webview. The `redirect_uri` should not contain any query parameters. When used in Production or Development, must be an https URI. To specify any subdomain, use `*` as a wildcard character, e.g. `https://_*.example.com/oauth.html`. If `android_package_name` is specified, this field should be left blank.  Note that any redirect URI must also be added to the Allowed redirect URIs list in the [developer dashboard](https://dashboard.plaid.com/team/api).
     *
     * @return self
     */
    public function setRedirectUri($redirect_uri)
    {
        $this->container['redirect_uri'] = $redirect_uri;

        return $this;
    }

    /**
     * Gets android_package_name
     *
     * @return string|null
     */
    public function getAndroidPackageName()
    {
        return $this->container['android_package_name'];
    }

    /**
     * Sets android_package_name
     *
     * @param string|null $android_package_name The name of your app's Android package. Required if using the `link_token` to initialize Link on Android. When creating a `link_token` for initializing Link on other platforms, this field must be left blank. Any package name specified here must also be added to the Allowed Android package names setting on the [developer dashboard](https://dashboard.plaid.com/team/api).
     *
     * @return self
     */
    public function setAndroidPackageName($android_package_name)
    {
        $this->container['android_package_name'] = $android_package_name;

        return $this;
    }

    /**
     * Gets account_filters
     *
     * @return \OpenAPI\Client\Model\LinkTokenAccountFilters|null
     */
    public function getAccountFilters()
    {
        return $this->container['account_filters'];
    }

    /**
     * Sets account_filters
     *
     * @param \OpenAPI\Client\Model\LinkTokenAccountFilters|null $account_filters account_filters
     *
     * @return self
     */
    public function setAccountFilters($account_filters)
    {
        $this->container['account_filters'] = $account_filters;

        return $this;
    }

    /**
     * Gets eu_config
     *
     * @return \OpenAPI\Client\Model\LinkTokenEUConfig|null
     */
    public function getEuConfig()
    {
        return $this->container['eu_config'];
    }

    /**
     * Sets eu_config
     *
     * @param \OpenAPI\Client\Model\LinkTokenEUConfig|null $eu_config eu_config
     *
     * @return self
     */
    public function setEuConfig($eu_config)
    {
        $this->container['eu_config'] = $eu_config;

        return $this;
    }

    /**
     * Gets institution_id
     *
     * @return string|null
     */
    public function getInstitutionId()
    {
        return $this->container['institution_id'];
    }

    /**
     * Sets institution_id
     *
     * @param string|null $institution_id Used for certain Europe-only configurations, as well as certain legacy use cases in other regions.
     *
     * @return self
     */
    public function setInstitutionId($institution_id)
    {
        $this->container['institution_id'] = $institution_id;

        return $this;
    }

    /**
     * Gets payment_initiation
     *
     * @return \OpenAPI\Client\Model\LinkTokenCreateRequestPaymentInitiation|null
     */
    public function getPaymentInitiation()
    {
        return $this->container['payment_initiation'];
    }

    /**
     * Sets payment_initiation
     *
     * @param \OpenAPI\Client\Model\LinkTokenCreateRequestPaymentInitiation|null $payment_initiation payment_initiation
     *
     * @return self
     */
    public function setPaymentInitiation($payment_initiation)
    {
        $this->container['payment_initiation'] = $payment_initiation;

        return $this;
    }

    /**
     * Gets deposit_switch
     *
     * @return \OpenAPI\Client\Model\LinkTokenCreateRequestDepositSwitch|null
     */
    public function getDepositSwitch()
    {
        return $this->container['deposit_switch'];
    }

    /**
     * Sets deposit_switch
     *
     * @param \OpenAPI\Client\Model\LinkTokenCreateRequestDepositSwitch|null $deposit_switch deposit_switch
     *
     * @return self
     */
    public function setDepositSwitch($deposit_switch)
    {
        $this->container['deposit_switch'] = $deposit_switch;

        return $this;
    }

    /**
     * Gets income_verification
     *
     * @return \OpenAPI\Client\Model\LinkTokenCreateRequestIncomeVerification|null
     */
    public function getIncomeVerification()
    {
        return $this->container['income_verification'];
    }

    /**
     * Sets income_verification
     *
     * @param \OpenAPI\Client\Model\LinkTokenCreateRequestIncomeVerification|null $income_verification income_verification
     *
     * @return self
     */
    public function setIncomeVerification($income_verification)
    {
        $this->container['income_verification'] = $income_verification;

        return $this;
    }

    /**
     * Gets auth
     *
     * @return \OpenAPI\Client\Model\LinkTokenCreateRequestAuth|null
     */
    public function getAuth()
    {
        return $this->container['auth'];
    }

    /**
     * Sets auth
     *
     * @param \OpenAPI\Client\Model\LinkTokenCreateRequestAuth|null $auth auth
     *
     * @return self
     */
    public function setAuth($auth)
    {
        $this->container['auth'] = $auth;

        return $this;
    }

    /**
     * Gets transfer
     *
     * @return \OpenAPI\Client\Model\LinkTokenCreateRequestTransfer|null
     */
    public function getTransfer()
    {
        return $this->container['transfer'];
    }

    /**
     * Sets transfer
     *
     * @param \OpenAPI\Client\Model\LinkTokenCreateRequestTransfer|null $transfer transfer
     *
     * @return self
     */
    public function setTransfer($transfer)
    {
        $this->container['transfer'] = $transfer;

        return $this;
    }

    /**
     * Gets update
     *
     * @return \OpenAPI\Client\Model\LinkTokenCreateRequestUpdate|null
     */
    public function getUpdate()
    {
        return $this->container['update'];
    }

    /**
     * Sets update
     *
     * @param \OpenAPI\Client\Model\LinkTokenCreateRequestUpdate|null $update update
     *
     * @return self
     */
    public function setUpdate($update)
    {
        $this->container['update'] = $update;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


