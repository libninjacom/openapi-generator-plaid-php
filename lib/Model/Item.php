<?php
/**
 * Item
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.64.13
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * Item Class Doc Comment
 *
 * @category Class
 * @description Metadata about the Item.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class Item implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Item';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'item_id' => 'string',
        'institution_id' => 'string',
        'webhook' => 'string',
        'error' => '\OpenAPI\Client\Model\Error',
        'available_products' => '\OpenAPI\Client\Model\Products[]',
        'billed_products' => '\OpenAPI\Client\Model\Products[]',
        'products' => '\OpenAPI\Client\Model\Products[]',
        'consent_expiration_time' => '\DateTime',
        'update_type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'item_id' => null,
        'institution_id' => null,
        'webhook' => null,
        'error' => null,
        'available_products' => null,
        'billed_products' => null,
        'products' => null,
        'consent_expiration_time' => 'date-time',
        'update_type' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'item_id' => 'item_id',
        'institution_id' => 'institution_id',
        'webhook' => 'webhook',
        'error' => 'error',
        'available_products' => 'available_products',
        'billed_products' => 'billed_products',
        'products' => 'products',
        'consent_expiration_time' => 'consent_expiration_time',
        'update_type' => 'update_type'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'item_id' => 'setItemId',
        'institution_id' => 'setInstitutionId',
        'webhook' => 'setWebhook',
        'error' => 'setError',
        'available_products' => 'setAvailableProducts',
        'billed_products' => 'setBilledProducts',
        'products' => 'setProducts',
        'consent_expiration_time' => 'setConsentExpirationTime',
        'update_type' => 'setUpdateType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'item_id' => 'getItemId',
        'institution_id' => 'getInstitutionId',
        'webhook' => 'getWebhook',
        'error' => 'getError',
        'available_products' => 'getAvailableProducts',
        'billed_products' => 'getBilledProducts',
        'products' => 'getProducts',
        'consent_expiration_time' => 'getConsentExpirationTime',
        'update_type' => 'getUpdateType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const UPDATE_TYPE_BACKGROUND = 'background';
    public const UPDATE_TYPE_USER_PRESENT_REQUIRED = 'user_present_required';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getUpdateTypeAllowableValues()
    {
        return [
            self::UPDATE_TYPE_BACKGROUND,
            self::UPDATE_TYPE_USER_PRESENT_REQUIRED,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['item_id'] = $data['item_id'] ?? null;
        $this->container['institution_id'] = $data['institution_id'] ?? null;
        $this->container['webhook'] = $data['webhook'] ?? null;
        $this->container['error'] = $data['error'] ?? null;
        $this->container['available_products'] = $data['available_products'] ?? null;
        $this->container['billed_products'] = $data['billed_products'] ?? null;
        $this->container['products'] = $data['products'] ?? null;
        $this->container['consent_expiration_time'] = $data['consent_expiration_time'] ?? null;
        $this->container['update_type'] = $data['update_type'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['item_id'] === null) {
            $invalidProperties[] = "'item_id' can't be null";
        }
        if ($this->container['webhook'] === null) {
            $invalidProperties[] = "'webhook' can't be null";
        }
        if ($this->container['error'] === null) {
            $invalidProperties[] = "'error' can't be null";
        }
        if ($this->container['available_products'] === null) {
            $invalidProperties[] = "'available_products' can't be null";
        }
        if ($this->container['billed_products'] === null) {
            $invalidProperties[] = "'billed_products' can't be null";
        }
        if ($this->container['consent_expiration_time'] === null) {
            $invalidProperties[] = "'consent_expiration_time' can't be null";
        }
        if ($this->container['update_type'] === null) {
            $invalidProperties[] = "'update_type' can't be null";
        }
        $allowedValues = $this->getUpdateTypeAllowableValues();
        if (!is_null($this->container['update_type']) && !in_array($this->container['update_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'update_type', must be one of '%s'",
                $this->container['update_type'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets item_id
     *
     * @return string
     */
    public function getItemId()
    {
        return $this->container['item_id'];
    }

    /**
     * Sets item_id
     *
     * @param string $item_id The Plaid Item ID. The `item_id` is always unique; linking the same account at the same institution twice will result in two Items with different `item_id` values. Like all Plaid identifiers, the `item_id` is case-sensitive.
     *
     * @return self
     */
    public function setItemId($item_id)
    {
        $this->container['item_id'] = $item_id;

        return $this;
    }

    /**
     * Gets institution_id
     *
     * @return string|null
     */
    public function getInstitutionId()
    {
        return $this->container['institution_id'];
    }

    /**
     * Sets institution_id
     *
     * @param string|null $institution_id The Plaid Institution ID associated with the Item. Field is `null` for Items created via Same Day Micro-deposits.
     *
     * @return self
     */
    public function setInstitutionId($institution_id)
    {
        $this->container['institution_id'] = $institution_id;

        return $this;
    }

    /**
     * Gets webhook
     *
     * @return string
     */
    public function getWebhook()
    {
        return $this->container['webhook'];
    }

    /**
     * Sets webhook
     *
     * @param string $webhook The URL registered to receive webhooks for the Item.
     *
     * @return self
     */
    public function setWebhook($webhook)
    {
        $this->container['webhook'] = $webhook;

        return $this;
    }

    /**
     * Gets error
     *
     * @return \OpenAPI\Client\Model\Error
     */
    public function getError()
    {
        return $this->container['error'];
    }

    /**
     * Sets error
     *
     * @param \OpenAPI\Client\Model\Error $error error
     *
     * @return self
     */
    public function setError($error)
    {
        $this->container['error'] = $error;

        return $this;
    }

    /**
     * Gets available_products
     *
     * @return \OpenAPI\Client\Model\Products[]
     */
    public function getAvailableProducts()
    {
        return $this->container['available_products'];
    }

    /**
     * Sets available_products
     *
     * @param \OpenAPI\Client\Model\Products[] $available_products A list of products available for the Item that have not yet been accessed.
     *
     * @return self
     */
    public function setAvailableProducts($available_products)
    {
        $this->container['available_products'] = $available_products;

        return $this;
    }

    /**
     * Gets billed_products
     *
     * @return \OpenAPI\Client\Model\Products[]
     */
    public function getBilledProducts()
    {
        return $this->container['billed_products'];
    }

    /**
     * Sets billed_products
     *
     * @param \OpenAPI\Client\Model\Products[] $billed_products A list of products that have been billed for the Item. Note - `billed_products` is populated in all environments but only requests in Production are billed.
     *
     * @return self
     */
    public function setBilledProducts($billed_products)
    {
        $this->container['billed_products'] = $billed_products;

        return $this;
    }

    /**
     * Gets products
     *
     * @return \OpenAPI\Client\Model\Products[]|null
     */
    public function getProducts()
    {
        return $this->container['products'];
    }

    /**
     * Sets products
     *
     * @param \OpenAPI\Client\Model\Products[]|null $products A list of authorized products for the Item.
     *
     * @return self
     */
    public function setProducts($products)
    {
        $this->container['products'] = $products;

        return $this;
    }

    /**
     * Gets consent_expiration_time
     *
     * @return \DateTime
     */
    public function getConsentExpirationTime()
    {
        return $this->container['consent_expiration_time'];
    }

    /**
     * Sets consent_expiration_time
     *
     * @param \DateTime $consent_expiration_time The RFC 3339 timestamp after which the consent provided by the end user will expire. Upon consent expiration, the item will enter the `ITEM_LOGIN_REQUIRED` error state. To circumvent the `ITEM_LOGIN_REQUIRED` error and maintain continuous consent, the end user can reauthenticate via Link’s update mode in advance of the consent expiration time.  Note - This is only relevant for certain OAuth-based institutions. For all other institutions, this field will be null.
     *
     * @return self
     */
    public function setConsentExpirationTime($consent_expiration_time)
    {
        $this->container['consent_expiration_time'] = $consent_expiration_time;

        return $this;
    }

    /**
     * Gets update_type
     *
     * @return string
     */
    public function getUpdateType()
    {
        return $this->container['update_type'];
    }

    /**
     * Sets update_type
     *
     * @param string $update_type Indicates whether an Item requires user interaction to be updated, which can be the case for Items with some forms of two-factor authentication.  `background` - Item can be updated in the background  `user_present_required` - Item requires user interaction to be updated
     *
     * @return self
     */
    public function setUpdateType($update_type)
    {
        $allowedValues = $this->getUpdateTypeAllowableValues();
        if (!in_array($update_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'update_type', must be one of '%s'",
                    $update_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['update_type'] = $update_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


