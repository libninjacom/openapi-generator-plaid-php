<?php
/**
 * MortgageLiability
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.64.13
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * MortgageLiability Class Doc Comment
 *
 * @category Class
 * @description Contains details about a mortgage account.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class MortgageLiability implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'MortgageLiability';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'account_id' => 'string',
        'account_number' => 'string',
        'current_late_fee' => 'float',
        'escrow_balance' => 'float',
        'has_pmi' => 'bool',
        'has_prepayment_penalty' => 'bool',
        'interest_rate' => '\OpenAPI\Client\Model\MortgageInterestRate',
        'last_payment_amount' => 'float',
        'last_payment_date' => '\DateTime',
        'loan_type_description' => 'string',
        'loan_term' => 'string',
        'maturity_date' => '\DateTime',
        'next_monthly_payment' => 'float',
        'next_payment_due_date' => '\DateTime',
        'origination_date' => '\DateTime',
        'origination_principal_amount' => 'float',
        'past_due_amount' => 'float',
        'property_address' => '\OpenAPI\Client\Model\MortgagePropertyAddress',
        'ytd_interest_paid' => 'float',
        'ytd_principal_paid' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'account_id' => null,
        'account_number' => null,
        'current_late_fee' => null,
        'escrow_balance' => null,
        'has_pmi' => null,
        'has_prepayment_penalty' => null,
        'interest_rate' => null,
        'last_payment_amount' => null,
        'last_payment_date' => 'date',
        'loan_type_description' => null,
        'loan_term' => null,
        'maturity_date' => 'date',
        'next_monthly_payment' => null,
        'next_payment_due_date' => 'date',
        'origination_date' => 'date',
        'origination_principal_amount' => null,
        'past_due_amount' => null,
        'property_address' => null,
        'ytd_interest_paid' => null,
        'ytd_principal_paid' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'account_id' => 'account_id',
        'account_number' => 'account_number',
        'current_late_fee' => 'current_late_fee',
        'escrow_balance' => 'escrow_balance',
        'has_pmi' => 'has_pmi',
        'has_prepayment_penalty' => 'has_prepayment_penalty',
        'interest_rate' => 'interest_rate',
        'last_payment_amount' => 'last_payment_amount',
        'last_payment_date' => 'last_payment_date',
        'loan_type_description' => 'loan_type_description',
        'loan_term' => 'loan_term',
        'maturity_date' => 'maturity_date',
        'next_monthly_payment' => 'next_monthly_payment',
        'next_payment_due_date' => 'next_payment_due_date',
        'origination_date' => 'origination_date',
        'origination_principal_amount' => 'origination_principal_amount',
        'past_due_amount' => 'past_due_amount',
        'property_address' => 'property_address',
        'ytd_interest_paid' => 'ytd_interest_paid',
        'ytd_principal_paid' => 'ytd_principal_paid'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'account_id' => 'setAccountId',
        'account_number' => 'setAccountNumber',
        'current_late_fee' => 'setCurrentLateFee',
        'escrow_balance' => 'setEscrowBalance',
        'has_pmi' => 'setHasPmi',
        'has_prepayment_penalty' => 'setHasPrepaymentPenalty',
        'interest_rate' => 'setInterestRate',
        'last_payment_amount' => 'setLastPaymentAmount',
        'last_payment_date' => 'setLastPaymentDate',
        'loan_type_description' => 'setLoanTypeDescription',
        'loan_term' => 'setLoanTerm',
        'maturity_date' => 'setMaturityDate',
        'next_monthly_payment' => 'setNextMonthlyPayment',
        'next_payment_due_date' => 'setNextPaymentDueDate',
        'origination_date' => 'setOriginationDate',
        'origination_principal_amount' => 'setOriginationPrincipalAmount',
        'past_due_amount' => 'setPastDueAmount',
        'property_address' => 'setPropertyAddress',
        'ytd_interest_paid' => 'setYtdInterestPaid',
        'ytd_principal_paid' => 'setYtdPrincipalPaid'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'account_id' => 'getAccountId',
        'account_number' => 'getAccountNumber',
        'current_late_fee' => 'getCurrentLateFee',
        'escrow_balance' => 'getEscrowBalance',
        'has_pmi' => 'getHasPmi',
        'has_prepayment_penalty' => 'getHasPrepaymentPenalty',
        'interest_rate' => 'getInterestRate',
        'last_payment_amount' => 'getLastPaymentAmount',
        'last_payment_date' => 'getLastPaymentDate',
        'loan_type_description' => 'getLoanTypeDescription',
        'loan_term' => 'getLoanTerm',
        'maturity_date' => 'getMaturityDate',
        'next_monthly_payment' => 'getNextMonthlyPayment',
        'next_payment_due_date' => 'getNextPaymentDueDate',
        'origination_date' => 'getOriginationDate',
        'origination_principal_amount' => 'getOriginationPrincipalAmount',
        'past_due_amount' => 'getPastDueAmount',
        'property_address' => 'getPropertyAddress',
        'ytd_interest_paid' => 'getYtdInterestPaid',
        'ytd_principal_paid' => 'getYtdPrincipalPaid'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['account_id'] = $data['account_id'] ?? null;
        $this->container['account_number'] = $data['account_number'] ?? null;
        $this->container['current_late_fee'] = $data['current_late_fee'] ?? null;
        $this->container['escrow_balance'] = $data['escrow_balance'] ?? null;
        $this->container['has_pmi'] = $data['has_pmi'] ?? null;
        $this->container['has_prepayment_penalty'] = $data['has_prepayment_penalty'] ?? null;
        $this->container['interest_rate'] = $data['interest_rate'] ?? null;
        $this->container['last_payment_amount'] = $data['last_payment_amount'] ?? null;
        $this->container['last_payment_date'] = $data['last_payment_date'] ?? null;
        $this->container['loan_type_description'] = $data['loan_type_description'] ?? null;
        $this->container['loan_term'] = $data['loan_term'] ?? null;
        $this->container['maturity_date'] = $data['maturity_date'] ?? null;
        $this->container['next_monthly_payment'] = $data['next_monthly_payment'] ?? null;
        $this->container['next_payment_due_date'] = $data['next_payment_due_date'] ?? null;
        $this->container['origination_date'] = $data['origination_date'] ?? null;
        $this->container['origination_principal_amount'] = $data['origination_principal_amount'] ?? null;
        $this->container['past_due_amount'] = $data['past_due_amount'] ?? null;
        $this->container['property_address'] = $data['property_address'] ?? null;
        $this->container['ytd_interest_paid'] = $data['ytd_interest_paid'] ?? null;
        $this->container['ytd_principal_paid'] = $data['ytd_principal_paid'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['account_id'] === null) {
            $invalidProperties[] = "'account_id' can't be null";
        }
        if ($this->container['account_number'] === null) {
            $invalidProperties[] = "'account_number' can't be null";
        }
        if ($this->container['current_late_fee'] === null) {
            $invalidProperties[] = "'current_late_fee' can't be null";
        }
        if ($this->container['escrow_balance'] === null) {
            $invalidProperties[] = "'escrow_balance' can't be null";
        }
        if ($this->container['has_pmi'] === null) {
            $invalidProperties[] = "'has_pmi' can't be null";
        }
        if ($this->container['has_prepayment_penalty'] === null) {
            $invalidProperties[] = "'has_prepayment_penalty' can't be null";
        }
        if ($this->container['interest_rate'] === null) {
            $invalidProperties[] = "'interest_rate' can't be null";
        }
        if ($this->container['last_payment_amount'] === null) {
            $invalidProperties[] = "'last_payment_amount' can't be null";
        }
        if ($this->container['last_payment_date'] === null) {
            $invalidProperties[] = "'last_payment_date' can't be null";
        }
        if ($this->container['loan_type_description'] === null) {
            $invalidProperties[] = "'loan_type_description' can't be null";
        }
        if ($this->container['loan_term'] === null) {
            $invalidProperties[] = "'loan_term' can't be null";
        }
        if ($this->container['maturity_date'] === null) {
            $invalidProperties[] = "'maturity_date' can't be null";
        }
        if ($this->container['next_monthly_payment'] === null) {
            $invalidProperties[] = "'next_monthly_payment' can't be null";
        }
        if ($this->container['next_payment_due_date'] === null) {
            $invalidProperties[] = "'next_payment_due_date' can't be null";
        }
        if ($this->container['origination_date'] === null) {
            $invalidProperties[] = "'origination_date' can't be null";
        }
        if ($this->container['origination_principal_amount'] === null) {
            $invalidProperties[] = "'origination_principal_amount' can't be null";
        }
        if ($this->container['past_due_amount'] === null) {
            $invalidProperties[] = "'past_due_amount' can't be null";
        }
        if ($this->container['property_address'] === null) {
            $invalidProperties[] = "'property_address' can't be null";
        }
        if ($this->container['ytd_interest_paid'] === null) {
            $invalidProperties[] = "'ytd_interest_paid' can't be null";
        }
        if ($this->container['ytd_principal_paid'] === null) {
            $invalidProperties[] = "'ytd_principal_paid' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets account_id
     *
     * @return string
     */
    public function getAccountId()
    {
        return $this->container['account_id'];
    }

    /**
     * Sets account_id
     *
     * @param string $account_id The ID of the account that this liability belongs to.
     *
     * @return self
     */
    public function setAccountId($account_id)
    {
        $this->container['account_id'] = $account_id;

        return $this;
    }

    /**
     * Gets account_number
     *
     * @return string
     */
    public function getAccountNumber()
    {
        return $this->container['account_number'];
    }

    /**
     * Sets account_number
     *
     * @param string $account_number The account number of the loan.
     *
     * @return self
     */
    public function setAccountNumber($account_number)
    {
        $this->container['account_number'] = $account_number;

        return $this;
    }

    /**
     * Gets current_late_fee
     *
     * @return float
     */
    public function getCurrentLateFee()
    {
        return $this->container['current_late_fee'];
    }

    /**
     * Sets current_late_fee
     *
     * @param float $current_late_fee The current outstanding amount charged for late payment.
     *
     * @return self
     */
    public function setCurrentLateFee($current_late_fee)
    {
        $this->container['current_late_fee'] = $current_late_fee;

        return $this;
    }

    /**
     * Gets escrow_balance
     *
     * @return float
     */
    public function getEscrowBalance()
    {
        return $this->container['escrow_balance'];
    }

    /**
     * Sets escrow_balance
     *
     * @param float $escrow_balance Total amount held in escrow to pay taxes and insurance on behalf of the borrower.
     *
     * @return self
     */
    public function setEscrowBalance($escrow_balance)
    {
        $this->container['escrow_balance'] = $escrow_balance;

        return $this;
    }

    /**
     * Gets has_pmi
     *
     * @return bool
     */
    public function getHasPmi()
    {
        return $this->container['has_pmi'];
    }

    /**
     * Sets has_pmi
     *
     * @param bool $has_pmi Indicates whether the borrower has private mortgage insurance in effect.
     *
     * @return self
     */
    public function setHasPmi($has_pmi)
    {
        $this->container['has_pmi'] = $has_pmi;

        return $this;
    }

    /**
     * Gets has_prepayment_penalty
     *
     * @return bool
     */
    public function getHasPrepaymentPenalty()
    {
        return $this->container['has_prepayment_penalty'];
    }

    /**
     * Sets has_prepayment_penalty
     *
     * @param bool $has_prepayment_penalty Indicates whether the borrower will pay a penalty for early payoff of mortgage.
     *
     * @return self
     */
    public function setHasPrepaymentPenalty($has_prepayment_penalty)
    {
        $this->container['has_prepayment_penalty'] = $has_prepayment_penalty;

        return $this;
    }

    /**
     * Gets interest_rate
     *
     * @return \OpenAPI\Client\Model\MortgageInterestRate
     */
    public function getInterestRate()
    {
        return $this->container['interest_rate'];
    }

    /**
     * Sets interest_rate
     *
     * @param \OpenAPI\Client\Model\MortgageInterestRate $interest_rate interest_rate
     *
     * @return self
     */
    public function setInterestRate($interest_rate)
    {
        $this->container['interest_rate'] = $interest_rate;

        return $this;
    }

    /**
     * Gets last_payment_amount
     *
     * @return float
     */
    public function getLastPaymentAmount()
    {
        return $this->container['last_payment_amount'];
    }

    /**
     * Sets last_payment_amount
     *
     * @param float $last_payment_amount The amount of the last payment.
     *
     * @return self
     */
    public function setLastPaymentAmount($last_payment_amount)
    {
        $this->container['last_payment_amount'] = $last_payment_amount;

        return $this;
    }

    /**
     * Gets last_payment_date
     *
     * @return \DateTime
     */
    public function getLastPaymentDate()
    {
        return $this->container['last_payment_date'];
    }

    /**
     * Sets last_payment_date
     *
     * @param \DateTime $last_payment_date The date of the last payment. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD).
     *
     * @return self
     */
    public function setLastPaymentDate($last_payment_date)
    {
        $this->container['last_payment_date'] = $last_payment_date;

        return $this;
    }

    /**
     * Gets loan_type_description
     *
     * @return string
     */
    public function getLoanTypeDescription()
    {
        return $this->container['loan_type_description'];
    }

    /**
     * Sets loan_type_description
     *
     * @param string $loan_type_description Description of the type of loan, for example `conventional`, `fixed`, or `variable`. This field is provided directly from the loan servicer and does not have an enumerated set of possible values.
     *
     * @return self
     */
    public function setLoanTypeDescription($loan_type_description)
    {
        $this->container['loan_type_description'] = $loan_type_description;

        return $this;
    }

    /**
     * Gets loan_term
     *
     * @return string
     */
    public function getLoanTerm()
    {
        return $this->container['loan_term'];
    }

    /**
     * Sets loan_term
     *
     * @param string $loan_term Full duration of mortgage as at origination (e.g. `10 year`).
     *
     * @return self
     */
    public function setLoanTerm($loan_term)
    {
        $this->container['loan_term'] = $loan_term;

        return $this;
    }

    /**
     * Gets maturity_date
     *
     * @return \DateTime
     */
    public function getMaturityDate()
    {
        return $this->container['maturity_date'];
    }

    /**
     * Sets maturity_date
     *
     * @param \DateTime $maturity_date Original date on which mortgage is due in full. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD).
     *
     * @return self
     */
    public function setMaturityDate($maturity_date)
    {
        $this->container['maturity_date'] = $maturity_date;

        return $this;
    }

    /**
     * Gets next_monthly_payment
     *
     * @return float
     */
    public function getNextMonthlyPayment()
    {
        return $this->container['next_monthly_payment'];
    }

    /**
     * Sets next_monthly_payment
     *
     * @param float $next_monthly_payment The amount of the next payment.
     *
     * @return self
     */
    public function setNextMonthlyPayment($next_monthly_payment)
    {
        $this->container['next_monthly_payment'] = $next_monthly_payment;

        return $this;
    }

    /**
     * Gets next_payment_due_date
     *
     * @return \DateTime
     */
    public function getNextPaymentDueDate()
    {
        return $this->container['next_payment_due_date'];
    }

    /**
     * Sets next_payment_due_date
     *
     * @param \DateTime $next_payment_due_date The due date for the next payment. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD).
     *
     * @return self
     */
    public function setNextPaymentDueDate($next_payment_due_date)
    {
        $this->container['next_payment_due_date'] = $next_payment_due_date;

        return $this;
    }

    /**
     * Gets origination_date
     *
     * @return \DateTime
     */
    public function getOriginationDate()
    {
        return $this->container['origination_date'];
    }

    /**
     * Sets origination_date
     *
     * @param \DateTime $origination_date The date on which the loan was initially lent. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD).
     *
     * @return self
     */
    public function setOriginationDate($origination_date)
    {
        $this->container['origination_date'] = $origination_date;

        return $this;
    }

    /**
     * Gets origination_principal_amount
     *
     * @return float
     */
    public function getOriginationPrincipalAmount()
    {
        return $this->container['origination_principal_amount'];
    }

    /**
     * Sets origination_principal_amount
     *
     * @param float $origination_principal_amount The original principal balance of the mortgage.
     *
     * @return self
     */
    public function setOriginationPrincipalAmount($origination_principal_amount)
    {
        $this->container['origination_principal_amount'] = $origination_principal_amount;

        return $this;
    }

    /**
     * Gets past_due_amount
     *
     * @return float
     */
    public function getPastDueAmount()
    {
        return $this->container['past_due_amount'];
    }

    /**
     * Sets past_due_amount
     *
     * @param float $past_due_amount Amount of loan (principal + interest) past due for payment.
     *
     * @return self
     */
    public function setPastDueAmount($past_due_amount)
    {
        $this->container['past_due_amount'] = $past_due_amount;

        return $this;
    }

    /**
     * Gets property_address
     *
     * @return \OpenAPI\Client\Model\MortgagePropertyAddress
     */
    public function getPropertyAddress()
    {
        return $this->container['property_address'];
    }

    /**
     * Sets property_address
     *
     * @param \OpenAPI\Client\Model\MortgagePropertyAddress $property_address property_address
     *
     * @return self
     */
    public function setPropertyAddress($property_address)
    {
        $this->container['property_address'] = $property_address;

        return $this;
    }

    /**
     * Gets ytd_interest_paid
     *
     * @return float
     */
    public function getYtdInterestPaid()
    {
        return $this->container['ytd_interest_paid'];
    }

    /**
     * Sets ytd_interest_paid
     *
     * @param float $ytd_interest_paid The year to date (YTD) interest paid.
     *
     * @return self
     */
    public function setYtdInterestPaid($ytd_interest_paid)
    {
        $this->container['ytd_interest_paid'] = $ytd_interest_paid;

        return $this;
    }

    /**
     * Gets ytd_principal_paid
     *
     * @return float
     */
    public function getYtdPrincipalPaid()
    {
        return $this->container['ytd_principal_paid'];
    }

    /**
     * Sets ytd_principal_paid
     *
     * @param float $ytd_principal_paid The YTD principal paid.
     *
     * @return self
     */
    public function setYtdPrincipalPaid($ytd_principal_paid)
    {
        $this->container['ytd_principal_paid'] = $ytd_principal_paid;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


