<?php
/**
 * DistributionBreakdown
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.64.13
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * DistributionBreakdown Class Doc Comment
 *
 * @category Class
 * @description Information about the accounts that the payment was distributed to.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class DistributionBreakdown implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'DistributionBreakdown';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'account_name' => 'string',
        'bank_name' => 'string',
        'current_amount' => 'float',
        'iso_currency_code' => 'string',
        'mask' => 'string',
        'type' => 'string',
        'unofficial_currency_code' => 'string',
        'current_pay' => '\OpenAPI\Client\Model\Pay'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'account_name' => null,
        'bank_name' => null,
        'current_amount' => null,
        'iso_currency_code' => null,
        'mask' => null,
        'type' => null,
        'unofficial_currency_code' => null,
        'current_pay' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'account_name' => 'account_name',
        'bank_name' => 'bank_name',
        'current_amount' => 'current_amount',
        'iso_currency_code' => 'iso_currency_code',
        'mask' => 'mask',
        'type' => 'type',
        'unofficial_currency_code' => 'unofficial_currency_code',
        'current_pay' => 'current_pay'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'account_name' => 'setAccountName',
        'bank_name' => 'setBankName',
        'current_amount' => 'setCurrentAmount',
        'iso_currency_code' => 'setIsoCurrencyCode',
        'mask' => 'setMask',
        'type' => 'setType',
        'unofficial_currency_code' => 'setUnofficialCurrencyCode',
        'current_pay' => 'setCurrentPay'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'account_name' => 'getAccountName',
        'bank_name' => 'getBankName',
        'current_amount' => 'getCurrentAmount',
        'iso_currency_code' => 'getIsoCurrencyCode',
        'mask' => 'getMask',
        'type' => 'getType',
        'unofficial_currency_code' => 'getUnofficialCurrencyCode',
        'current_pay' => 'getCurrentPay'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['account_name'] = $data['account_name'] ?? null;
        $this->container['bank_name'] = $data['bank_name'] ?? null;
        $this->container['current_amount'] = $data['current_amount'] ?? null;
        $this->container['iso_currency_code'] = $data['iso_currency_code'] ?? null;
        $this->container['mask'] = $data['mask'] ?? null;
        $this->container['type'] = $data['type'] ?? null;
        $this->container['unofficial_currency_code'] = $data['unofficial_currency_code'] ?? null;
        $this->container['current_pay'] = $data['current_pay'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets account_name
     *
     * @return string|null
     */
    public function getAccountName()
    {
        return $this->container['account_name'];
    }

    /**
     * Sets account_name
     *
     * @param string|null $account_name Name of the account for the given distribution.
     *
     * @return self
     */
    public function setAccountName($account_name)
    {
        $this->container['account_name'] = $account_name;

        return $this;
    }

    /**
     * Gets bank_name
     *
     * @return string|null
     */
    public function getBankName()
    {
        return $this->container['bank_name'];
    }

    /**
     * Sets bank_name
     *
     * @param string|null $bank_name The name of the bank that the payment is being deposited to.
     *
     * @return self
     */
    public function setBankName($bank_name)
    {
        $this->container['bank_name'] = $bank_name;

        return $this;
    }

    /**
     * Gets current_amount
     *
     * @return float|null
     */
    public function getCurrentAmount()
    {
        return $this->container['current_amount'];
    }

    /**
     * Sets current_amount
     *
     * @param float|null $current_amount The amount distributed to this account.
     *
     * @return self
     */
    public function setCurrentAmount($current_amount)
    {
        $this->container['current_amount'] = $current_amount;

        return $this;
    }

    /**
     * Gets iso_currency_code
     *
     * @return string|null
     */
    public function getIsoCurrencyCode()
    {
        return $this->container['iso_currency_code'];
    }

    /**
     * Sets iso_currency_code
     *
     * @param string|null $iso_currency_code The ISO-4217 currency code of the net pay. Always `null` if `unofficial_currency_code` is non-null.
     *
     * @return self
     */
    public function setIsoCurrencyCode($iso_currency_code)
    {
        $this->container['iso_currency_code'] = $iso_currency_code;

        return $this;
    }

    /**
     * Gets mask
     *
     * @return string|null
     */
    public function getMask()
    {
        return $this->container['mask'];
    }

    /**
     * Sets mask
     *
     * @param string|null $mask The last 2-4 alphanumeric characters of an account's official account number.
     *
     * @return self
     */
    public function setMask($mask)
    {
        $this->container['mask'] = $mask;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type Type of the account that the paystub was sent to (e.g. 'checking').
     *
     * @return self
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets unofficial_currency_code
     *
     * @return string|null
     */
    public function getUnofficialCurrencyCode()
    {
        return $this->container['unofficial_currency_code'];
    }

    /**
     * Sets unofficial_currency_code
     *
     * @param string|null $unofficial_currency_code The unofficial currency code associated with the net pay. Always `null` if `iso_currency_code` is non-`null`. Unofficial currency codes are used for currencies that do not have official ISO currency codes, such as cryptocurrencies and the currencies of certain countries.  See the [currency code schema](https://plaid.com/docs/api/accounts#currency-code-schema) for a full listing of supported `iso_currency_code`s.
     *
     * @return self
     */
    public function setUnofficialCurrencyCode($unofficial_currency_code)
    {
        $this->container['unofficial_currency_code'] = $unofficial_currency_code;

        return $this;
    }

    /**
     * Gets current_pay
     *
     * @return \OpenAPI\Client\Model\Pay|null
     * @deprecated
     */
    public function getCurrentPay()
    {
        return $this->container['current_pay'];
    }

    /**
     * Sets current_pay
     *
     * @param \OpenAPI\Client\Model\Pay|null $current_pay current_pay
     *
     * @return self
     * @deprecated
     */
    public function setCurrentPay($current_pay)
    {
        $this->container['current_pay'] = $current_pay;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


