<?php
/**
 * W2
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.64.13
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * W2 Class Doc Comment
 *
 * @category Class
 * @description W2 is an object that represents income data taken from a W2 tax document.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class W2 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'W2';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'employer' => '\OpenAPI\Client\Model\PaystubEmployer',
        'employee' => '\OpenAPI\Client\Model\Employee',
        'tax_year' => 'string',
        'employer_id_number' => 'string',
        'wages_tips_other_comp' => 'string',
        'federal_income_tax_withheld' => 'string',
        'social_security_wages' => 'string',
        'social_security_tax_withheld' => 'string',
        'medicare_wages_and_tips' => 'string',
        'medicare_tax_withheld' => 'string',
        'social_security_tips' => 'string',
        'allocated_tips' => 'string',
        'box_9' => 'string',
        'dependent_care_benefits' => 'string',
        'nonqualified_plans' => 'string',
        'box_12' => '\OpenAPI\Client\Model\W2Box12[]',
        'statutory_employee' => 'string',
        'retirement_plan' => 'string',
        'third_party_sick_pay' => 'string',
        'other' => 'string',
        'state_and_local_wages' => '\OpenAPI\Client\Model\W2StateAndLocalWages[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'employer' => null,
        'employee' => null,
        'tax_year' => null,
        'employer_id_number' => null,
        'wages_tips_other_comp' => null,
        'federal_income_tax_withheld' => null,
        'social_security_wages' => null,
        'social_security_tax_withheld' => null,
        'medicare_wages_and_tips' => null,
        'medicare_tax_withheld' => null,
        'social_security_tips' => null,
        'allocated_tips' => null,
        'box_9' => null,
        'dependent_care_benefits' => null,
        'nonqualified_plans' => null,
        'box_12' => null,
        'statutory_employee' => null,
        'retirement_plan' => null,
        'third_party_sick_pay' => null,
        'other' => null,
        'state_and_local_wages' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'employer' => 'employer',
        'employee' => 'employee',
        'tax_year' => 'tax_year',
        'employer_id_number' => 'employer_id_number',
        'wages_tips_other_comp' => 'wages_tips_other_comp',
        'federal_income_tax_withheld' => 'federal_income_tax_withheld',
        'social_security_wages' => 'social_security_wages',
        'social_security_tax_withheld' => 'social_security_tax_withheld',
        'medicare_wages_and_tips' => 'medicare_wages_and_tips',
        'medicare_tax_withheld' => 'medicare_tax_withheld',
        'social_security_tips' => 'social_security_tips',
        'allocated_tips' => 'allocated_tips',
        'box_9' => 'box_9',
        'dependent_care_benefits' => 'dependent_care_benefits',
        'nonqualified_plans' => 'nonqualified_plans',
        'box_12' => 'box_12',
        'statutory_employee' => 'statutory_employee',
        'retirement_plan' => 'retirement_plan',
        'third_party_sick_pay' => 'third_party_sick_pay',
        'other' => 'other',
        'state_and_local_wages' => 'state_and_local_wages'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'employer' => 'setEmployer',
        'employee' => 'setEmployee',
        'tax_year' => 'setTaxYear',
        'employer_id_number' => 'setEmployerIdNumber',
        'wages_tips_other_comp' => 'setWagesTipsOtherComp',
        'federal_income_tax_withheld' => 'setFederalIncomeTaxWithheld',
        'social_security_wages' => 'setSocialSecurityWages',
        'social_security_tax_withheld' => 'setSocialSecurityTaxWithheld',
        'medicare_wages_and_tips' => 'setMedicareWagesAndTips',
        'medicare_tax_withheld' => 'setMedicareTaxWithheld',
        'social_security_tips' => 'setSocialSecurityTips',
        'allocated_tips' => 'setAllocatedTips',
        'box_9' => 'setBox9',
        'dependent_care_benefits' => 'setDependentCareBenefits',
        'nonqualified_plans' => 'setNonqualifiedPlans',
        'box_12' => 'setBox12',
        'statutory_employee' => 'setStatutoryEmployee',
        'retirement_plan' => 'setRetirementPlan',
        'third_party_sick_pay' => 'setThirdPartySickPay',
        'other' => 'setOther',
        'state_and_local_wages' => 'setStateAndLocalWages'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'employer' => 'getEmployer',
        'employee' => 'getEmployee',
        'tax_year' => 'getTaxYear',
        'employer_id_number' => 'getEmployerIdNumber',
        'wages_tips_other_comp' => 'getWagesTipsOtherComp',
        'federal_income_tax_withheld' => 'getFederalIncomeTaxWithheld',
        'social_security_wages' => 'getSocialSecurityWages',
        'social_security_tax_withheld' => 'getSocialSecurityTaxWithheld',
        'medicare_wages_and_tips' => 'getMedicareWagesAndTips',
        'medicare_tax_withheld' => 'getMedicareTaxWithheld',
        'social_security_tips' => 'getSocialSecurityTips',
        'allocated_tips' => 'getAllocatedTips',
        'box_9' => 'getBox9',
        'dependent_care_benefits' => 'getDependentCareBenefits',
        'nonqualified_plans' => 'getNonqualifiedPlans',
        'box_12' => 'getBox12',
        'statutory_employee' => 'getStatutoryEmployee',
        'retirement_plan' => 'getRetirementPlan',
        'third_party_sick_pay' => 'getThirdPartySickPay',
        'other' => 'getOther',
        'state_and_local_wages' => 'getStateAndLocalWages'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['employer'] = $data['employer'] ?? null;
        $this->container['employee'] = $data['employee'] ?? null;
        $this->container['tax_year'] = $data['tax_year'] ?? null;
        $this->container['employer_id_number'] = $data['employer_id_number'] ?? null;
        $this->container['wages_tips_other_comp'] = $data['wages_tips_other_comp'] ?? null;
        $this->container['federal_income_tax_withheld'] = $data['federal_income_tax_withheld'] ?? null;
        $this->container['social_security_wages'] = $data['social_security_wages'] ?? null;
        $this->container['social_security_tax_withheld'] = $data['social_security_tax_withheld'] ?? null;
        $this->container['medicare_wages_and_tips'] = $data['medicare_wages_and_tips'] ?? null;
        $this->container['medicare_tax_withheld'] = $data['medicare_tax_withheld'] ?? null;
        $this->container['social_security_tips'] = $data['social_security_tips'] ?? null;
        $this->container['allocated_tips'] = $data['allocated_tips'] ?? null;
        $this->container['box_9'] = $data['box_9'] ?? null;
        $this->container['dependent_care_benefits'] = $data['dependent_care_benefits'] ?? null;
        $this->container['nonqualified_plans'] = $data['nonqualified_plans'] ?? null;
        $this->container['box_12'] = $data['box_12'] ?? null;
        $this->container['statutory_employee'] = $data['statutory_employee'] ?? null;
        $this->container['retirement_plan'] = $data['retirement_plan'] ?? null;
        $this->container['third_party_sick_pay'] = $data['third_party_sick_pay'] ?? null;
        $this->container['other'] = $data['other'] ?? null;
        $this->container['state_and_local_wages'] = $data['state_and_local_wages'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets employer
     *
     * @return \OpenAPI\Client\Model\PaystubEmployer|null
     */
    public function getEmployer()
    {
        return $this->container['employer'];
    }

    /**
     * Sets employer
     *
     * @param \OpenAPI\Client\Model\PaystubEmployer|null $employer employer
     *
     * @return self
     */
    public function setEmployer($employer)
    {
        $this->container['employer'] = $employer;

        return $this;
    }

    /**
     * Gets employee
     *
     * @return \OpenAPI\Client\Model\Employee|null
     */
    public function getEmployee()
    {
        return $this->container['employee'];
    }

    /**
     * Sets employee
     *
     * @param \OpenAPI\Client\Model\Employee|null $employee employee
     *
     * @return self
     */
    public function setEmployee($employee)
    {
        $this->container['employee'] = $employee;

        return $this;
    }

    /**
     * Gets tax_year
     *
     * @return string|null
     */
    public function getTaxYear()
    {
        return $this->container['tax_year'];
    }

    /**
     * Sets tax_year
     *
     * @param string|null $tax_year The tax year of the W2 document.
     *
     * @return self
     */
    public function setTaxYear($tax_year)
    {
        $this->container['tax_year'] = $tax_year;

        return $this;
    }

    /**
     * Gets employer_id_number
     *
     * @return string|null
     */
    public function getEmployerIdNumber()
    {
        return $this->container['employer_id_number'];
    }

    /**
     * Sets employer_id_number
     *
     * @param string|null $employer_id_number An employee identification number or EIN.
     *
     * @return self
     */
    public function setEmployerIdNumber($employer_id_number)
    {
        $this->container['employer_id_number'] = $employer_id_number;

        return $this;
    }

    /**
     * Gets wages_tips_other_comp
     *
     * @return string|null
     */
    public function getWagesTipsOtherComp()
    {
        return $this->container['wages_tips_other_comp'];
    }

    /**
     * Sets wages_tips_other_comp
     *
     * @param string|null $wages_tips_other_comp Wages from tips and other compensation.
     *
     * @return self
     */
    public function setWagesTipsOtherComp($wages_tips_other_comp)
    {
        $this->container['wages_tips_other_comp'] = $wages_tips_other_comp;

        return $this;
    }

    /**
     * Gets federal_income_tax_withheld
     *
     * @return string|null
     */
    public function getFederalIncomeTaxWithheld()
    {
        return $this->container['federal_income_tax_withheld'];
    }

    /**
     * Sets federal_income_tax_withheld
     *
     * @param string|null $federal_income_tax_withheld Federal income tax withheld for the tax year.
     *
     * @return self
     */
    public function setFederalIncomeTaxWithheld($federal_income_tax_withheld)
    {
        $this->container['federal_income_tax_withheld'] = $federal_income_tax_withheld;

        return $this;
    }

    /**
     * Gets social_security_wages
     *
     * @return string|null
     */
    public function getSocialSecurityWages()
    {
        return $this->container['social_security_wages'];
    }

    /**
     * Sets social_security_wages
     *
     * @param string|null $social_security_wages Wages from social security.
     *
     * @return self
     */
    public function setSocialSecurityWages($social_security_wages)
    {
        $this->container['social_security_wages'] = $social_security_wages;

        return $this;
    }

    /**
     * Gets social_security_tax_withheld
     *
     * @return string|null
     */
    public function getSocialSecurityTaxWithheld()
    {
        return $this->container['social_security_tax_withheld'];
    }

    /**
     * Sets social_security_tax_withheld
     *
     * @param string|null $social_security_tax_withheld Social security tax withheld for the tax year.
     *
     * @return self
     */
    public function setSocialSecurityTaxWithheld($social_security_tax_withheld)
    {
        $this->container['social_security_tax_withheld'] = $social_security_tax_withheld;

        return $this;
    }

    /**
     * Gets medicare_wages_and_tips
     *
     * @return string|null
     */
    public function getMedicareWagesAndTips()
    {
        return $this->container['medicare_wages_and_tips'];
    }

    /**
     * Sets medicare_wages_and_tips
     *
     * @param string|null $medicare_wages_and_tips Wages and tips from medicare.
     *
     * @return self
     */
    public function setMedicareWagesAndTips($medicare_wages_and_tips)
    {
        $this->container['medicare_wages_and_tips'] = $medicare_wages_and_tips;

        return $this;
    }

    /**
     * Gets medicare_tax_withheld
     *
     * @return string|null
     */
    public function getMedicareTaxWithheld()
    {
        return $this->container['medicare_tax_withheld'];
    }

    /**
     * Sets medicare_tax_withheld
     *
     * @param string|null $medicare_tax_withheld Medicare tax withheld for the tax year.
     *
     * @return self
     */
    public function setMedicareTaxWithheld($medicare_tax_withheld)
    {
        $this->container['medicare_tax_withheld'] = $medicare_tax_withheld;

        return $this;
    }

    /**
     * Gets social_security_tips
     *
     * @return string|null
     */
    public function getSocialSecurityTips()
    {
        return $this->container['social_security_tips'];
    }

    /**
     * Sets social_security_tips
     *
     * @param string|null $social_security_tips Tips from social security.
     *
     * @return self
     */
    public function setSocialSecurityTips($social_security_tips)
    {
        $this->container['social_security_tips'] = $social_security_tips;

        return $this;
    }

    /**
     * Gets allocated_tips
     *
     * @return string|null
     */
    public function getAllocatedTips()
    {
        return $this->container['allocated_tips'];
    }

    /**
     * Sets allocated_tips
     *
     * @param string|null $allocated_tips Allocated tips.
     *
     * @return self
     */
    public function setAllocatedTips($allocated_tips)
    {
        $this->container['allocated_tips'] = $allocated_tips;

        return $this;
    }

    /**
     * Gets box_9
     *
     * @return string|null
     */
    public function getBox9()
    {
        return $this->container['box_9'];
    }

    /**
     * Sets box_9
     *
     * @param string|null $box_9 Contents from box 9 on the W2.
     *
     * @return self
     */
    public function setBox9($box_9)
    {
        $this->container['box_9'] = $box_9;

        return $this;
    }

    /**
     * Gets dependent_care_benefits
     *
     * @return string|null
     */
    public function getDependentCareBenefits()
    {
        return $this->container['dependent_care_benefits'];
    }

    /**
     * Sets dependent_care_benefits
     *
     * @param string|null $dependent_care_benefits Dependent care benefits.
     *
     * @return self
     */
    public function setDependentCareBenefits($dependent_care_benefits)
    {
        $this->container['dependent_care_benefits'] = $dependent_care_benefits;

        return $this;
    }

    /**
     * Gets nonqualified_plans
     *
     * @return string|null
     */
    public function getNonqualifiedPlans()
    {
        return $this->container['nonqualified_plans'];
    }

    /**
     * Sets nonqualified_plans
     *
     * @param string|null $nonqualified_plans Nonqualified plans.
     *
     * @return self
     */
    public function setNonqualifiedPlans($nonqualified_plans)
    {
        $this->container['nonqualified_plans'] = $nonqualified_plans;

        return $this;
    }

    /**
     * Gets box_12
     *
     * @return \OpenAPI\Client\Model\W2Box12[]|null
     */
    public function getBox12()
    {
        return $this->container['box_12'];
    }

    /**
     * Sets box_12
     *
     * @param \OpenAPI\Client\Model\W2Box12[]|null $box_12 box_12
     *
     * @return self
     */
    public function setBox12($box_12)
    {
        $this->container['box_12'] = $box_12;

        return $this;
    }

    /**
     * Gets statutory_employee
     *
     * @return string|null
     */
    public function getStatutoryEmployee()
    {
        return $this->container['statutory_employee'];
    }

    /**
     * Sets statutory_employee
     *
     * @param string|null $statutory_employee Statutory employee.
     *
     * @return self
     */
    public function setStatutoryEmployee($statutory_employee)
    {
        $this->container['statutory_employee'] = $statutory_employee;

        return $this;
    }

    /**
     * Gets retirement_plan
     *
     * @return string|null
     */
    public function getRetirementPlan()
    {
        return $this->container['retirement_plan'];
    }

    /**
     * Sets retirement_plan
     *
     * @param string|null $retirement_plan Retirement plan.
     *
     * @return self
     */
    public function setRetirementPlan($retirement_plan)
    {
        $this->container['retirement_plan'] = $retirement_plan;

        return $this;
    }

    /**
     * Gets third_party_sick_pay
     *
     * @return string|null
     */
    public function getThirdPartySickPay()
    {
        return $this->container['third_party_sick_pay'];
    }

    /**
     * Sets third_party_sick_pay
     *
     * @param string|null $third_party_sick_pay Third party sick pay.
     *
     * @return self
     */
    public function setThirdPartySickPay($third_party_sick_pay)
    {
        $this->container['third_party_sick_pay'] = $third_party_sick_pay;

        return $this;
    }

    /**
     * Gets other
     *
     * @return string|null
     */
    public function getOther()
    {
        return $this->container['other'];
    }

    /**
     * Sets other
     *
     * @param string|null $other Other.
     *
     * @return self
     */
    public function setOther($other)
    {
        $this->container['other'] = $other;

        return $this;
    }

    /**
     * Gets state_and_local_wages
     *
     * @return \OpenAPI\Client\Model\W2StateAndLocalWages[]|null
     */
    public function getStateAndLocalWages()
    {
        return $this->container['state_and_local_wages'];
    }

    /**
     * Sets state_and_local_wages
     *
     * @param \OpenAPI\Client\Model\W2StateAndLocalWages[]|null $state_and_local_wages state_and_local_wages
     *
     * @return self
     */
    public function setStateAndLocalWages($state_and_local_wages)
    {
        $this->container['state_and_local_wages'] = $state_and_local_wages;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


