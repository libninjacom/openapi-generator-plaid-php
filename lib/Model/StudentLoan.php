<?php
/**
 * StudentLoan
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.64.13
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * StudentLoan Class Doc Comment
 *
 * @category Class
 * @description Contains details about a student loan account
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class StudentLoan implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'StudentLoan';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'account_id' => 'string',
        'account_number' => 'string',
        'disbursement_dates' => '\DateTime[]',
        'expected_payoff_date' => '\DateTime',
        'guarantor' => 'string',
        'interest_rate_percentage' => 'float',
        'is_overdue' => 'bool',
        'last_payment_amount' => 'float',
        'last_payment_date' => '\DateTime',
        'last_statement_issue_date' => '\DateTime',
        'loan_name' => 'string',
        'loan_status' => '\OpenAPI\Client\Model\StudentLoanStatus',
        'minimum_payment_amount' => 'float',
        'next_payment_due_date' => '\DateTime',
        'origination_date' => '\DateTime',
        'origination_principal_amount' => 'float',
        'outstanding_interest_amount' => 'float',
        'payment_reference_number' => 'string',
        'pslf_status' => '\OpenAPI\Client\Model\PSLFStatus',
        'repayment_plan' => '\OpenAPI\Client\Model\StudentRepaymentPlan',
        'sequence_number' => 'string',
        'servicer_address' => '\OpenAPI\Client\Model\ServicerAddressData',
        'ytd_interest_paid' => 'float',
        'ytd_principal_paid' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'account_id' => null,
        'account_number' => null,
        'disbursement_dates' => 'date',
        'expected_payoff_date' => 'date',
        'guarantor' => null,
        'interest_rate_percentage' => null,
        'is_overdue' => null,
        'last_payment_amount' => null,
        'last_payment_date' => 'date',
        'last_statement_issue_date' => 'date',
        'loan_name' => null,
        'loan_status' => null,
        'minimum_payment_amount' => null,
        'next_payment_due_date' => 'date',
        'origination_date' => 'date',
        'origination_principal_amount' => null,
        'outstanding_interest_amount' => null,
        'payment_reference_number' => null,
        'pslf_status' => null,
        'repayment_plan' => null,
        'sequence_number' => null,
        'servicer_address' => null,
        'ytd_interest_paid' => null,
        'ytd_principal_paid' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'account_id' => 'account_id',
        'account_number' => 'account_number',
        'disbursement_dates' => 'disbursement_dates',
        'expected_payoff_date' => 'expected_payoff_date',
        'guarantor' => 'guarantor',
        'interest_rate_percentage' => 'interest_rate_percentage',
        'is_overdue' => 'is_overdue',
        'last_payment_amount' => 'last_payment_amount',
        'last_payment_date' => 'last_payment_date',
        'last_statement_issue_date' => 'last_statement_issue_date',
        'loan_name' => 'loan_name',
        'loan_status' => 'loan_status',
        'minimum_payment_amount' => 'minimum_payment_amount',
        'next_payment_due_date' => 'next_payment_due_date',
        'origination_date' => 'origination_date',
        'origination_principal_amount' => 'origination_principal_amount',
        'outstanding_interest_amount' => 'outstanding_interest_amount',
        'payment_reference_number' => 'payment_reference_number',
        'pslf_status' => 'pslf_status',
        'repayment_plan' => 'repayment_plan',
        'sequence_number' => 'sequence_number',
        'servicer_address' => 'servicer_address',
        'ytd_interest_paid' => 'ytd_interest_paid',
        'ytd_principal_paid' => 'ytd_principal_paid'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'account_id' => 'setAccountId',
        'account_number' => 'setAccountNumber',
        'disbursement_dates' => 'setDisbursementDates',
        'expected_payoff_date' => 'setExpectedPayoffDate',
        'guarantor' => 'setGuarantor',
        'interest_rate_percentage' => 'setInterestRatePercentage',
        'is_overdue' => 'setIsOverdue',
        'last_payment_amount' => 'setLastPaymentAmount',
        'last_payment_date' => 'setLastPaymentDate',
        'last_statement_issue_date' => 'setLastStatementIssueDate',
        'loan_name' => 'setLoanName',
        'loan_status' => 'setLoanStatus',
        'minimum_payment_amount' => 'setMinimumPaymentAmount',
        'next_payment_due_date' => 'setNextPaymentDueDate',
        'origination_date' => 'setOriginationDate',
        'origination_principal_amount' => 'setOriginationPrincipalAmount',
        'outstanding_interest_amount' => 'setOutstandingInterestAmount',
        'payment_reference_number' => 'setPaymentReferenceNumber',
        'pslf_status' => 'setPslfStatus',
        'repayment_plan' => 'setRepaymentPlan',
        'sequence_number' => 'setSequenceNumber',
        'servicer_address' => 'setServicerAddress',
        'ytd_interest_paid' => 'setYtdInterestPaid',
        'ytd_principal_paid' => 'setYtdPrincipalPaid'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'account_id' => 'getAccountId',
        'account_number' => 'getAccountNumber',
        'disbursement_dates' => 'getDisbursementDates',
        'expected_payoff_date' => 'getExpectedPayoffDate',
        'guarantor' => 'getGuarantor',
        'interest_rate_percentage' => 'getInterestRatePercentage',
        'is_overdue' => 'getIsOverdue',
        'last_payment_amount' => 'getLastPaymentAmount',
        'last_payment_date' => 'getLastPaymentDate',
        'last_statement_issue_date' => 'getLastStatementIssueDate',
        'loan_name' => 'getLoanName',
        'loan_status' => 'getLoanStatus',
        'minimum_payment_amount' => 'getMinimumPaymentAmount',
        'next_payment_due_date' => 'getNextPaymentDueDate',
        'origination_date' => 'getOriginationDate',
        'origination_principal_amount' => 'getOriginationPrincipalAmount',
        'outstanding_interest_amount' => 'getOutstandingInterestAmount',
        'payment_reference_number' => 'getPaymentReferenceNumber',
        'pslf_status' => 'getPslfStatus',
        'repayment_plan' => 'getRepaymentPlan',
        'sequence_number' => 'getSequenceNumber',
        'servicer_address' => 'getServicerAddress',
        'ytd_interest_paid' => 'getYtdInterestPaid',
        'ytd_principal_paid' => 'getYtdPrincipalPaid'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['account_id'] = $data['account_id'] ?? null;
        $this->container['account_number'] = $data['account_number'] ?? null;
        $this->container['disbursement_dates'] = $data['disbursement_dates'] ?? null;
        $this->container['expected_payoff_date'] = $data['expected_payoff_date'] ?? null;
        $this->container['guarantor'] = $data['guarantor'] ?? null;
        $this->container['interest_rate_percentage'] = $data['interest_rate_percentage'] ?? null;
        $this->container['is_overdue'] = $data['is_overdue'] ?? null;
        $this->container['last_payment_amount'] = $data['last_payment_amount'] ?? null;
        $this->container['last_payment_date'] = $data['last_payment_date'] ?? null;
        $this->container['last_statement_issue_date'] = $data['last_statement_issue_date'] ?? null;
        $this->container['loan_name'] = $data['loan_name'] ?? null;
        $this->container['loan_status'] = $data['loan_status'] ?? null;
        $this->container['minimum_payment_amount'] = $data['minimum_payment_amount'] ?? null;
        $this->container['next_payment_due_date'] = $data['next_payment_due_date'] ?? null;
        $this->container['origination_date'] = $data['origination_date'] ?? null;
        $this->container['origination_principal_amount'] = $data['origination_principal_amount'] ?? null;
        $this->container['outstanding_interest_amount'] = $data['outstanding_interest_amount'] ?? null;
        $this->container['payment_reference_number'] = $data['payment_reference_number'] ?? null;
        $this->container['pslf_status'] = $data['pslf_status'] ?? null;
        $this->container['repayment_plan'] = $data['repayment_plan'] ?? null;
        $this->container['sequence_number'] = $data['sequence_number'] ?? null;
        $this->container['servicer_address'] = $data['servicer_address'] ?? null;
        $this->container['ytd_interest_paid'] = $data['ytd_interest_paid'] ?? null;
        $this->container['ytd_principal_paid'] = $data['ytd_principal_paid'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['account_id'] === null) {
            $invalidProperties[] = "'account_id' can't be null";
        }
        if ($this->container['account_number'] === null) {
            $invalidProperties[] = "'account_number' can't be null";
        }
        if ($this->container['disbursement_dates'] === null) {
            $invalidProperties[] = "'disbursement_dates' can't be null";
        }
        if ($this->container['expected_payoff_date'] === null) {
            $invalidProperties[] = "'expected_payoff_date' can't be null";
        }
        if ($this->container['guarantor'] === null) {
            $invalidProperties[] = "'guarantor' can't be null";
        }
        if ($this->container['interest_rate_percentage'] === null) {
            $invalidProperties[] = "'interest_rate_percentage' can't be null";
        }
        if ($this->container['is_overdue'] === null) {
            $invalidProperties[] = "'is_overdue' can't be null";
        }
        if ($this->container['last_payment_amount'] === null) {
            $invalidProperties[] = "'last_payment_amount' can't be null";
        }
        if ($this->container['last_payment_date'] === null) {
            $invalidProperties[] = "'last_payment_date' can't be null";
        }
        if ($this->container['last_statement_issue_date'] === null) {
            $invalidProperties[] = "'last_statement_issue_date' can't be null";
        }
        if ($this->container['loan_name'] === null) {
            $invalidProperties[] = "'loan_name' can't be null";
        }
        if ($this->container['loan_status'] === null) {
            $invalidProperties[] = "'loan_status' can't be null";
        }
        if ($this->container['minimum_payment_amount'] === null) {
            $invalidProperties[] = "'minimum_payment_amount' can't be null";
        }
        if ($this->container['next_payment_due_date'] === null) {
            $invalidProperties[] = "'next_payment_due_date' can't be null";
        }
        if ($this->container['origination_date'] === null) {
            $invalidProperties[] = "'origination_date' can't be null";
        }
        if ($this->container['origination_principal_amount'] === null) {
            $invalidProperties[] = "'origination_principal_amount' can't be null";
        }
        if ($this->container['outstanding_interest_amount'] === null) {
            $invalidProperties[] = "'outstanding_interest_amount' can't be null";
        }
        if ($this->container['payment_reference_number'] === null) {
            $invalidProperties[] = "'payment_reference_number' can't be null";
        }
        if ($this->container['pslf_status'] === null) {
            $invalidProperties[] = "'pslf_status' can't be null";
        }
        if ($this->container['repayment_plan'] === null) {
            $invalidProperties[] = "'repayment_plan' can't be null";
        }
        if ($this->container['sequence_number'] === null) {
            $invalidProperties[] = "'sequence_number' can't be null";
        }
        if ($this->container['servicer_address'] === null) {
            $invalidProperties[] = "'servicer_address' can't be null";
        }
        if ($this->container['ytd_interest_paid'] === null) {
            $invalidProperties[] = "'ytd_interest_paid' can't be null";
        }
        if ($this->container['ytd_principal_paid'] === null) {
            $invalidProperties[] = "'ytd_principal_paid' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets account_id
     *
     * @return string
     */
    public function getAccountId()
    {
        return $this->container['account_id'];
    }

    /**
     * Sets account_id
     *
     * @param string $account_id The ID of the account that this liability belongs to.
     *
     * @return self
     */
    public function setAccountId($account_id)
    {
        $this->container['account_id'] = $account_id;

        return $this;
    }

    /**
     * Gets account_number
     *
     * @return string
     */
    public function getAccountNumber()
    {
        return $this->container['account_number'];
    }

    /**
     * Sets account_number
     *
     * @param string $account_number The account number of the loan. For some institutions, this may be a masked version of the number (e.g., the last 4 digits instead of the entire number).
     *
     * @return self
     */
    public function setAccountNumber($account_number)
    {
        $this->container['account_number'] = $account_number;

        return $this;
    }

    /**
     * Gets disbursement_dates
     *
     * @return \DateTime[]
     */
    public function getDisbursementDates()
    {
        return $this->container['disbursement_dates'];
    }

    /**
     * Sets disbursement_dates
     *
     * @param \DateTime[] $disbursement_dates The dates on which loaned funds were disbursed or will be disbursed. These are often in the past. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD).
     *
     * @return self
     */
    public function setDisbursementDates($disbursement_dates)
    {
        $this->container['disbursement_dates'] = $disbursement_dates;

        return $this;
    }

    /**
     * Gets expected_payoff_date
     *
     * @return \DateTime
     */
    public function getExpectedPayoffDate()
    {
        return $this->container['expected_payoff_date'];
    }

    /**
     * Sets expected_payoff_date
     *
     * @param \DateTime $expected_payoff_date The date when the student loan is expected to be paid off. Availability for this field is limited. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD).
     *
     * @return self
     */
    public function setExpectedPayoffDate($expected_payoff_date)
    {
        $this->container['expected_payoff_date'] = $expected_payoff_date;

        return $this;
    }

    /**
     * Gets guarantor
     *
     * @return string
     */
    public function getGuarantor()
    {
        return $this->container['guarantor'];
    }

    /**
     * Sets guarantor
     *
     * @param string $guarantor The guarantor of the student loan.
     *
     * @return self
     */
    public function setGuarantor($guarantor)
    {
        $this->container['guarantor'] = $guarantor;

        return $this;
    }

    /**
     * Gets interest_rate_percentage
     *
     * @return float
     */
    public function getInterestRatePercentage()
    {
        return $this->container['interest_rate_percentage'];
    }

    /**
     * Sets interest_rate_percentage
     *
     * @param float $interest_rate_percentage The interest rate on the loan as a percentage.
     *
     * @return self
     */
    public function setInterestRatePercentage($interest_rate_percentage)
    {
        $this->container['interest_rate_percentage'] = $interest_rate_percentage;

        return $this;
    }

    /**
     * Gets is_overdue
     *
     * @return bool
     */
    public function getIsOverdue()
    {
        return $this->container['is_overdue'];
    }

    /**
     * Sets is_overdue
     *
     * @param bool $is_overdue `true` if a payment is currently overdue. Availability for this field is limited.
     *
     * @return self
     */
    public function setIsOverdue($is_overdue)
    {
        $this->container['is_overdue'] = $is_overdue;

        return $this;
    }

    /**
     * Gets last_payment_amount
     *
     * @return float
     */
    public function getLastPaymentAmount()
    {
        return $this->container['last_payment_amount'];
    }

    /**
     * Sets last_payment_amount
     *
     * @param float $last_payment_amount The amount of the last payment.
     *
     * @return self
     */
    public function setLastPaymentAmount($last_payment_amount)
    {
        $this->container['last_payment_amount'] = $last_payment_amount;

        return $this;
    }

    /**
     * Gets last_payment_date
     *
     * @return \DateTime
     */
    public function getLastPaymentDate()
    {
        return $this->container['last_payment_date'];
    }

    /**
     * Sets last_payment_date
     *
     * @param \DateTime $last_payment_date The date of the last payment. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD).
     *
     * @return self
     */
    public function setLastPaymentDate($last_payment_date)
    {
        $this->container['last_payment_date'] = $last_payment_date;

        return $this;
    }

    /**
     * Gets last_statement_issue_date
     *
     * @return \DateTime
     */
    public function getLastStatementIssueDate()
    {
        return $this->container['last_statement_issue_date'];
    }

    /**
     * Sets last_statement_issue_date
     *
     * @param \DateTime $last_statement_issue_date The date of the last statement. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD).
     *
     * @return self
     */
    public function setLastStatementIssueDate($last_statement_issue_date)
    {
        $this->container['last_statement_issue_date'] = $last_statement_issue_date;

        return $this;
    }

    /**
     * Gets loan_name
     *
     * @return string
     */
    public function getLoanName()
    {
        return $this->container['loan_name'];
    }

    /**
     * Sets loan_name
     *
     * @param string $loan_name The type of loan, e.g., \"Consolidation Loans\".
     *
     * @return self
     */
    public function setLoanName($loan_name)
    {
        $this->container['loan_name'] = $loan_name;

        return $this;
    }

    /**
     * Gets loan_status
     *
     * @return \OpenAPI\Client\Model\StudentLoanStatus
     */
    public function getLoanStatus()
    {
        return $this->container['loan_status'];
    }

    /**
     * Sets loan_status
     *
     * @param \OpenAPI\Client\Model\StudentLoanStatus $loan_status loan_status
     *
     * @return self
     */
    public function setLoanStatus($loan_status)
    {
        $this->container['loan_status'] = $loan_status;

        return $this;
    }

    /**
     * Gets minimum_payment_amount
     *
     * @return float
     */
    public function getMinimumPaymentAmount()
    {
        return $this->container['minimum_payment_amount'];
    }

    /**
     * Sets minimum_payment_amount
     *
     * @param float $minimum_payment_amount The minimum payment due for the next billing cycle. There are some exceptions: Some institutions require a minimum payment across all loans associated with an account number. Our API presents that same minimum payment amount on each loan. The institutions that do this are: Great Lakes ( `ins_116861`), Firstmark (`ins_116295`), Commonbond Firstmark Services (`ins_116950`), Nelnet (`ins_116528`), EdFinancial Services (`ins_116304`), Granite State (`ins_116308`), and Oklahoma Student Loan Authority (`ins_116945`). Firstmark (`ins_116295` ) and Navient (`ins_116248`) will display as $0 if there is an autopay program in effect.
     *
     * @return self
     */
    public function setMinimumPaymentAmount($minimum_payment_amount)
    {
        $this->container['minimum_payment_amount'] = $minimum_payment_amount;

        return $this;
    }

    /**
     * Gets next_payment_due_date
     *
     * @return \DateTime
     */
    public function getNextPaymentDueDate()
    {
        return $this->container['next_payment_due_date'];
    }

    /**
     * Sets next_payment_due_date
     *
     * @param \DateTime $next_payment_due_date The due date for the next payment. The due date is `null` if a payment is not expected. A payment is not expected if `loan_status.type` is `deferment`, `in_school`, `consolidated`, `paid in full`, or `transferred`. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD).
     *
     * @return self
     */
    public function setNextPaymentDueDate($next_payment_due_date)
    {
        $this->container['next_payment_due_date'] = $next_payment_due_date;

        return $this;
    }

    /**
     * Gets origination_date
     *
     * @return \DateTime
     */
    public function getOriginationDate()
    {
        return $this->container['origination_date'];
    }

    /**
     * Sets origination_date
     *
     * @param \DateTime $origination_date The date on which the loan was initially lent. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD).
     *
     * @return self
     */
    public function setOriginationDate($origination_date)
    {
        $this->container['origination_date'] = $origination_date;

        return $this;
    }

    /**
     * Gets origination_principal_amount
     *
     * @return float
     */
    public function getOriginationPrincipalAmount()
    {
        return $this->container['origination_principal_amount'];
    }

    /**
     * Sets origination_principal_amount
     *
     * @param float $origination_principal_amount The original principal balance of the loan.
     *
     * @return self
     */
    public function setOriginationPrincipalAmount($origination_principal_amount)
    {
        $this->container['origination_principal_amount'] = $origination_principal_amount;

        return $this;
    }

    /**
     * Gets outstanding_interest_amount
     *
     * @return float
     */
    public function getOutstandingInterestAmount()
    {
        return $this->container['outstanding_interest_amount'];
    }

    /**
     * Sets outstanding_interest_amount
     *
     * @param float $outstanding_interest_amount The total dollar amount of the accrued interest balance. For Sallie Mae ( `ins_116944`), this amount is included in the current balance of the loan, so this field will return as `null`.
     *
     * @return self
     */
    public function setOutstandingInterestAmount($outstanding_interest_amount)
    {
        $this->container['outstanding_interest_amount'] = $outstanding_interest_amount;

        return $this;
    }

    /**
     * Gets payment_reference_number
     *
     * @return string
     */
    public function getPaymentReferenceNumber()
    {
        return $this->container['payment_reference_number'];
    }

    /**
     * Sets payment_reference_number
     *
     * @param string $payment_reference_number The relevant account number that should be used to reference this loan for payments. In the majority of cases, `payment_reference_number` will match a`ccount_number,` but in some institutions, such as Great Lakes (`ins_116861`), it will be different.
     *
     * @return self
     */
    public function setPaymentReferenceNumber($payment_reference_number)
    {
        $this->container['payment_reference_number'] = $payment_reference_number;

        return $this;
    }

    /**
     * Gets pslf_status
     *
     * @return \OpenAPI\Client\Model\PSLFStatus
     */
    public function getPslfStatus()
    {
        return $this->container['pslf_status'];
    }

    /**
     * Sets pslf_status
     *
     * @param \OpenAPI\Client\Model\PSLFStatus $pslf_status pslf_status
     *
     * @return self
     */
    public function setPslfStatus($pslf_status)
    {
        $this->container['pslf_status'] = $pslf_status;

        return $this;
    }

    /**
     * Gets repayment_plan
     *
     * @return \OpenAPI\Client\Model\StudentRepaymentPlan
     */
    public function getRepaymentPlan()
    {
        return $this->container['repayment_plan'];
    }

    /**
     * Sets repayment_plan
     *
     * @param \OpenAPI\Client\Model\StudentRepaymentPlan $repayment_plan repayment_plan
     *
     * @return self
     */
    public function setRepaymentPlan($repayment_plan)
    {
        $this->container['repayment_plan'] = $repayment_plan;

        return $this;
    }

    /**
     * Gets sequence_number
     *
     * @return string
     */
    public function getSequenceNumber()
    {
        return $this->container['sequence_number'];
    }

    /**
     * Sets sequence_number
     *
     * @param string $sequence_number The sequence number of the student loan. Heartland ECSI (`ins_116948`) does not make this field available.
     *
     * @return self
     */
    public function setSequenceNumber($sequence_number)
    {
        $this->container['sequence_number'] = $sequence_number;

        return $this;
    }

    /**
     * Gets servicer_address
     *
     * @return \OpenAPI\Client\Model\ServicerAddressData
     */
    public function getServicerAddress()
    {
        return $this->container['servicer_address'];
    }

    /**
     * Sets servicer_address
     *
     * @param \OpenAPI\Client\Model\ServicerAddressData $servicer_address servicer_address
     *
     * @return self
     */
    public function setServicerAddress($servicer_address)
    {
        $this->container['servicer_address'] = $servicer_address;

        return $this;
    }

    /**
     * Gets ytd_interest_paid
     *
     * @return float
     */
    public function getYtdInterestPaid()
    {
        return $this->container['ytd_interest_paid'];
    }

    /**
     * Sets ytd_interest_paid
     *
     * @param float $ytd_interest_paid The year to date (YTD) interest paid. Availability for this field is limited.
     *
     * @return self
     */
    public function setYtdInterestPaid($ytd_interest_paid)
    {
        $this->container['ytd_interest_paid'] = $ytd_interest_paid;

        return $this;
    }

    /**
     * Gets ytd_principal_paid
     *
     * @return float
     */
    public function getYtdPrincipalPaid()
    {
        return $this->container['ytd_principal_paid'];
    }

    /**
     * Sets ytd_principal_paid
     *
     * @param float $ytd_principal_paid The year to date (YTD) principal paid. Availability for this field is limited.
     *
     * @return self
     */
    public function setYtdPrincipalPaid($ytd_principal_paid)
    {
        $this->container['ytd_principal_paid'] = $ytd_principal_paid;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


