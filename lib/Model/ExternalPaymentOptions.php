<?php
/**
 * ExternalPaymentOptions
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.64.13
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ExternalPaymentOptions Class Doc Comment
 *
 * @category Class
 * @description Additional payment options
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class ExternalPaymentOptions implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ExternalPaymentOptions';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'request_refund_details' => 'bool',
        'iban' => 'string',
        'bacs' => '\OpenAPI\Client\Model\PaymentInitiationOptionalRestrictionBacs',
        'wallet_id' => 'string',
        'scheme' => '\OpenAPI\Client\Model\PaymentScheme'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'request_refund_details' => null,
        'iban' => null,
        'bacs' => null,
        'wallet_id' => null,
        'scheme' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'request_refund_details' => 'request_refund_details',
        'iban' => 'iban',
        'bacs' => 'bacs',
        'wallet_id' => 'wallet_id',
        'scheme' => 'scheme'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'request_refund_details' => 'setRequestRefundDetails',
        'iban' => 'setIban',
        'bacs' => 'setBacs',
        'wallet_id' => 'setWalletId',
        'scheme' => 'setScheme'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'request_refund_details' => 'getRequestRefundDetails',
        'iban' => 'getIban',
        'bacs' => 'getBacs',
        'wallet_id' => 'getWalletId',
        'scheme' => 'getScheme'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['request_refund_details'] = $data['request_refund_details'] ?? null;
        $this->container['iban'] = $data['iban'] ?? null;
        $this->container['bacs'] = $data['bacs'] ?? null;
        $this->container['wallet_id'] = $data['wallet_id'] ?? null;
        $this->container['scheme'] = $data['scheme'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['iban']) && (mb_strlen($this->container['iban']) > 34)) {
            $invalidProperties[] = "invalid value for 'iban', the character length must be smaller than or equal to 34.";
        }

        if (!is_null($this->container['iban']) && (mb_strlen($this->container['iban']) < 15)) {
            $invalidProperties[] = "invalid value for 'iban', the character length must be bigger than or equal to 15.";
        }

        if (!is_null($this->container['wallet_id']) && (mb_strlen($this->container['wallet_id']) < 1)) {
            $invalidProperties[] = "invalid value for 'wallet_id', the character length must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets request_refund_details
     *
     * @return bool|null
     */
    public function getRequestRefundDetails()
    {
        return $this->container['request_refund_details'];
    }

    /**
     * Sets request_refund_details
     *
     * @param bool|null $request_refund_details When `true`, Plaid will attempt to request refund details from the payee's financial institution.  Support varies between financial institutions and will not always be available.  If refund details could be retrieved, they will be available in the `/payment_initiation/payment/get` response.
     *
     * @return self
     */
    public function setRequestRefundDetails($request_refund_details)
    {
        $this->container['request_refund_details'] = $request_refund_details;

        return $this;
    }

    /**
     * Gets iban
     *
     * @return string|null
     */
    public function getIban()
    {
        return $this->container['iban'];
    }

    /**
     * Sets iban
     *
     * @param string|null $iban The International Bank Account Number (IBAN) for the payer's account. If provided, the end user will be able to send payments only from the specified bank account.
     *
     * @return self
     */
    public function setIban($iban)
    {
        if (!is_null($iban) && (mb_strlen($iban) > 34)) {
            throw new \InvalidArgumentException('invalid length for $iban when calling ExternalPaymentOptions., must be smaller than or equal to 34.');
        }
        if (!is_null($iban) && (mb_strlen($iban) < 15)) {
            throw new \InvalidArgumentException('invalid length for $iban when calling ExternalPaymentOptions., must be bigger than or equal to 15.');
        }

        $this->container['iban'] = $iban;

        return $this;
    }

    /**
     * Gets bacs
     *
     * @return \OpenAPI\Client\Model\PaymentInitiationOptionalRestrictionBacs|null
     */
    public function getBacs()
    {
        return $this->container['bacs'];
    }

    /**
     * Sets bacs
     *
     * @param \OpenAPI\Client\Model\PaymentInitiationOptionalRestrictionBacs|null $bacs bacs
     *
     * @return self
     */
    public function setBacs($bacs)
    {
        $this->container['bacs'] = $bacs;

        return $this;
    }

    /**
     * Gets wallet_id
     *
     * @return string|null
     */
    public function getWalletId()
    {
        return $this->container['wallet_id'];
    }

    /**
     * Sets wallet_id
     *
     * @param string|null $wallet_id The EMI (E-Money Institution) wallet that this payment is associated with, if any. This wallet is used as an intermediary account to enable Plaid to reconcile the settlement of funds for Payment Initiation requests.
     *
     * @return self
     */
    public function setWalletId($wallet_id)
    {

        if (!is_null($wallet_id) && (mb_strlen($wallet_id) < 1)) {
            throw new \InvalidArgumentException('invalid length for $wallet_id when calling ExternalPaymentOptions., must be bigger than or equal to 1.');
        }

        $this->container['wallet_id'] = $wallet_id;

        return $this;
    }

    /**
     * Gets scheme
     *
     * @return \OpenAPI\Client\Model\PaymentScheme|null
     */
    public function getScheme()
    {
        return $this->container['scheme'];
    }

    /**
     * Sets scheme
     *
     * @param \OpenAPI\Client\Model\PaymentScheme|null $scheme scheme
     *
     * @return self
     */
    public function setScheme($scheme)
    {
        $this->container['scheme'] = $scheme;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


