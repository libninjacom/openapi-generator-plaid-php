<?php
/**
 * CreditCardLiability
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.64.13
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * CreditCardLiability Class Doc Comment
 *
 * @category Class
 * @description An object representing a credit card account.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class CreditCardLiability implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CreditCardLiability';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'account_id' => 'string',
        'aprs' => '\OpenAPI\Client\Model\APR[]',
        'is_overdue' => 'bool',
        'last_payment_amount' => 'float',
        'last_payment_date' => '\DateTime',
        'last_statement_issue_date' => '\DateTime',
        'last_statement_balance' => 'float',
        'minimum_payment_amount' => 'float',
        'next_payment_due_date' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'account_id' => null,
        'aprs' => null,
        'is_overdue' => null,
        'last_payment_amount' => null,
        'last_payment_date' => 'date',
        'last_statement_issue_date' => 'date',
        'last_statement_balance' => null,
        'minimum_payment_amount' => null,
        'next_payment_due_date' => 'date'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'account_id' => 'account_id',
        'aprs' => 'aprs',
        'is_overdue' => 'is_overdue',
        'last_payment_amount' => 'last_payment_amount',
        'last_payment_date' => 'last_payment_date',
        'last_statement_issue_date' => 'last_statement_issue_date',
        'last_statement_balance' => 'last_statement_balance',
        'minimum_payment_amount' => 'minimum_payment_amount',
        'next_payment_due_date' => 'next_payment_due_date'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'account_id' => 'setAccountId',
        'aprs' => 'setAprs',
        'is_overdue' => 'setIsOverdue',
        'last_payment_amount' => 'setLastPaymentAmount',
        'last_payment_date' => 'setLastPaymentDate',
        'last_statement_issue_date' => 'setLastStatementIssueDate',
        'last_statement_balance' => 'setLastStatementBalance',
        'minimum_payment_amount' => 'setMinimumPaymentAmount',
        'next_payment_due_date' => 'setNextPaymentDueDate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'account_id' => 'getAccountId',
        'aprs' => 'getAprs',
        'is_overdue' => 'getIsOverdue',
        'last_payment_amount' => 'getLastPaymentAmount',
        'last_payment_date' => 'getLastPaymentDate',
        'last_statement_issue_date' => 'getLastStatementIssueDate',
        'last_statement_balance' => 'getLastStatementBalance',
        'minimum_payment_amount' => 'getMinimumPaymentAmount',
        'next_payment_due_date' => 'getNextPaymentDueDate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['account_id'] = $data['account_id'] ?? null;
        $this->container['aprs'] = $data['aprs'] ?? null;
        $this->container['is_overdue'] = $data['is_overdue'] ?? null;
        $this->container['last_payment_amount'] = $data['last_payment_amount'] ?? null;
        $this->container['last_payment_date'] = $data['last_payment_date'] ?? null;
        $this->container['last_statement_issue_date'] = $data['last_statement_issue_date'] ?? null;
        $this->container['last_statement_balance'] = $data['last_statement_balance'] ?? null;
        $this->container['minimum_payment_amount'] = $data['minimum_payment_amount'] ?? null;
        $this->container['next_payment_due_date'] = $data['next_payment_due_date'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['account_id'] === null) {
            $invalidProperties[] = "'account_id' can't be null";
        }
        if ($this->container['aprs'] === null) {
            $invalidProperties[] = "'aprs' can't be null";
        }
        if ($this->container['is_overdue'] === null) {
            $invalidProperties[] = "'is_overdue' can't be null";
        }
        if ($this->container['last_payment_amount'] === null) {
            $invalidProperties[] = "'last_payment_amount' can't be null";
        }
        if ($this->container['last_payment_date'] === null) {
            $invalidProperties[] = "'last_payment_date' can't be null";
        }
        if ($this->container['last_statement_issue_date'] === null) {
            $invalidProperties[] = "'last_statement_issue_date' can't be null";
        }
        if ($this->container['last_statement_balance'] === null) {
            $invalidProperties[] = "'last_statement_balance' can't be null";
        }
        if ($this->container['minimum_payment_amount'] === null) {
            $invalidProperties[] = "'minimum_payment_amount' can't be null";
        }
        if ($this->container['next_payment_due_date'] === null) {
            $invalidProperties[] = "'next_payment_due_date' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets account_id
     *
     * @return string
     */
    public function getAccountId()
    {
        return $this->container['account_id'];
    }

    /**
     * Sets account_id
     *
     * @param string $account_id The ID of the account that this liability belongs to.
     *
     * @return self
     */
    public function setAccountId($account_id)
    {
        $this->container['account_id'] = $account_id;

        return $this;
    }

    /**
     * Gets aprs
     *
     * @return \OpenAPI\Client\Model\APR[]
     */
    public function getAprs()
    {
        return $this->container['aprs'];
    }

    /**
     * Sets aprs
     *
     * @param \OpenAPI\Client\Model\APR[] $aprs The various interest rates that apply to the account.
     *
     * @return self
     */
    public function setAprs($aprs)
    {
        $this->container['aprs'] = $aprs;

        return $this;
    }

    /**
     * Gets is_overdue
     *
     * @return bool
     */
    public function getIsOverdue()
    {
        return $this->container['is_overdue'];
    }

    /**
     * Sets is_overdue
     *
     * @param bool $is_overdue true if a payment is currently overdue. Availability for this field is limited.
     *
     * @return self
     */
    public function setIsOverdue($is_overdue)
    {
        $this->container['is_overdue'] = $is_overdue;

        return $this;
    }

    /**
     * Gets last_payment_amount
     *
     * @return float
     */
    public function getLastPaymentAmount()
    {
        return $this->container['last_payment_amount'];
    }

    /**
     * Sets last_payment_amount
     *
     * @param float $last_payment_amount The amount of the last payment.
     *
     * @return self
     */
    public function setLastPaymentAmount($last_payment_amount)
    {
        $this->container['last_payment_amount'] = $last_payment_amount;

        return $this;
    }

    /**
     * Gets last_payment_date
     *
     * @return \DateTime
     */
    public function getLastPaymentDate()
    {
        return $this->container['last_payment_date'];
    }

    /**
     * Sets last_payment_date
     *
     * @param \DateTime $last_payment_date The date of the last payment. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD). Availability for this field is limited.
     *
     * @return self
     */
    public function setLastPaymentDate($last_payment_date)
    {
        $this->container['last_payment_date'] = $last_payment_date;

        return $this;
    }

    /**
     * Gets last_statement_issue_date
     *
     * @return \DateTime
     */
    public function getLastStatementIssueDate()
    {
        return $this->container['last_statement_issue_date'];
    }

    /**
     * Sets last_statement_issue_date
     *
     * @param \DateTime $last_statement_issue_date The date of the last statement. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD).
     *
     * @return self
     */
    public function setLastStatementIssueDate($last_statement_issue_date)
    {
        $this->container['last_statement_issue_date'] = $last_statement_issue_date;

        return $this;
    }

    /**
     * Gets last_statement_balance
     *
     * @return float
     */
    public function getLastStatementBalance()
    {
        return $this->container['last_statement_balance'];
    }

    /**
     * Sets last_statement_balance
     *
     * @param float $last_statement_balance The total amount owed as of the last statement issued
     *
     * @return self
     */
    public function setLastStatementBalance($last_statement_balance)
    {
        $this->container['last_statement_balance'] = $last_statement_balance;

        return $this;
    }

    /**
     * Gets minimum_payment_amount
     *
     * @return float
     */
    public function getMinimumPaymentAmount()
    {
        return $this->container['minimum_payment_amount'];
    }

    /**
     * Sets minimum_payment_amount
     *
     * @param float $minimum_payment_amount The minimum payment due for the next billing cycle.
     *
     * @return self
     */
    public function setMinimumPaymentAmount($minimum_payment_amount)
    {
        $this->container['minimum_payment_amount'] = $minimum_payment_amount;

        return $this;
    }

    /**
     * Gets next_payment_due_date
     *
     * @return \DateTime
     */
    public function getNextPaymentDueDate()
    {
        return $this->container['next_payment_due_date'];
    }

    /**
     * Sets next_payment_due_date
     *
     * @param \DateTime $next_payment_due_date The due date for the next payment. The due date is `null` if a payment is not expected. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD).
     *
     * @return self
     */
    public function setNextPaymentDueDate($next_payment_due_date)
    {
        $this->container['next_payment_due_date'] = $next_payment_due_date;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


