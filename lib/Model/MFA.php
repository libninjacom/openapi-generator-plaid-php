<?php
/**
 * MFA
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.64.13
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * MFA Class Doc Comment
 *
 * @category Class
 * @description Specifies the multi-factor authentication settings to use with this test account
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class MFA implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'MFA';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'type' => 'string',
        'question_rounds' => 'float',
        'questions_per_round' => 'float',
        'selection_rounds' => 'float',
        'selections_per_question' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'type' => null,
        'question_rounds' => null,
        'questions_per_round' => null,
        'selection_rounds' => null,
        'selections_per_question' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'type' => 'type',
        'question_rounds' => 'question_rounds',
        'questions_per_round' => 'questions_per_round',
        'selection_rounds' => 'selection_rounds',
        'selections_per_question' => 'selections_per_question'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'type' => 'setType',
        'question_rounds' => 'setQuestionRounds',
        'questions_per_round' => 'setQuestionsPerRound',
        'selection_rounds' => 'setSelectionRounds',
        'selections_per_question' => 'setSelectionsPerQuestion'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'type' => 'getType',
        'question_rounds' => 'getQuestionRounds',
        'questions_per_round' => 'getQuestionsPerRound',
        'selection_rounds' => 'getSelectionRounds',
        'selections_per_question' => 'getSelectionsPerQuestion'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['type'] = $data['type'] ?? null;
        $this->container['question_rounds'] = $data['question_rounds'] ?? null;
        $this->container['questions_per_round'] = $data['questions_per_round'] ?? null;
        $this->container['selection_rounds'] = $data['selection_rounds'] ?? null;
        $this->container['selections_per_question'] = $data['selections_per_question'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        if ($this->container['question_rounds'] === null) {
            $invalidProperties[] = "'question_rounds' can't be null";
        }
        if ($this->container['questions_per_round'] === null) {
            $invalidProperties[] = "'questions_per_round' can't be null";
        }
        if ($this->container['selection_rounds'] === null) {
            $invalidProperties[] = "'selection_rounds' can't be null";
        }
        if ($this->container['selections_per_question'] === null) {
            $invalidProperties[] = "'selections_per_question' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type Possible values are `device`, `selections`, or `questions`.  If value is `device`, the MFA answer is `1234`.  If value is `selections`, the MFA answer is always the first option.  If value is `questions`, the MFA answer is  `answer_<i>_<j>` for the j-th question in the i-th round, starting from 0. For example, the answer to the first question in the second round is `answer_1_0`.
     *
     * @return self
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets question_rounds
     *
     * @return float
     */
    public function getQuestionRounds()
    {
        return $this->container['question_rounds'];
    }

    /**
     * Sets question_rounds
     *
     * @param float $question_rounds Number of rounds of questions. Required if value of `type` is `questions`.
     *
     * @return self
     */
    public function setQuestionRounds($question_rounds)
    {
        $this->container['question_rounds'] = $question_rounds;

        return $this;
    }

    /**
     * Gets questions_per_round
     *
     * @return float
     */
    public function getQuestionsPerRound()
    {
        return $this->container['questions_per_round'];
    }

    /**
     * Sets questions_per_round
     *
     * @param float $questions_per_round Number of questions per round. Required if value of `type` is `questions`. If value of type is `selections`, default value is 2.
     *
     * @return self
     */
    public function setQuestionsPerRound($questions_per_round)
    {
        $this->container['questions_per_round'] = $questions_per_round;

        return $this;
    }

    /**
     * Gets selection_rounds
     *
     * @return float
     */
    public function getSelectionRounds()
    {
        return $this->container['selection_rounds'];
    }

    /**
     * Sets selection_rounds
     *
     * @param float $selection_rounds Number of rounds of selections, used if `type` is `selections`. Defaults to 1.
     *
     * @return self
     */
    public function setSelectionRounds($selection_rounds)
    {
        $this->container['selection_rounds'] = $selection_rounds;

        return $this;
    }

    /**
     * Gets selections_per_question
     *
     * @return float
     */
    public function getSelectionsPerQuestion()
    {
        return $this->container['selections_per_question'];
    }

    /**
     * Sets selections_per_question
     *
     * @param float $selections_per_question Number of available answers per question, used if `type` is `selection`. Defaults to 2.
     *
     * @return self
     */
    public function setSelectionsPerQuestion($selections_per_question)
    {
        $this->container['selections_per_question'] = $selections_per_question;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


