<?php
/**
 * TransferAuthorization
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.64.13
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * TransferAuthorization Class Doc Comment
 *
 * @category Class
 * @description Contains the authorization decision for a proposed transfer
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class TransferAuthorization implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'TransferAuthorization';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'created' => '\DateTime',
        'decision' => 'string',
        'decision_rationale' => '\OpenAPI\Client\Model\TransferAuthorizationDecisionRationale',
        'guarantee_decision' => '\OpenAPI\Client\Model\TransferAuthorizationGuaranteeDecision',
        'guarantee_decision_rationale' => '\OpenAPI\Client\Model\TransferAuthorizationGuaranteeDecisionRationale',
        'proposed_transfer' => '\OpenAPI\Client\Model\TransferAuthorizationProposedTransfer'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'created' => 'date-time',
        'decision' => null,
        'decision_rationale' => null,
        'guarantee_decision' => null,
        'guarantee_decision_rationale' => null,
        'proposed_transfer' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'created' => 'created',
        'decision' => 'decision',
        'decision_rationale' => 'decision_rationale',
        'guarantee_decision' => 'guarantee_decision',
        'guarantee_decision_rationale' => 'guarantee_decision_rationale',
        'proposed_transfer' => 'proposed_transfer'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'created' => 'setCreated',
        'decision' => 'setDecision',
        'decision_rationale' => 'setDecisionRationale',
        'guarantee_decision' => 'setGuaranteeDecision',
        'guarantee_decision_rationale' => 'setGuaranteeDecisionRationale',
        'proposed_transfer' => 'setProposedTransfer'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'created' => 'getCreated',
        'decision' => 'getDecision',
        'decision_rationale' => 'getDecisionRationale',
        'guarantee_decision' => 'getGuaranteeDecision',
        'guarantee_decision_rationale' => 'getGuaranteeDecisionRationale',
        'proposed_transfer' => 'getProposedTransfer'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const DECISION_APPROVED = 'approved';
    public const DECISION_PERMITTED = 'permitted';
    public const DECISION_DECLINED = 'declined';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDecisionAllowableValues()
    {
        return [
            self::DECISION_APPROVED,
            self::DECISION_PERMITTED,
            self::DECISION_DECLINED,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['created'] = $data['created'] ?? null;
        $this->container['decision'] = $data['decision'] ?? null;
        $this->container['decision_rationale'] = $data['decision_rationale'] ?? null;
        $this->container['guarantee_decision'] = $data['guarantee_decision'] ?? null;
        $this->container['guarantee_decision_rationale'] = $data['guarantee_decision_rationale'] ?? null;
        $this->container['proposed_transfer'] = $data['proposed_transfer'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['created'] === null) {
            $invalidProperties[] = "'created' can't be null";
        }
        if ($this->container['decision'] === null) {
            $invalidProperties[] = "'decision' can't be null";
        }
        $allowedValues = $this->getDecisionAllowableValues();
        if (!is_null($this->container['decision']) && !in_array($this->container['decision'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'decision', must be one of '%s'",
                $this->container['decision'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['decision_rationale'] === null) {
            $invalidProperties[] = "'decision_rationale' can't be null";
        }
        if ($this->container['guarantee_decision'] === null) {
            $invalidProperties[] = "'guarantee_decision' can't be null";
        }
        if ($this->container['guarantee_decision_rationale'] === null) {
            $invalidProperties[] = "'guarantee_decision_rationale' can't be null";
        }
        if ($this->container['proposed_transfer'] === null) {
            $invalidProperties[] = "'proposed_transfer' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id Plaid’s unique identifier for a transfer authorization.
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets created
     *
     * @return \DateTime
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     *
     * @param \DateTime $created The datetime representing when the authorization was created, in the format `2006-01-02T15:04:05Z`.
     *
     * @return self
     */
    public function setCreated($created)
    {
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets decision
     *
     * @return string
     */
    public function getDecision()
    {
        return $this->container['decision'];
    }

    /**
     * Sets decision
     *
     * @param string $decision A decision regarding the proposed transfer.  `approved` – The proposed transfer has received the end user's consent and has been approved for processing. Plaid has also reviewed the proposed transfer and has approved it for processing.   `permitted` – Plaid was unable to fetch the information required to approve or decline the proposed transfer. You may proceed with the transfer, but further review is recommended. Plaid is awaiting further instructions from the client.  `declined` – Plaid reviewed the proposed transfer and declined processing. Refer to the `code` field in the `decision_rationale` object for details.
     *
     * @return self
     */
    public function setDecision($decision)
    {
        $allowedValues = $this->getDecisionAllowableValues();
        if (!in_array($decision, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'decision', must be one of '%s'",
                    $decision,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['decision'] = $decision;

        return $this;
    }

    /**
     * Gets decision_rationale
     *
     * @return \OpenAPI\Client\Model\TransferAuthorizationDecisionRationale
     */
    public function getDecisionRationale()
    {
        return $this->container['decision_rationale'];
    }

    /**
     * Sets decision_rationale
     *
     * @param \OpenAPI\Client\Model\TransferAuthorizationDecisionRationale $decision_rationale decision_rationale
     *
     * @return self
     */
    public function setDecisionRationale($decision_rationale)
    {
        $this->container['decision_rationale'] = $decision_rationale;

        return $this;
    }

    /**
     * Gets guarantee_decision
     *
     * @return \OpenAPI\Client\Model\TransferAuthorizationGuaranteeDecision
     */
    public function getGuaranteeDecision()
    {
        return $this->container['guarantee_decision'];
    }

    /**
     * Sets guarantee_decision
     *
     * @param \OpenAPI\Client\Model\TransferAuthorizationGuaranteeDecision $guarantee_decision guarantee_decision
     *
     * @return self
     */
    public function setGuaranteeDecision($guarantee_decision)
    {
        $this->container['guarantee_decision'] = $guarantee_decision;

        return $this;
    }

    /**
     * Gets guarantee_decision_rationale
     *
     * @return \OpenAPI\Client\Model\TransferAuthorizationGuaranteeDecisionRationale
     */
    public function getGuaranteeDecisionRationale()
    {
        return $this->container['guarantee_decision_rationale'];
    }

    /**
     * Sets guarantee_decision_rationale
     *
     * @param \OpenAPI\Client\Model\TransferAuthorizationGuaranteeDecisionRationale $guarantee_decision_rationale guarantee_decision_rationale
     *
     * @return self
     */
    public function setGuaranteeDecisionRationale($guarantee_decision_rationale)
    {
        $this->container['guarantee_decision_rationale'] = $guarantee_decision_rationale;

        return $this;
    }

    /**
     * Gets proposed_transfer
     *
     * @return \OpenAPI\Client\Model\TransferAuthorizationProposedTransfer
     */
    public function getProposedTransfer()
    {
        return $this->container['proposed_transfer'];
    }

    /**
     * Sets proposed_transfer
     *
     * @param \OpenAPI\Client\Model\TransferAuthorizationProposedTransfer $proposed_transfer proposed_transfer
     *
     * @return self
     */
    public function setProposedTransfer($proposed_transfer)
    {
        $this->container['proposed_transfer'] = $proposed_transfer;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


