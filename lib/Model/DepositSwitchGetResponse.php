<?php
/**
 * DepositSwitchGetResponse
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.64.13
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * DepositSwitchGetResponse Class Doc Comment
 *
 * @category Class
 * @description DepositSwitchGetResponse defines the response schema for &#x60;/deposit_switch/get&#x60;
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class DepositSwitchGetResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'DepositSwitchGetResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'deposit_switch_id' => 'string',
        'target_account_id' => 'string',
        'target_item_id' => 'string',
        'state' => 'string',
        'switch_method' => 'string',
        'account_has_multiple_allocations' => 'bool',
        'is_allocated_remainder' => 'bool',
        'percent_allocated' => 'float',
        'amount_allocated' => 'float',
        'employer_name' => 'string',
        'employer_id' => 'string',
        'institution_name' => 'string',
        'institution_id' => 'string',
        'date_created' => '\DateTime',
        'date_completed' => '\DateTime',
        'request_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'deposit_switch_id' => null,
        'target_account_id' => null,
        'target_item_id' => null,
        'state' => null,
        'switch_method' => null,
        'account_has_multiple_allocations' => null,
        'is_allocated_remainder' => null,
        'percent_allocated' => null,
        'amount_allocated' => null,
        'employer_name' => null,
        'employer_id' => null,
        'institution_name' => null,
        'institution_id' => null,
        'date_created' => 'date',
        'date_completed' => 'date',
        'request_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'deposit_switch_id' => 'deposit_switch_id',
        'target_account_id' => 'target_account_id',
        'target_item_id' => 'target_item_id',
        'state' => 'state',
        'switch_method' => 'switch_method',
        'account_has_multiple_allocations' => 'account_has_multiple_allocations',
        'is_allocated_remainder' => 'is_allocated_remainder',
        'percent_allocated' => 'percent_allocated',
        'amount_allocated' => 'amount_allocated',
        'employer_name' => 'employer_name',
        'employer_id' => 'employer_id',
        'institution_name' => 'institution_name',
        'institution_id' => 'institution_id',
        'date_created' => 'date_created',
        'date_completed' => 'date_completed',
        'request_id' => 'request_id'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'deposit_switch_id' => 'setDepositSwitchId',
        'target_account_id' => 'setTargetAccountId',
        'target_item_id' => 'setTargetItemId',
        'state' => 'setState',
        'switch_method' => 'setSwitchMethod',
        'account_has_multiple_allocations' => 'setAccountHasMultipleAllocations',
        'is_allocated_remainder' => 'setIsAllocatedRemainder',
        'percent_allocated' => 'setPercentAllocated',
        'amount_allocated' => 'setAmountAllocated',
        'employer_name' => 'setEmployerName',
        'employer_id' => 'setEmployerId',
        'institution_name' => 'setInstitutionName',
        'institution_id' => 'setInstitutionId',
        'date_created' => 'setDateCreated',
        'date_completed' => 'setDateCompleted',
        'request_id' => 'setRequestId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'deposit_switch_id' => 'getDepositSwitchId',
        'target_account_id' => 'getTargetAccountId',
        'target_item_id' => 'getTargetItemId',
        'state' => 'getState',
        'switch_method' => 'getSwitchMethod',
        'account_has_multiple_allocations' => 'getAccountHasMultipleAllocations',
        'is_allocated_remainder' => 'getIsAllocatedRemainder',
        'percent_allocated' => 'getPercentAllocated',
        'amount_allocated' => 'getAmountAllocated',
        'employer_name' => 'getEmployerName',
        'employer_id' => 'getEmployerId',
        'institution_name' => 'getInstitutionName',
        'institution_id' => 'getInstitutionId',
        'date_created' => 'getDateCreated',
        'date_completed' => 'getDateCompleted',
        'request_id' => 'getRequestId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const STATE_INITIALIZED = 'initialized';
    public const STATE_PROCESSING = 'processing';
    public const STATE_COMPLETED = 'completed';
    public const STATE_ERROR = 'error';
    public const SWITCH_METHOD_INSTANT = 'instant';
    public const SWITCH_METHOD_MAIL = 'mail';
    public const SWITCH_METHOD_PDF = 'pdf';
    public const SWITCH_METHOD_NULL = 'null';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStateAllowableValues()
    {
        return [
            self::STATE_INITIALIZED,
            self::STATE_PROCESSING,
            self::STATE_COMPLETED,
            self::STATE_ERROR,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSwitchMethodAllowableValues()
    {
        return [
            self::SWITCH_METHOD_INSTANT,
            self::SWITCH_METHOD_MAIL,
            self::SWITCH_METHOD_PDF,
            self::SWITCH_METHOD_NULL,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['deposit_switch_id'] = $data['deposit_switch_id'] ?? null;
        $this->container['target_account_id'] = $data['target_account_id'] ?? null;
        $this->container['target_item_id'] = $data['target_item_id'] ?? null;
        $this->container['state'] = $data['state'] ?? null;
        $this->container['switch_method'] = $data['switch_method'] ?? null;
        $this->container['account_has_multiple_allocations'] = $data['account_has_multiple_allocations'] ?? null;
        $this->container['is_allocated_remainder'] = $data['is_allocated_remainder'] ?? null;
        $this->container['percent_allocated'] = $data['percent_allocated'] ?? null;
        $this->container['amount_allocated'] = $data['amount_allocated'] ?? null;
        $this->container['employer_name'] = $data['employer_name'] ?? null;
        $this->container['employer_id'] = $data['employer_id'] ?? null;
        $this->container['institution_name'] = $data['institution_name'] ?? null;
        $this->container['institution_id'] = $data['institution_id'] ?? null;
        $this->container['date_created'] = $data['date_created'] ?? null;
        $this->container['date_completed'] = $data['date_completed'] ?? null;
        $this->container['request_id'] = $data['request_id'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['deposit_switch_id'] === null) {
            $invalidProperties[] = "'deposit_switch_id' can't be null";
        }
        if ($this->container['target_account_id'] === null) {
            $invalidProperties[] = "'target_account_id' can't be null";
        }
        if ($this->container['target_item_id'] === null) {
            $invalidProperties[] = "'target_item_id' can't be null";
        }
        if ($this->container['state'] === null) {
            $invalidProperties[] = "'state' can't be null";
        }
        $allowedValues = $this->getStateAllowableValues();
        if (!is_null($this->container['state']) && !in_array($this->container['state'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'state', must be one of '%s'",
                $this->container['state'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSwitchMethodAllowableValues();
        if (!is_null($this->container['switch_method']) && !in_array($this->container['switch_method'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'switch_method', must be one of '%s'",
                $this->container['switch_method'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['account_has_multiple_allocations'] === null) {
            $invalidProperties[] = "'account_has_multiple_allocations' can't be null";
        }
        if ($this->container['is_allocated_remainder'] === null) {
            $invalidProperties[] = "'is_allocated_remainder' can't be null";
        }
        if ($this->container['percent_allocated'] === null) {
            $invalidProperties[] = "'percent_allocated' can't be null";
        }
        if ($this->container['amount_allocated'] === null) {
            $invalidProperties[] = "'amount_allocated' can't be null";
        }
        if ($this->container['date_created'] === null) {
            $invalidProperties[] = "'date_created' can't be null";
        }
        if ($this->container['date_completed'] === null) {
            $invalidProperties[] = "'date_completed' can't be null";
        }
        if ($this->container['request_id'] === null) {
            $invalidProperties[] = "'request_id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets deposit_switch_id
     *
     * @return string
     */
    public function getDepositSwitchId()
    {
        return $this->container['deposit_switch_id'];
    }

    /**
     * Sets deposit_switch_id
     *
     * @param string $deposit_switch_id The ID of the deposit switch.
     *
     * @return self
     */
    public function setDepositSwitchId($deposit_switch_id)
    {
        $this->container['deposit_switch_id'] = $deposit_switch_id;

        return $this;
    }

    /**
     * Gets target_account_id
     *
     * @return string
     */
    public function getTargetAccountId()
    {
        return $this->container['target_account_id'];
    }

    /**
     * Sets target_account_id
     *
     * @param string $target_account_id The ID of the bank account the direct deposit was switched to.
     *
     * @return self
     */
    public function setTargetAccountId($target_account_id)
    {
        $this->container['target_account_id'] = $target_account_id;

        return $this;
    }

    /**
     * Gets target_item_id
     *
     * @return string
     */
    public function getTargetItemId()
    {
        return $this->container['target_item_id'];
    }

    /**
     * Sets target_item_id
     *
     * @param string $target_item_id The ID of the Item the direct deposit was switched to.
     *
     * @return self
     */
    public function setTargetItemId($target_item_id)
    {
        $this->container['target_item_id'] = $target_item_id;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string $state The state, or status, of the deposit switch.  - `initialized` – The deposit switch has been initialized with the user entering the information required to submit the deposit switch request.  - `processing` – The deposit switch request has been submitted and is being processed.  - `completed` – The user's employer has fulfilled the deposit switch request.  - `error` – There was an error processing the deposit switch request.
     *
     * @return self
     */
    public function setState($state)
    {
        $allowedValues = $this->getStateAllowableValues();
        if (!in_array($state, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'state', must be one of '%s'",
                    $state,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets switch_method
     *
     * @return string|null
     */
    public function getSwitchMethod()
    {
        return $this->container['switch_method'];
    }

    /**
     * Sets switch_method
     *
     * @param string|null $switch_method The method used to make the deposit switch.  - `instant` – User instantly switched their direct deposit to a new or existing bank account by connecting their payroll or employer account.  - `mail` – User requested that Plaid contact their employer by mail to make the direct deposit switch.  - `pdf` – User generated a PDF or email to be sent to their employer with the information necessary to make the deposit switch.'
     *
     * @return self
     */
    public function setSwitchMethod($switch_method)
    {
        $allowedValues = $this->getSwitchMethodAllowableValues();
        if (!is_null($switch_method) && !in_array($switch_method, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'switch_method', must be one of '%s'",
                    $switch_method,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['switch_method'] = $switch_method;

        return $this;
    }

    /**
     * Gets account_has_multiple_allocations
     *
     * @return bool
     */
    public function getAccountHasMultipleAllocations()
    {
        return $this->container['account_has_multiple_allocations'];
    }

    /**
     * Sets account_has_multiple_allocations
     *
     * @param bool $account_has_multiple_allocations When `true`, user’s direct deposit goes to multiple banks. When false, user’s direct deposit only goes to the target account. Always `null` if the deposit switch has not been completed.
     *
     * @return self
     */
    public function setAccountHasMultipleAllocations($account_has_multiple_allocations)
    {
        $this->container['account_has_multiple_allocations'] = $account_has_multiple_allocations;

        return $this;
    }

    /**
     * Gets is_allocated_remainder
     *
     * @return bool
     */
    public function getIsAllocatedRemainder()
    {
        return $this->container['is_allocated_remainder'];
    }

    /**
     * Sets is_allocated_remainder
     *
     * @param bool $is_allocated_remainder When `true`, the target account is allocated the remainder of direct deposit after all other allocations have been deducted. When `false`, user’s direct deposit is allocated as a percent or amount. Always `null` if the deposit switch has not been completed.
     *
     * @return self
     */
    public function setIsAllocatedRemainder($is_allocated_remainder)
    {
        $this->container['is_allocated_remainder'] = $is_allocated_remainder;

        return $this;
    }

    /**
     * Gets percent_allocated
     *
     * @return float
     */
    public function getPercentAllocated()
    {
        return $this->container['percent_allocated'];
    }

    /**
     * Sets percent_allocated
     *
     * @param float $percent_allocated The percentage of direct deposit allocated to the target account. Always `null` if the target account is not allocated a percentage or if the deposit switch has not been completed or if `is_allocated_remainder` is true.
     *
     * @return self
     */
    public function setPercentAllocated($percent_allocated)
    {
        $this->container['percent_allocated'] = $percent_allocated;

        return $this;
    }

    /**
     * Gets amount_allocated
     *
     * @return float
     */
    public function getAmountAllocated()
    {
        return $this->container['amount_allocated'];
    }

    /**
     * Sets amount_allocated
     *
     * @param float $amount_allocated The dollar amount of direct deposit allocated to the target account. Always `null` if the target account is not allocated an amount or if the deposit switch has not been completed.
     *
     * @return self
     */
    public function setAmountAllocated($amount_allocated)
    {
        $this->container['amount_allocated'] = $amount_allocated;

        return $this;
    }

    /**
     * Gets employer_name
     *
     * @return string|null
     */
    public function getEmployerName()
    {
        return $this->container['employer_name'];
    }

    /**
     * Sets employer_name
     *
     * @param string|null $employer_name The name of the employer selected by the user. If the user did not select an employer, the value returned is `null`.
     *
     * @return self
     */
    public function setEmployerName($employer_name)
    {
        $this->container['employer_name'] = $employer_name;

        return $this;
    }

    /**
     * Gets employer_id
     *
     * @return string|null
     */
    public function getEmployerId()
    {
        return $this->container['employer_id'];
    }

    /**
     * Sets employer_id
     *
     * @param string|null $employer_id The ID of the employer selected by the user. If the user did not select an employer, the value returned is `null`.
     *
     * @return self
     */
    public function setEmployerId($employer_id)
    {
        $this->container['employer_id'] = $employer_id;

        return $this;
    }

    /**
     * Gets institution_name
     *
     * @return string|null
     */
    public function getInstitutionName()
    {
        return $this->container['institution_name'];
    }

    /**
     * Sets institution_name
     *
     * @param string|null $institution_name The name of the institution selected by the user. If the user did not select an institution, the value returned is `null`.
     *
     * @return self
     */
    public function setInstitutionName($institution_name)
    {
        $this->container['institution_name'] = $institution_name;

        return $this;
    }

    /**
     * Gets institution_id
     *
     * @return string|null
     */
    public function getInstitutionId()
    {
        return $this->container['institution_id'];
    }

    /**
     * Sets institution_id
     *
     * @param string|null $institution_id The ID of the institution selected by the user. If the user did not select an institution, the value returned is `null`.
     *
     * @return self
     */
    public function setInstitutionId($institution_id)
    {
        $this->container['institution_id'] = $institution_id;

        return $this;
    }

    /**
     * Gets date_created
     *
     * @return \DateTime
     */
    public function getDateCreated()
    {
        return $this->container['date_created'];
    }

    /**
     * Sets date_created
     *
     * @param \DateTime $date_created [ISO 8601](https://wikipedia.org/wiki/ISO_8601) date the deposit switch was created.
     *
     * @return self
     */
    public function setDateCreated($date_created)
    {
        $this->container['date_created'] = $date_created;

        return $this;
    }

    /**
     * Gets date_completed
     *
     * @return \DateTime
     */
    public function getDateCompleted()
    {
        return $this->container['date_completed'];
    }

    /**
     * Sets date_completed
     *
     * @param \DateTime $date_completed [ISO 8601](https://wikipedia.org/wiki/ISO_8601) date the deposit switch was completed. Always `null` if the deposit switch has not been completed.
     *
     * @return self
     */
    public function setDateCompleted($date_completed)
    {
        $this->container['date_completed'] = $date_completed;

        return $this;
    }

    /**
     * Gets request_id
     *
     * @return string
     */
    public function getRequestId()
    {
        return $this->container['request_id'];
    }

    /**
     * Sets request_id
     *
     * @param string $request_id A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     *
     * @return self
     */
    public function setRequestId($request_id)
    {
        $this->container['request_id'] = $request_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


