<?php
/**
 * TransactionStream
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.64.13
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * TransactionStream Class Doc Comment
 *
 * @category Class
 * @description A grouping of related transactions
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class TransactionStream implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'TransactionStream';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'account_id' => 'string',
        'stream_id' => 'string',
        'category_id' => 'string',
        'category' => 'string[]',
        'description' => 'string',
        'first_date' => '\DateTime',
        'last_date' => '\DateTime',
        'frequency' => '\OpenAPI\Client\Model\RecurringTransactionFrequency',
        'transaction_ids' => 'string[]',
        'average_amount' => '\OpenAPI\Client\Model\TransactionStreamAmount',
        'is_active' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'account_id' => null,
        'stream_id' => null,
        'category_id' => null,
        'category' => null,
        'description' => null,
        'first_date' => 'date',
        'last_date' => 'date',
        'frequency' => null,
        'transaction_ids' => null,
        'average_amount' => null,
        'is_active' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'account_id' => 'account_id',
        'stream_id' => 'stream_id',
        'category_id' => 'category_id',
        'category' => 'category',
        'description' => 'description',
        'first_date' => 'first_date',
        'last_date' => 'last_date',
        'frequency' => 'frequency',
        'transaction_ids' => 'transaction_ids',
        'average_amount' => 'average_amount',
        'is_active' => 'is_active'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'account_id' => 'setAccountId',
        'stream_id' => 'setStreamId',
        'category_id' => 'setCategoryId',
        'category' => 'setCategory',
        'description' => 'setDescription',
        'first_date' => 'setFirstDate',
        'last_date' => 'setLastDate',
        'frequency' => 'setFrequency',
        'transaction_ids' => 'setTransactionIds',
        'average_amount' => 'setAverageAmount',
        'is_active' => 'setIsActive'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'account_id' => 'getAccountId',
        'stream_id' => 'getStreamId',
        'category_id' => 'getCategoryId',
        'category' => 'getCategory',
        'description' => 'getDescription',
        'first_date' => 'getFirstDate',
        'last_date' => 'getLastDate',
        'frequency' => 'getFrequency',
        'transaction_ids' => 'getTransactionIds',
        'average_amount' => 'getAverageAmount',
        'is_active' => 'getIsActive'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['account_id'] = $data['account_id'] ?? null;
        $this->container['stream_id'] = $data['stream_id'] ?? null;
        $this->container['category_id'] = $data['category_id'] ?? null;
        $this->container['category'] = $data['category'] ?? null;
        $this->container['description'] = $data['description'] ?? null;
        $this->container['first_date'] = $data['first_date'] ?? null;
        $this->container['last_date'] = $data['last_date'] ?? null;
        $this->container['frequency'] = $data['frequency'] ?? null;
        $this->container['transaction_ids'] = $data['transaction_ids'] ?? null;
        $this->container['average_amount'] = $data['average_amount'] ?? null;
        $this->container['is_active'] = $data['is_active'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['account_id'] === null) {
            $invalidProperties[] = "'account_id' can't be null";
        }
        if ($this->container['stream_id'] === null) {
            $invalidProperties[] = "'stream_id' can't be null";
        }
        if ($this->container['category_id'] === null) {
            $invalidProperties[] = "'category_id' can't be null";
        }
        if ($this->container['category'] === null) {
            $invalidProperties[] = "'category' can't be null";
        }
        if ($this->container['description'] === null) {
            $invalidProperties[] = "'description' can't be null";
        }
        if ($this->container['first_date'] === null) {
            $invalidProperties[] = "'first_date' can't be null";
        }
        if ($this->container['last_date'] === null) {
            $invalidProperties[] = "'last_date' can't be null";
        }
        if ($this->container['frequency'] === null) {
            $invalidProperties[] = "'frequency' can't be null";
        }
        if ($this->container['transaction_ids'] === null) {
            $invalidProperties[] = "'transaction_ids' can't be null";
        }
        if ($this->container['average_amount'] === null) {
            $invalidProperties[] = "'average_amount' can't be null";
        }
        if ($this->container['is_active'] === null) {
            $invalidProperties[] = "'is_active' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets account_id
     *
     * @return string
     */
    public function getAccountId()
    {
        return $this->container['account_id'];
    }

    /**
     * Sets account_id
     *
     * @param string $account_id The ID of the account to which the stream belongs
     *
     * @return self
     */
    public function setAccountId($account_id)
    {
        $this->container['account_id'] = $account_id;

        return $this;
    }

    /**
     * Gets stream_id
     *
     * @return string
     */
    public function getStreamId()
    {
        return $this->container['stream_id'];
    }

    /**
     * Sets stream_id
     *
     * @param string $stream_id A unique id for the stream
     *
     * @return self
     */
    public function setStreamId($stream_id)
    {
        $this->container['stream_id'] = $stream_id;

        return $this;
    }

    /**
     * Gets category_id
     *
     * @return string
     */
    public function getCategoryId()
    {
        return $this->container['category_id'];
    }

    /**
     * Sets category_id
     *
     * @param string $category_id The ID of the category to which this transaction belongs. See [Categories](https://plaid.com/docs/#category-overview).
     *
     * @return self
     */
    public function setCategoryId($category_id)
    {
        $this->container['category_id'] = $category_id;

        return $this;
    }

    /**
     * Gets category
     *
     * @return string[]
     */
    public function getCategory()
    {
        return $this->container['category'];
    }

    /**
     * Sets category
     *
     * @param string[] $category A hierarchical array of the categories to which this transaction belongs. See [Categories](https://plaid.com/docs/#category-overview).
     *
     * @return self
     */
    public function setCategory($category)
    {
        $this->container['category'] = $category;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description A description of the transaction stream.
     *
     * @return self
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets first_date
     *
     * @return \DateTime
     */
    public function getFirstDate()
    {
        return $this->container['first_date'];
    }

    /**
     * Sets first_date
     *
     * @param \DateTime $first_date The posted date of the earliest transaction in the stream.
     *
     * @return self
     */
    public function setFirstDate($first_date)
    {
        $this->container['first_date'] = $first_date;

        return $this;
    }

    /**
     * Gets last_date
     *
     * @return \DateTime
     */
    public function getLastDate()
    {
        return $this->container['last_date'];
    }

    /**
     * Sets last_date
     *
     * @param \DateTime $last_date The posted date of the latest transaction in the stream.
     *
     * @return self
     */
    public function setLastDate($last_date)
    {
        $this->container['last_date'] = $last_date;

        return $this;
    }

    /**
     * Gets frequency
     *
     * @return \OpenAPI\Client\Model\RecurringTransactionFrequency
     */
    public function getFrequency()
    {
        return $this->container['frequency'];
    }

    /**
     * Sets frequency
     *
     * @param \OpenAPI\Client\Model\RecurringTransactionFrequency $frequency frequency
     *
     * @return self
     */
    public function setFrequency($frequency)
    {
        $this->container['frequency'] = $frequency;

        return $this;
    }

    /**
     * Gets transaction_ids
     *
     * @return string[]
     */
    public function getTransactionIds()
    {
        return $this->container['transaction_ids'];
    }

    /**
     * Sets transaction_ids
     *
     * @param string[] $transaction_ids An array of Plaid transaction IDs belonging to the stream, sorted by posted date.
     *
     * @return self
     */
    public function setTransactionIds($transaction_ids)
    {
        $this->container['transaction_ids'] = $transaction_ids;

        return $this;
    }

    /**
     * Gets average_amount
     *
     * @return \OpenAPI\Client\Model\TransactionStreamAmount
     */
    public function getAverageAmount()
    {
        return $this->container['average_amount'];
    }

    /**
     * Sets average_amount
     *
     * @param \OpenAPI\Client\Model\TransactionStreamAmount $average_amount average_amount
     *
     * @return self
     */
    public function setAverageAmount($average_amount)
    {
        $this->container['average_amount'] = $average_amount;

        return $this;
    }

    /**
     * Gets is_active
     *
     * @return bool
     */
    public function getIsActive()
    {
        return $this->container['is_active'];
    }

    /**
     * Sets is_active
     *
     * @param bool $is_active indicates whether the transaction stream is still live.
     *
     * @return self
     */
    public function setIsActive($is_active)
    {
        $this->container['is_active'] = $is_active;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


