<?php
/**
 * LinkTokenGetMetadataResponse
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.64.13
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * LinkTokenGetMetadataResponse Class Doc Comment
 *
 * @category Class
 * @description An object specifying the arguments originally provided to the &#x60;/link/token/create&#x60; call.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class LinkTokenGetMetadataResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'LinkTokenGetMetadataResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'initial_products' => '\OpenAPI\Client\Model\Products[]',
        'webhook' => 'string',
        'country_codes' => '\OpenAPI\Client\Model\CountryCode[]',
        'language' => 'string',
        'account_filters' => '\OpenAPI\Client\Model\AccountFiltersResponse',
        'redirect_uri' => 'string',
        'client_name' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'initial_products' => null,
        'webhook' => null,
        'country_codes' => null,
        'language' => null,
        'account_filters' => null,
        'redirect_uri' => null,
        'client_name' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'initial_products' => 'initial_products',
        'webhook' => 'webhook',
        'country_codes' => 'country_codes',
        'language' => 'language',
        'account_filters' => 'account_filters',
        'redirect_uri' => 'redirect_uri',
        'client_name' => 'client_name'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'initial_products' => 'setInitialProducts',
        'webhook' => 'setWebhook',
        'country_codes' => 'setCountryCodes',
        'language' => 'setLanguage',
        'account_filters' => 'setAccountFilters',
        'redirect_uri' => 'setRedirectUri',
        'client_name' => 'setClientName'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'initial_products' => 'getInitialProducts',
        'webhook' => 'getWebhook',
        'country_codes' => 'getCountryCodes',
        'language' => 'getLanguage',
        'account_filters' => 'getAccountFilters',
        'redirect_uri' => 'getRedirectUri',
        'client_name' => 'getClientName'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['initial_products'] = $data['initial_products'] ?? null;
        $this->container['webhook'] = $data['webhook'] ?? null;
        $this->container['country_codes'] = $data['country_codes'] ?? null;
        $this->container['language'] = $data['language'] ?? null;
        $this->container['account_filters'] = $data['account_filters'] ?? null;
        $this->container['redirect_uri'] = $data['redirect_uri'] ?? null;
        $this->container['client_name'] = $data['client_name'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['initial_products'] === null) {
            $invalidProperties[] = "'initial_products' can't be null";
        }
        if ($this->container['webhook'] === null) {
            $invalidProperties[] = "'webhook' can't be null";
        }
        if ($this->container['country_codes'] === null) {
            $invalidProperties[] = "'country_codes' can't be null";
        }
        if ($this->container['language'] === null) {
            $invalidProperties[] = "'language' can't be null";
        }
        if ($this->container['redirect_uri'] === null) {
            $invalidProperties[] = "'redirect_uri' can't be null";
        }
        if ($this->container['client_name'] === null) {
            $invalidProperties[] = "'client_name' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets initial_products
     *
     * @return \OpenAPI\Client\Model\Products[]
     */
    public function getInitialProducts()
    {
        return $this->container['initial_products'];
    }

    /**
     * Sets initial_products
     *
     * @param \OpenAPI\Client\Model\Products[] $initial_products The `products` specified in the `/link/token/create` call.
     *
     * @return self
     */
    public function setInitialProducts($initial_products)
    {
        $this->container['initial_products'] = $initial_products;

        return $this;
    }

    /**
     * Gets webhook
     *
     * @return string
     */
    public function getWebhook()
    {
        return $this->container['webhook'];
    }

    /**
     * Sets webhook
     *
     * @param string $webhook The `webhook` specified in the `/link/token/create` call.
     *
     * @return self
     */
    public function setWebhook($webhook)
    {
        $this->container['webhook'] = $webhook;

        return $this;
    }

    /**
     * Gets country_codes
     *
     * @return \OpenAPI\Client\Model\CountryCode[]
     */
    public function getCountryCodes()
    {
        return $this->container['country_codes'];
    }

    /**
     * Sets country_codes
     *
     * @param \OpenAPI\Client\Model\CountryCode[] $country_codes The `country_codes` specified in the `/link/token/create` call.
     *
     * @return self
     */
    public function setCountryCodes($country_codes)
    {
        $this->container['country_codes'] = $country_codes;

        return $this;
    }

    /**
     * Gets language
     *
     * @return string
     */
    public function getLanguage()
    {
        return $this->container['language'];
    }

    /**
     * Sets language
     *
     * @param string $language The `language` specified in the `/link/token/create` call.
     *
     * @return self
     */
    public function setLanguage($language)
    {
        $this->container['language'] = $language;

        return $this;
    }

    /**
     * Gets account_filters
     *
     * @return \OpenAPI\Client\Model\AccountFiltersResponse|null
     */
    public function getAccountFilters()
    {
        return $this->container['account_filters'];
    }

    /**
     * Sets account_filters
     *
     * @param \OpenAPI\Client\Model\AccountFiltersResponse|null $account_filters account_filters
     *
     * @return self
     */
    public function setAccountFilters($account_filters)
    {
        $this->container['account_filters'] = $account_filters;

        return $this;
    }

    /**
     * Gets redirect_uri
     *
     * @return string
     */
    public function getRedirectUri()
    {
        return $this->container['redirect_uri'];
    }

    /**
     * Sets redirect_uri
     *
     * @param string $redirect_uri The `redirect_uri` specified in the `/link/token/create` call.
     *
     * @return self
     */
    public function setRedirectUri($redirect_uri)
    {
        $this->container['redirect_uri'] = $redirect_uri;

        return $this;
    }

    /**
     * Gets client_name
     *
     * @return string
     */
    public function getClientName()
    {
        return $this->container['client_name'];
    }

    /**
     * Sets client_name
     *
     * @param string $client_name The `client_name` specified in the `/link/token/create` call.
     *
     * @return self
     */
    public function setClientName($client_name)
    {
        $this->container['client_name'] = $client_name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


